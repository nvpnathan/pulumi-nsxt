// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class DHCPServerIPPool : Pulumi.CustomResource
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Generic DHCP options
        /// </summary>
        [Output("dhcpGenericOptions")]
        public Output<ImmutableArray<Outputs.DHCPServerIPPoolDhcpGenericOption>> DhcpGenericOptions { get; private set; } = null!;

        /// <summary>
        /// DHCP classless static routes
        /// </summary>
        [Output("dhcpOption121s")]
        public Output<ImmutableArray<Outputs.DHCPServerIPPoolDhcpOption121>> DhcpOption121s { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Error threshold
        /// </summary>
        [Output("errorThreshold")]
        public Output<int?> ErrorThreshold { get; private set; } = null!;

        /// <summary>
        /// Gateway ip
        /// </summary>
        [Output("gatewayIp")]
        public Output<string?> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// List of IP Ranges
        /// </summary>
        [Output("ipRanges")]
        public Output<ImmutableArray<Outputs.DHCPServerIPPoolIpRange>> IpRanges { get; private set; } = null!;

        /// <summary>
        /// Lease time, in seconds
        /// </summary>
        [Output("leaseTime")]
        public Output<int?> LeaseTime { get; private set; } = null!;

        /// <summary>
        /// Id of dhcp server this pool is serving
        /// </summary>
        [Output("logicalDhcpServerId")]
        public Output<string> LogicalDhcpServerId { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.DHCPServerIPPoolTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Warning threshold
        /// </summary>
        [Output("warningThreshold")]
        public Output<int?> WarningThreshold { get; private set; } = null!;


        /// <summary>
        /// Create a DHCPServerIPPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DHCPServerIPPool(string name, DHCPServerIPPoolArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/dHCPServerIPPool:DHCPServerIPPool", name, args ?? new DHCPServerIPPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DHCPServerIPPool(string name, Input<string> id, DHCPServerIPPoolState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/dHCPServerIPPool:DHCPServerIPPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DHCPServerIPPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DHCPServerIPPool Get(string name, Input<string> id, DHCPServerIPPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new DHCPServerIPPool(name, id, state, options);
        }
    }

    public sealed class DHCPServerIPPoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpGenericOptions")]
        private InputList<Inputs.DHCPServerIPPoolDhcpGenericOptionArgs>? _dhcpGenericOptions;

        /// <summary>
        /// Generic DHCP options
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolDhcpGenericOptionArgs> DhcpGenericOptions
        {
            get => _dhcpGenericOptions ?? (_dhcpGenericOptions = new InputList<Inputs.DHCPServerIPPoolDhcpGenericOptionArgs>());
            set => _dhcpGenericOptions = value;
        }

        [Input("dhcpOption121s")]
        private InputList<Inputs.DHCPServerIPPoolDhcpOption121Args>? _dhcpOption121s;

        /// <summary>
        /// DHCP classless static routes
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolDhcpOption121Args> DhcpOption121s
        {
            get => _dhcpOption121s ?? (_dhcpOption121s = new InputList<Inputs.DHCPServerIPPoolDhcpOption121Args>());
            set => _dhcpOption121s = value;
        }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Error threshold
        /// </summary>
        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        /// <summary>
        /// Gateway ip
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("ipRanges")]
        private InputList<Inputs.DHCPServerIPPoolIpRangeArgs>? _ipRanges;

        /// <summary>
        /// List of IP Ranges
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolIpRangeArgs> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<Inputs.DHCPServerIPPoolIpRangeArgs>());
            set => _ipRanges = value;
        }

        /// <summary>
        /// Lease time, in seconds
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// Id of dhcp server this pool is serving
        /// </summary>
        [Input("logicalDhcpServerId", required: true)]
        public Input<string> LogicalDhcpServerId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.DHCPServerIPPoolTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DHCPServerIPPoolTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Warning threshold
        /// </summary>
        [Input("warningThreshold")]
        public Input<int>? WarningThreshold { get; set; }

        public DHCPServerIPPoolArgs()
        {
        }
    }

    public sealed class DHCPServerIPPoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpGenericOptions")]
        private InputList<Inputs.DHCPServerIPPoolDhcpGenericOptionGetArgs>? _dhcpGenericOptions;

        /// <summary>
        /// Generic DHCP options
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolDhcpGenericOptionGetArgs> DhcpGenericOptions
        {
            get => _dhcpGenericOptions ?? (_dhcpGenericOptions = new InputList<Inputs.DHCPServerIPPoolDhcpGenericOptionGetArgs>());
            set => _dhcpGenericOptions = value;
        }

        [Input("dhcpOption121s")]
        private InputList<Inputs.DHCPServerIPPoolDhcpOption121GetArgs>? _dhcpOption121s;

        /// <summary>
        /// DHCP classless static routes
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolDhcpOption121GetArgs> DhcpOption121s
        {
            get => _dhcpOption121s ?? (_dhcpOption121s = new InputList<Inputs.DHCPServerIPPoolDhcpOption121GetArgs>());
            set => _dhcpOption121s = value;
        }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Error threshold
        /// </summary>
        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        /// <summary>
        /// Gateway ip
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("ipRanges")]
        private InputList<Inputs.DHCPServerIPPoolIpRangeGetArgs>? _ipRanges;

        /// <summary>
        /// List of IP Ranges
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolIpRangeGetArgs> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<Inputs.DHCPServerIPPoolIpRangeGetArgs>());
            set => _ipRanges = value;
        }

        /// <summary>
        /// Lease time, in seconds
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// Id of dhcp server this pool is serving
        /// </summary>
        [Input("logicalDhcpServerId")]
        public Input<string>? LogicalDhcpServerId { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.DHCPServerIPPoolTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.DHCPServerIPPoolTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DHCPServerIPPoolTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Warning threshold
        /// </summary>
        [Input("warningThreshold")]
        public Input<int>? WarningThreshold { get; set; }

        public DHCPServerIPPoolState()
        {
        }
    }
}
