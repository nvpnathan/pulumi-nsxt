// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class LBHTTPApplicationProfile : Pulumi.CustomResource
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// A URL that incoming requests for that virtual server can be temporarily redirected to, If a website is temporarily down
        /// or has moved
        /// </summary>
        [Output("httpRedirectTo")]
        public Output<string?> HttpRedirectTo { get; private set; } = null!;

        /// <summary>
        /// A boolean flag which reflects whether the client will automatically be redirected to use SSL
        /// </summary>
        [Output("httpRedirectToHttps")]
        public Output<bool?> HttpRedirectToHttps { get; private set; } = null!;

        /// <summary>
        /// Timeout in seconds to specify how long an HTTP application can remain idle
        /// </summary>
        [Output("idleTimeout")]
        public Output<int?> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// A boolean flag which reflects whether NTLM challenge/response methodology will be used over HTTP
        /// </summary>
        [Output("ntlm")]
        public Output<bool?> Ntlm { get; private set; } = null!;

        /// <summary>
        /// Maximum request body size in bytes (Unlimited if not specified)
        /// </summary>
        [Output("requestBodySize")]
        public Output<int?> RequestBodySize { get; private set; } = null!;

        /// <summary>
        /// Maximum request header size in bytes. Requests with larger header size will be processed as best effort whereas a
        /// request with header below this specified size is guaranteed to be processed
        /// </summary>
        [Output("requestHeaderSize")]
        public Output<int?> RequestHeaderSize { get; private set; } = null!;

        /// <summary>
        /// Number of seconds waiting for the server response before the connection is closed
        /// </summary>
        [Output("responseTimeout")]
        public Output<int?> ResponseTimeout { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LBHTTPApplicationProfileTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// When this value is set, the x_forwarded_for header in the incoming request will be inserted or replaced
        /// </summary>
        [Output("xForwardedFor")]
        public Output<string?> XForwardedFor { get; private set; } = null!;


        /// <summary>
        /// Create a LBHTTPApplicationProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LBHTTPApplicationProfile(string name, LBHTTPApplicationProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBHTTPApplicationProfile:LBHTTPApplicationProfile", name, args ?? new LBHTTPApplicationProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LBHTTPApplicationProfile(string name, Input<string> id, LBHTTPApplicationProfileState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBHTTPApplicationProfile:LBHTTPApplicationProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LBHTTPApplicationProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LBHTTPApplicationProfile Get(string name, Input<string> id, LBHTTPApplicationProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new LBHTTPApplicationProfile(name, id, state, options);
        }
    }

    public sealed class LBHTTPApplicationProfileArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A URL that incoming requests for that virtual server can be temporarily redirected to, If a website is temporarily down
        /// or has moved
        /// </summary>
        [Input("httpRedirectTo")]
        public Input<string>? HttpRedirectTo { get; set; }

        /// <summary>
        /// A boolean flag which reflects whether the client will automatically be redirected to use SSL
        /// </summary>
        [Input("httpRedirectToHttps")]
        public Input<bool>? HttpRedirectToHttps { get; set; }

        /// <summary>
        /// Timeout in seconds to specify how long an HTTP application can remain idle
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// A boolean flag which reflects whether NTLM challenge/response methodology will be used over HTTP
        /// </summary>
        [Input("ntlm")]
        public Input<bool>? Ntlm { get; set; }

        /// <summary>
        /// Maximum request body size in bytes (Unlimited if not specified)
        /// </summary>
        [Input("requestBodySize")]
        public Input<int>? RequestBodySize { get; set; }

        /// <summary>
        /// Maximum request header size in bytes. Requests with larger header size will be processed as best effort whereas a
        /// request with header below this specified size is guaranteed to be processed
        /// </summary>
        [Input("requestHeaderSize")]
        public Input<int>? RequestHeaderSize { get; set; }

        /// <summary>
        /// Number of seconds waiting for the server response before the connection is closed
        /// </summary>
        [Input("responseTimeout")]
        public Input<int>? ResponseTimeout { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBHTTPApplicationProfileTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBHTTPApplicationProfileTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBHTTPApplicationProfileTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// When this value is set, the x_forwarded_for header in the incoming request will be inserted or replaced
        /// </summary>
        [Input("xForwardedFor")]
        public Input<string>? XForwardedFor { get; set; }

        public LBHTTPApplicationProfileArgs()
        {
        }
    }

    public sealed class LBHTTPApplicationProfileState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// A URL that incoming requests for that virtual server can be temporarily redirected to, If a website is temporarily down
        /// or has moved
        /// </summary>
        [Input("httpRedirectTo")]
        public Input<string>? HttpRedirectTo { get; set; }

        /// <summary>
        /// A boolean flag which reflects whether the client will automatically be redirected to use SSL
        /// </summary>
        [Input("httpRedirectToHttps")]
        public Input<bool>? HttpRedirectToHttps { get; set; }

        /// <summary>
        /// Timeout in seconds to specify how long an HTTP application can remain idle
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// A boolean flag which reflects whether NTLM challenge/response methodology will be used over HTTP
        /// </summary>
        [Input("ntlm")]
        public Input<bool>? Ntlm { get; set; }

        /// <summary>
        /// Maximum request body size in bytes (Unlimited if not specified)
        /// </summary>
        [Input("requestBodySize")]
        public Input<int>? RequestBodySize { get; set; }

        /// <summary>
        /// Maximum request header size in bytes. Requests with larger header size will be processed as best effort whereas a
        /// request with header below this specified size is guaranteed to be processed
        /// </summary>
        [Input("requestHeaderSize")]
        public Input<int>? RequestHeaderSize { get; set; }

        /// <summary>
        /// Number of seconds waiting for the server response before the connection is closed
        /// </summary>
        [Input("responseTimeout")]
        public Input<int>? ResponseTimeout { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBHTTPApplicationProfileTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBHTTPApplicationProfileTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBHTTPApplicationProfileTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// When this value is set, the x_forwarded_for header in the incoming request will be inserted or replaced
        /// </summary>
        [Input("xForwardedFor")]
        public Input<string>? XForwardedFor { get; set; }

        public LBHTTPApplicationProfileState()
        {
        }
    }
}
