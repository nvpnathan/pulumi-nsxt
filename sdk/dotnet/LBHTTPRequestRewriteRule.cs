// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class LBHTTPRequestRewriteRule : Pulumi.CustomResource
    {
        /// <summary>
        /// Rule condition based on http request body
        /// </summary>
        [Output("bodyConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleBodyCondition>> BodyConditions { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on http header
        /// </summary>
        [Output("cookieConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleCookieCondition>> CookieConditions { get; private set; } = null!;

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on http header
        /// </summary>
        [Output("headerConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleHeaderCondition>> HeaderConditions { get; private set; } = null!;

        /// <summary>
        /// Header to replace original header in outgoing message
        /// </summary>
        [Output("headerRewriteAction")]
        public Output<Outputs.LBHTTPRequestRewriteRuleHeaderRewriteAction?> HeaderRewriteAction { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on IP settings of the message
        /// </summary>
        [Output("ipConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleIpCondition>> IpConditions { get; private set; } = null!;

        /// <summary>
        /// Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
        /// </summary>
        [Output("matchStrategy")]
        public Output<string?> MatchStrategy { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on http request method
        /// </summary>
        [Output("methodConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleMethodCondition>> MethodConditions { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on TCP settings of the message
        /// </summary>
        [Output("tcpConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleTcpCondition>> TcpConditions { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on http request URI arguments (query string)
        /// </summary>
        [Output("uriArgumentsConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleUriArgumentsCondition>> UriArgumentsConditions { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on http request URI
        /// </summary>
        [Output("uriConditions")]
        public Output<ImmutableArray<Outputs.LBHTTPRequestRewriteRuleUriCondition>> UriConditions { get; private set; } = null!;

        /// <summary>
        /// Uri to replace original URI in outgoing request
        /// </summary>
        [Output("uriRewriteAction")]
        public Output<Outputs.LBHTTPRequestRewriteRuleUriRewriteAction?> UriRewriteAction { get; private set; } = null!;

        /// <summary>
        /// Rule condition based on http request version
        /// </summary>
        [Output("versionCondition")]
        public Output<Outputs.LBHTTPRequestRewriteRuleVersionCondition?> VersionCondition { get; private set; } = null!;


        /// <summary>
        /// Create a LBHTTPRequestRewriteRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LBHTTPRequestRewriteRule(string name, LBHTTPRequestRewriteRuleArgs? args = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBHTTPRequestRewriteRule:LBHTTPRequestRewriteRule", name, args ?? new LBHTTPRequestRewriteRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LBHTTPRequestRewriteRule(string name, Input<string> id, LBHTTPRequestRewriteRuleState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBHTTPRequestRewriteRule:LBHTTPRequestRewriteRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LBHTTPRequestRewriteRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LBHTTPRequestRewriteRule Get(string name, Input<string> id, LBHTTPRequestRewriteRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new LBHTTPRequestRewriteRule(name, id, state, options);
        }
    }

    public sealed class LBHTTPRequestRewriteRuleArgs : Pulumi.ResourceArgs
    {
        [Input("bodyConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleBodyConditionArgs>? _bodyConditions;

        /// <summary>
        /// Rule condition based on http request body
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleBodyConditionArgs> BodyConditions
        {
            get => _bodyConditions ?? (_bodyConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleBodyConditionArgs>());
            set => _bodyConditions = value;
        }

        [Input("cookieConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleCookieConditionArgs>? _cookieConditions;

        /// <summary>
        /// Rule condition based on http header
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleCookieConditionArgs> CookieConditions
        {
            get => _cookieConditions ?? (_cookieConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleCookieConditionArgs>());
            set => _cookieConditions = value;
        }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("headerConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleHeaderConditionArgs>? _headerConditions;

        /// <summary>
        /// Rule condition based on http header
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleHeaderConditionArgs> HeaderConditions
        {
            get => _headerConditions ?? (_headerConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleHeaderConditionArgs>());
            set => _headerConditions = value;
        }

        /// <summary>
        /// Header to replace original header in outgoing message
        /// </summary>
        [Input("headerRewriteAction")]
        public Input<Inputs.LBHTTPRequestRewriteRuleHeaderRewriteActionArgs>? HeaderRewriteAction { get; set; }

        [Input("ipConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleIpConditionArgs>? _ipConditions;

        /// <summary>
        /// Rule condition based on IP settings of the message
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleIpConditionArgs> IpConditions
        {
            get => _ipConditions ?? (_ipConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleIpConditionArgs>());
            set => _ipConditions = value;
        }

        /// <summary>
        /// Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
        /// </summary>
        [Input("matchStrategy")]
        public Input<string>? MatchStrategy { get; set; }

        [Input("methodConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleMethodConditionArgs>? _methodConditions;

        /// <summary>
        /// Rule condition based on http request method
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleMethodConditionArgs> MethodConditions
        {
            get => _methodConditions ?? (_methodConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleMethodConditionArgs>());
            set => _methodConditions = value;
        }

        [Input("tags")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBHTTPRequestRewriteRuleTagArgs>());
            set => _tags = value;
        }

        [Input("tcpConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleTcpConditionArgs>? _tcpConditions;

        /// <summary>
        /// Rule condition based on TCP settings of the message
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleTcpConditionArgs> TcpConditions
        {
            get => _tcpConditions ?? (_tcpConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleTcpConditionArgs>());
            set => _tcpConditions = value;
        }

        [Input("uriArgumentsConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleUriArgumentsConditionArgs>? _uriArgumentsConditions;

        /// <summary>
        /// Rule condition based on http request URI arguments (query string)
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleUriArgumentsConditionArgs> UriArgumentsConditions
        {
            get => _uriArgumentsConditions ?? (_uriArgumentsConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleUriArgumentsConditionArgs>());
            set => _uriArgumentsConditions = value;
        }

        [Input("uriConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleUriConditionArgs>? _uriConditions;

        /// <summary>
        /// Rule condition based on http request URI
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleUriConditionArgs> UriConditions
        {
            get => _uriConditions ?? (_uriConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleUriConditionArgs>());
            set => _uriConditions = value;
        }

        /// <summary>
        /// Uri to replace original URI in outgoing request
        /// </summary>
        [Input("uriRewriteAction")]
        public Input<Inputs.LBHTTPRequestRewriteRuleUriRewriteActionArgs>? UriRewriteAction { get; set; }

        /// <summary>
        /// Rule condition based on http request version
        /// </summary>
        [Input("versionCondition")]
        public Input<Inputs.LBHTTPRequestRewriteRuleVersionConditionArgs>? VersionCondition { get; set; }

        public LBHTTPRequestRewriteRuleArgs()
        {
        }
    }

    public sealed class LBHTTPRequestRewriteRuleState : Pulumi.ResourceArgs
    {
        [Input("bodyConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleBodyConditionGetArgs>? _bodyConditions;

        /// <summary>
        /// Rule condition based on http request body
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleBodyConditionGetArgs> BodyConditions
        {
            get => _bodyConditions ?? (_bodyConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleBodyConditionGetArgs>());
            set => _bodyConditions = value;
        }

        [Input("cookieConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleCookieConditionGetArgs>? _cookieConditions;

        /// <summary>
        /// Rule condition based on http header
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleCookieConditionGetArgs> CookieConditions
        {
            get => _cookieConditions ?? (_cookieConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleCookieConditionGetArgs>());
            set => _cookieConditions = value;
        }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("headerConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleHeaderConditionGetArgs>? _headerConditions;

        /// <summary>
        /// Rule condition based on http header
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleHeaderConditionGetArgs> HeaderConditions
        {
            get => _headerConditions ?? (_headerConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleHeaderConditionGetArgs>());
            set => _headerConditions = value;
        }

        /// <summary>
        /// Header to replace original header in outgoing message
        /// </summary>
        [Input("headerRewriteAction")]
        public Input<Inputs.LBHTTPRequestRewriteRuleHeaderRewriteActionGetArgs>? HeaderRewriteAction { get; set; }

        [Input("ipConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleIpConditionGetArgs>? _ipConditions;

        /// <summary>
        /// Rule condition based on IP settings of the message
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleIpConditionGetArgs> IpConditions
        {
            get => _ipConditions ?? (_ipConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleIpConditionGetArgs>());
            set => _ipConditions = value;
        }

        /// <summary>
        /// Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
        /// </summary>
        [Input("matchStrategy")]
        public Input<string>? MatchStrategy { get; set; }

        [Input("methodConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleMethodConditionGetArgs>? _methodConditions;

        /// <summary>
        /// Rule condition based on http request method
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleMethodConditionGetArgs> MethodConditions
        {
            get => _methodConditions ?? (_methodConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleMethodConditionGetArgs>());
            set => _methodConditions = value;
        }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBHTTPRequestRewriteRuleTagGetArgs>());
            set => _tags = value;
        }

        [Input("tcpConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleTcpConditionGetArgs>? _tcpConditions;

        /// <summary>
        /// Rule condition based on TCP settings of the message
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleTcpConditionGetArgs> TcpConditions
        {
            get => _tcpConditions ?? (_tcpConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleTcpConditionGetArgs>());
            set => _tcpConditions = value;
        }

        [Input("uriArgumentsConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleUriArgumentsConditionGetArgs>? _uriArgumentsConditions;

        /// <summary>
        /// Rule condition based on http request URI arguments (query string)
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleUriArgumentsConditionGetArgs> UriArgumentsConditions
        {
            get => _uriArgumentsConditions ?? (_uriArgumentsConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleUriArgumentsConditionGetArgs>());
            set => _uriArgumentsConditions = value;
        }

        [Input("uriConditions")]
        private InputList<Inputs.LBHTTPRequestRewriteRuleUriConditionGetArgs>? _uriConditions;

        /// <summary>
        /// Rule condition based on http request URI
        /// </summary>
        public InputList<Inputs.LBHTTPRequestRewriteRuleUriConditionGetArgs> UriConditions
        {
            get => _uriConditions ?? (_uriConditions = new InputList<Inputs.LBHTTPRequestRewriteRuleUriConditionGetArgs>());
            set => _uriConditions = value;
        }

        /// <summary>
        /// Uri to replace original URI in outgoing request
        /// </summary>
        [Input("uriRewriteAction")]
        public Input<Inputs.LBHTTPRequestRewriteRuleUriRewriteActionGetArgs>? UriRewriteAction { get; set; }

        /// <summary>
        /// Rule condition based on http request version
        /// </summary>
        [Input("versionCondition")]
        public Input<Inputs.LBHTTPRequestRewriteRuleVersionConditionGetArgs>? VersionCondition { get; set; }

        public LBHTTPRequestRewriteRuleState()
        {
        }
    }
}
