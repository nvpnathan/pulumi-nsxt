// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class LBHTTPSMonitor : Pulumi.CustomResource
    {
        /// <summary>
        /// Verification depth in the server certificate chain
        /// </summary>
        [Output("certificateChainDepth")]
        public Output<int?> CertificateChainDepth { get; private set; } = null!;

        /// <summary>
        /// Supported SSL cipher list
        /// </summary>
        [Output("ciphers")]
        public Output<ImmutableArray<string>> Ciphers { get; private set; } = null!;

        /// <summary>
        /// client certificate can be specified to support client authentication
        /// </summary>
        [Output("clientCertificateId")]
        public Output<string?> ClientCertificateId { get; private set; } = null!;

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Number of consecutive checks that must fail before marking it down
        /// </summary>
        [Output("fallCount")]
        public Output<int?> FallCount { get; private set; } = null!;

        /// <summary>
        /// The frequency at which the system issues the monitor check (in seconds)
        /// </summary>
        [Output("interval")]
        public Output<int?> Interval { get; private set; } = null!;

        /// <summary>
        /// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or
        /// protocols is insecure
        /// </summary>
        [Output("isSecure")]
        public Output<bool> IsSecure { get; private set; } = null!;

        /// <summary>
        /// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
        /// supported
        /// </summary>
        [Output("monitorPort")]
        public Output<string?> MonitorPort { get; private set; } = null!;

        /// <summary>
        /// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but
        /// disabled by default
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
        /// </summary>
        [Output("requestBody")]
        public Output<string?> RequestBody { get; private set; } = null!;

        /// <summary>
        /// Array of HTTP request headers
        /// </summary>
        [Output("requestHeaders")]
        public Output<ImmutableArray<Outputs.LBHTTPSMonitorRequestHeader>> RequestHeaders { get; private set; } = null!;

        /// <summary>
        /// Health check method for HTTP monitor type
        /// </summary>
        [Output("requestMethod")]
        public Output<string?> RequestMethod { get; private set; } = null!;

        /// <summary>
        /// URL used for HTTP monitor
        /// </summary>
        [Output("requestUrl")]
        public Output<string?> RequestUrl { get; private set; } = null!;

        /// <summary>
        /// HTTP request version
        /// </summary>
        [Output("requestVersion")]
        public Output<string?> RequestVersion { get; private set; } = null!;

        /// <summary>
        /// If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
        /// supported), and succeeds only if there is a match
        /// </summary>
        [Output("responseBody")]
        public Output<string?> ResponseBody { get; private set; } = null!;

        /// <summary>
        /// The HTTP response status code should be a valid HTTP status code
        /// </summary>
        [Output("responseStatusCodes")]
        public Output<ImmutableArray<int>> ResponseStatusCodes { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Number of consecutive checks that must pass before marking it up
        /// </summary>
        [Output("riseCount")]
        public Output<int?> RiseCount { get; private set; } = null!;

        /// <summary>
        /// Server authentication mode
        /// </summary>
        [Output("serverAuth")]
        public Output<string?> ServerAuth { get; private set; } = null!;

        /// <summary>
        /// If server auth type is REQUIRED, server certificate must be signed by one of the CAs
        /// </summary>
        [Output("serverAuthCaIds")]
        public Output<ImmutableArray<string>> ServerAuthCaIds { get; private set; } = null!;

        /// <summary>
        /// Certificate Revocation List (CRL) to disallow compromised server certificates
        /// </summary>
        [Output("serverAuthCrlIds")]
        public Output<ImmutableArray<string>> ServerAuthCrlIds { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LBHTTPSMonitorTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Number of seconds the target has to respond to the monitor request
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a LBHTTPSMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LBHTTPSMonitor(string name, LBHTTPSMonitorArgs? args = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBHTTPSMonitor:LBHTTPSMonitor", name, args ?? new LBHTTPSMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LBHTTPSMonitor(string name, Input<string> id, LBHTTPSMonitorState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBHTTPSMonitor:LBHTTPSMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LBHTTPSMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LBHTTPSMonitor Get(string name, Input<string> id, LBHTTPSMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new LBHTTPSMonitor(name, id, state, options);
        }
    }

    public sealed class LBHTTPSMonitorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Verification depth in the server certificate chain
        /// </summary>
        [Input("certificateChainDepth")]
        public Input<int>? CertificateChainDepth { get; set; }

        [Input("ciphers")]
        private InputList<string>? _ciphers;

        /// <summary>
        /// Supported SSL cipher list
        /// </summary>
        public InputList<string> Ciphers
        {
            get => _ciphers ?? (_ciphers = new InputList<string>());
            set => _ciphers = value;
        }

        /// <summary>
        /// client certificate can be specified to support client authentication
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Number of consecutive checks that must fail before marking it down
        /// </summary>
        [Input("fallCount")]
        public Input<int>? FallCount { get; set; }

        /// <summary>
        /// The frequency at which the system issues the monitor check (in seconds)
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
        /// supported
        /// </summary>
        [Input("monitorPort")]
        public Input<string>? MonitorPort { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but
        /// disabled by default
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
        /// </summary>
        [Input("requestBody")]
        public Input<string>? RequestBody { get; set; }

        [Input("requestHeaders")]
        private InputList<Inputs.LBHTTPSMonitorRequestHeaderArgs>? _requestHeaders;

        /// <summary>
        /// Array of HTTP request headers
        /// </summary>
        public InputList<Inputs.LBHTTPSMonitorRequestHeaderArgs> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputList<Inputs.LBHTTPSMonitorRequestHeaderArgs>());
            set => _requestHeaders = value;
        }

        /// <summary>
        /// Health check method for HTTP monitor type
        /// </summary>
        [Input("requestMethod")]
        public Input<string>? RequestMethod { get; set; }

        /// <summary>
        /// URL used for HTTP monitor
        /// </summary>
        [Input("requestUrl")]
        public Input<string>? RequestUrl { get; set; }

        /// <summary>
        /// HTTP request version
        /// </summary>
        [Input("requestVersion")]
        public Input<string>? RequestVersion { get; set; }

        /// <summary>
        /// If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
        /// supported), and succeeds only if there is a match
        /// </summary>
        [Input("responseBody")]
        public Input<string>? ResponseBody { get; set; }

        [Input("responseStatusCodes")]
        private InputList<int>? _responseStatusCodes;

        /// <summary>
        /// The HTTP response status code should be a valid HTTP status code
        /// </summary>
        public InputList<int> ResponseStatusCodes
        {
            get => _responseStatusCodes ?? (_responseStatusCodes = new InputList<int>());
            set => _responseStatusCodes = value;
        }

        /// <summary>
        /// Number of consecutive checks that must pass before marking it up
        /// </summary>
        [Input("riseCount")]
        public Input<int>? RiseCount { get; set; }

        /// <summary>
        /// Server authentication mode
        /// </summary>
        [Input("serverAuth")]
        public Input<string>? ServerAuth { get; set; }

        [Input("serverAuthCaIds")]
        private InputList<string>? _serverAuthCaIds;

        /// <summary>
        /// If server auth type is REQUIRED, server certificate must be signed by one of the CAs
        /// </summary>
        public InputList<string> ServerAuthCaIds
        {
            get => _serverAuthCaIds ?? (_serverAuthCaIds = new InputList<string>());
            set => _serverAuthCaIds = value;
        }

        [Input("serverAuthCrlIds")]
        private InputList<string>? _serverAuthCrlIds;

        /// <summary>
        /// Certificate Revocation List (CRL) to disallow compromised server certificates
        /// </summary>
        public InputList<string> ServerAuthCrlIds
        {
            get => _serverAuthCrlIds ?? (_serverAuthCrlIds = new InputList<string>());
            set => _serverAuthCrlIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.LBHTTPSMonitorTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBHTTPSMonitorTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBHTTPSMonitorTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Number of seconds the target has to respond to the monitor request
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public LBHTTPSMonitorArgs()
        {
        }
    }

    public sealed class LBHTTPSMonitorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Verification depth in the server certificate chain
        /// </summary>
        [Input("certificateChainDepth")]
        public Input<int>? CertificateChainDepth { get; set; }

        [Input("ciphers")]
        private InputList<string>? _ciphers;

        /// <summary>
        /// Supported SSL cipher list
        /// </summary>
        public InputList<string> Ciphers
        {
            get => _ciphers ?? (_ciphers = new InputList<string>());
            set => _ciphers = value;
        }

        /// <summary>
        /// client certificate can be specified to support client authentication
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Number of consecutive checks that must fail before marking it down
        /// </summary>
        [Input("fallCount")]
        public Input<int>? FallCount { get; set; }

        /// <summary>
        /// The frequency at which the system issues the monitor check (in seconds)
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or
        /// protocols is insecure
        /// </summary>
        [Input("isSecure")]
        public Input<bool>? IsSecure { get; set; }

        /// <summary>
        /// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
        /// supported
        /// </summary>
        [Input("monitorPort")]
        public Input<string>? MonitorPort { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but
        /// disabled by default
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
        /// </summary>
        [Input("requestBody")]
        public Input<string>? RequestBody { get; set; }

        [Input("requestHeaders")]
        private InputList<Inputs.LBHTTPSMonitorRequestHeaderGetArgs>? _requestHeaders;

        /// <summary>
        /// Array of HTTP request headers
        /// </summary>
        public InputList<Inputs.LBHTTPSMonitorRequestHeaderGetArgs> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputList<Inputs.LBHTTPSMonitorRequestHeaderGetArgs>());
            set => _requestHeaders = value;
        }

        /// <summary>
        /// Health check method for HTTP monitor type
        /// </summary>
        [Input("requestMethod")]
        public Input<string>? RequestMethod { get; set; }

        /// <summary>
        /// URL used for HTTP monitor
        /// </summary>
        [Input("requestUrl")]
        public Input<string>? RequestUrl { get; set; }

        /// <summary>
        /// HTTP request version
        /// </summary>
        [Input("requestVersion")]
        public Input<string>? RequestVersion { get; set; }

        /// <summary>
        /// If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
        /// supported), and succeeds only if there is a match
        /// </summary>
        [Input("responseBody")]
        public Input<string>? ResponseBody { get; set; }

        [Input("responseStatusCodes")]
        private InputList<int>? _responseStatusCodes;

        /// <summary>
        /// The HTTP response status code should be a valid HTTP status code
        /// </summary>
        public InputList<int> ResponseStatusCodes
        {
            get => _responseStatusCodes ?? (_responseStatusCodes = new InputList<int>());
            set => _responseStatusCodes = value;
        }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        /// <summary>
        /// Number of consecutive checks that must pass before marking it up
        /// </summary>
        [Input("riseCount")]
        public Input<int>? RiseCount { get; set; }

        /// <summary>
        /// Server authentication mode
        /// </summary>
        [Input("serverAuth")]
        public Input<string>? ServerAuth { get; set; }

        [Input("serverAuthCaIds")]
        private InputList<string>? _serverAuthCaIds;

        /// <summary>
        /// If server auth type is REQUIRED, server certificate must be signed by one of the CAs
        /// </summary>
        public InputList<string> ServerAuthCaIds
        {
            get => _serverAuthCaIds ?? (_serverAuthCaIds = new InputList<string>());
            set => _serverAuthCaIds = value;
        }

        [Input("serverAuthCrlIds")]
        private InputList<string>? _serverAuthCrlIds;

        /// <summary>
        /// Certificate Revocation List (CRL) to disallow compromised server certificates
        /// </summary>
        public InputList<string> ServerAuthCrlIds
        {
            get => _serverAuthCrlIds ?? (_serverAuthCrlIds = new InputList<string>());
            set => _serverAuthCrlIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.LBHTTPSMonitorTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBHTTPSMonitorTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBHTTPSMonitorTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Number of seconds the target has to respond to the monitor request
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public LBHTTPSMonitorState()
        {
        }
    }
}
