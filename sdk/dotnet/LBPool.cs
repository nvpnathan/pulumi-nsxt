// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class LBPool : Pulumi.CustomResource
    {
        /// <summary>
        /// Active health monitor Id. If one is not set, the active healthchecks will be disabled
        /// </summary>
        [Output("activeMonitorId")]
        public Output<string?> ActiveMonitorId { get; private set; } = null!;

        /// <summary>
        /// Load balancing algorithm controls how the incoming connections are distributed among the members
        /// </summary>
        [Output("algorithm")]
        public Output<string?> Algorithm { get; private set; } = null!;

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
        /// </summary>
        [Output("memberGroup")]
        public Output<Outputs.LBPoolMemberGroup?> MemberGroup { get; private set; } = null!;

        /// <summary>
        /// List of server pool members. Each pool member is identified, typically, by an IP address and a port
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<Outputs.LBPoolMember>> Members { get; private set; } = null!;

        /// <summary>
        /// The minimum number of members for the pool to be considered active
        /// </summary>
        [Output("minActiveMembers")]
        public Output<int?> MinActiveMembers { get; private set; } = null!;

        /// <summary>
        /// Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
        /// </summary>
        [Output("passiveMonitorId")]
        public Output<string?> PassiveMonitorId { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// SNAT translation configuration
        /// </summary>
        [Output("snatTranslation")]
        public Output<Outputs.LBPoolSnatTranslation> SnatTranslation { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LBPoolTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
        /// multiple client requests from different client TCP connections
        /// </summary>
        [Output("tcpMultiplexingEnabled")]
        public Output<bool?> TcpMultiplexingEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
        /// </summary>
        [Output("tcpMultiplexingNumber")]
        public Output<int?> TcpMultiplexingNumber { get; private set; } = null!;


        /// <summary>
        /// Create a LBPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LBPool(string name, LBPoolArgs? args = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBPool:LBPool", name, args ?? new LBPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LBPool(string name, Input<string> id, LBPoolState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBPool:LBPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LBPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LBPool Get(string name, Input<string> id, LBPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new LBPool(name, id, state, options);
        }
    }

    public sealed class LBPoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Active health monitor Id. If one is not set, the active healthchecks will be disabled
        /// </summary>
        [Input("activeMonitorId")]
        public Input<string>? ActiveMonitorId { get; set; }

        /// <summary>
        /// Load balancing algorithm controls how the incoming connections are distributed among the members
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
        /// </summary>
        [Input("memberGroup")]
        public Input<Inputs.LBPoolMemberGroupArgs>? MemberGroup { get; set; }

        [Input("members")]
        private InputList<Inputs.LBPoolMemberArgs>? _members;

        /// <summary>
        /// List of server pool members. Each pool member is identified, typically, by an IP address and a port
        /// </summary>
        public InputList<Inputs.LBPoolMemberArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.LBPoolMemberArgs>());
            set => _members = value;
        }

        /// <summary>
        /// The minimum number of members for the pool to be considered active
        /// </summary>
        [Input("minActiveMembers")]
        public Input<int>? MinActiveMembers { get; set; }

        /// <summary>
        /// Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
        /// </summary>
        [Input("passiveMonitorId")]
        public Input<string>? PassiveMonitorId { get; set; }

        /// <summary>
        /// SNAT translation configuration
        /// </summary>
        [Input("snatTranslation")]
        public Input<Inputs.LBPoolSnatTranslationArgs>? SnatTranslation { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBPoolTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBPoolTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBPoolTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
        /// multiple client requests from different client TCP connections
        /// </summary>
        [Input("tcpMultiplexingEnabled")]
        public Input<bool>? TcpMultiplexingEnabled { get; set; }

        /// <summary>
        /// The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
        /// </summary>
        [Input("tcpMultiplexingNumber")]
        public Input<int>? TcpMultiplexingNumber { get; set; }

        public LBPoolArgs()
        {
        }
    }

    public sealed class LBPoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Active health monitor Id. If one is not set, the active healthchecks will be disabled
        /// </summary>
        [Input("activeMonitorId")]
        public Input<string>? ActiveMonitorId { get; set; }

        /// <summary>
        /// Load balancing algorithm controls how the incoming connections are distributed among the members
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
        /// </summary>
        [Input("memberGroup")]
        public Input<Inputs.LBPoolMemberGroupGetArgs>? MemberGroup { get; set; }

        [Input("members")]
        private InputList<Inputs.LBPoolMemberGetArgs>? _members;

        /// <summary>
        /// List of server pool members. Each pool member is identified, typically, by an IP address and a port
        /// </summary>
        public InputList<Inputs.LBPoolMemberGetArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.LBPoolMemberGetArgs>());
            set => _members = value;
        }

        /// <summary>
        /// The minimum number of members for the pool to be considered active
        /// </summary>
        [Input("minActiveMembers")]
        public Input<int>? MinActiveMembers { get; set; }

        /// <summary>
        /// Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
        /// </summary>
        [Input("passiveMonitorId")]
        public Input<string>? PassiveMonitorId { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        /// <summary>
        /// SNAT translation configuration
        /// </summary>
        [Input("snatTranslation")]
        public Input<Inputs.LBPoolSnatTranslationGetArgs>? SnatTranslation { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBPoolTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBPoolTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBPoolTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
        /// multiple client requests from different client TCP connections
        /// </summary>
        [Input("tcpMultiplexingEnabled")]
        public Input<bool>? TcpMultiplexingEnabled { get; set; }

        /// <summary>
        /// The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
        /// </summary>
        [Input("tcpMultiplexingNumber")]
        public Input<int>? TcpMultiplexingNumber { get; set; }

        public LBPoolState()
        {
        }
    }
}
