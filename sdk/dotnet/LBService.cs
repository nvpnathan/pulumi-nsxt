// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class LBService : Pulumi.CustomResource
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Whether the load balancer service is enabled
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Load balancer engine writes information about encountered issues of different severity levels to the error log. This
        /// setting is used to define the severity level of the error log
        /// </summary>
        [Output("errorLogLevel")]
        public Output<string?> ErrorLogLevel { get; private set; } = null!;

        /// <summary>
        /// Logical Tier1 Router to which the Load Balancer is to be attached
        /// </summary>
        [Output("logicalRouterId")]
        public Output<string> LogicalRouterId { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Size of load balancer service
        /// </summary>
        [Output("size")]
        public Output<string?> Size { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LBServiceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Virtual servers associated with this Load Balancer
        /// </summary>
        [Output("virtualServerIds")]
        public Output<ImmutableArray<string>> VirtualServerIds { get; private set; } = null!;


        /// <summary>
        /// Create a LBService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LBService(string name, LBServiceArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/lBService:LBService", name, args ?? new LBServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LBService(string name, Input<string> id, LBServiceState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/lBService:LBService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LBService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LBService Get(string name, Input<string> id, LBServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new LBService(name, id, state, options);
        }
    }

    public sealed class LBServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether the load balancer service is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Load balancer engine writes information about encountered issues of different severity levels to the error log. This
        /// setting is used to define the severity level of the error log
        /// </summary>
        [Input("errorLogLevel")]
        public Input<string>? ErrorLogLevel { get; set; }

        /// <summary>
        /// Logical Tier1 Router to which the Load Balancer is to be attached
        /// </summary>
        [Input("logicalRouterId", required: true)]
        public Input<string> LogicalRouterId { get; set; } = null!;

        /// <summary>
        /// Size of load balancer service
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBServiceTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBServiceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBServiceTagArgs>());
            set => _tags = value;
        }

        [Input("virtualServerIds")]
        private InputList<string>? _virtualServerIds;

        /// <summary>
        /// Virtual servers associated with this Load Balancer
        /// </summary>
        public InputList<string> VirtualServerIds
        {
            get => _virtualServerIds ?? (_virtualServerIds = new InputList<string>());
            set => _virtualServerIds = value;
        }

        public LBServiceArgs()
        {
        }
    }

    public sealed class LBServiceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Whether the load balancer service is enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Load balancer engine writes information about encountered issues of different severity levels to the error log. This
        /// setting is used to define the severity level of the error log
        /// </summary>
        [Input("errorLogLevel")]
        public Input<string>? ErrorLogLevel { get; set; }

        /// <summary>
        /// Logical Tier1 Router to which the Load Balancer is to be attached
        /// </summary>
        [Input("logicalRouterId")]
        public Input<string>? LogicalRouterId { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        /// <summary>
        /// Size of load balancer service
        /// </summary>
        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tags")]
        private InputList<Inputs.LBServiceTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LBServiceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LBServiceTagGetArgs>());
            set => _tags = value;
        }

        [Input("virtualServerIds")]
        private InputList<string>? _virtualServerIds;

        /// <summary>
        /// Virtual servers associated with this Load Balancer
        /// </summary>
        public InputList<string> VirtualServerIds
        {
            get => _virtualServerIds ?? (_virtualServerIds = new InputList<string>());
            set => _virtualServerIds = value;
        }

        public LBServiceState()
        {
        }
    }
}
