// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class LogicalDHCPerver : Pulumi.CustomResource
    {
        /// <summary>
        /// Id of attached logical port
        /// </summary>
        [Output("attachedLogicalPortId")]
        public Output<string> AttachedLogicalPortId { get; private set; } = null!;

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Generic DHCP options
        /// </summary>
        [Output("dhcpGenericOptions")]
        public Output<ImmutableArray<Outputs.LogicalDHCPerverDhcpGenericOption>> DhcpGenericOptions { get; private set; } = null!;

        /// <summary>
        /// DHCP classless static routes
        /// </summary>
        [Output("dhcpOption121s")]
        public Output<ImmutableArray<Outputs.LogicalDHCPerverDhcpOption121>> DhcpOption121s { get; private set; } = null!;

        /// <summary>
        /// DHCP profile uuid
        /// </summary>
        [Output("dhcpProfileId")]
        public Output<string> DhcpProfileId { get; private set; } = null!;

        /// <summary>
        /// DHCP server ip in cidr format
        /// </summary>
        [Output("dhcpServerIp")]
        public Output<string> DhcpServerIp { get; private set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// DNS IPs
        /// </summary>
        [Output("dnsNameServers")]
        public Output<ImmutableArray<string>> DnsNameServers { get; private set; } = null!;

        /// <summary>
        /// Domain name
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// Gateway IP
        /// </summary>
        [Output("gatewayIp")]
        public Output<string?> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LogicalDHCPerverTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a LogicalDHCPerver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogicalDHCPerver(string name, LogicalDHCPerverArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/logicalDHCPerver:LogicalDHCPerver", name, args ?? new LogicalDHCPerverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogicalDHCPerver(string name, Input<string> id, LogicalDHCPerverState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/logicalDHCPerver:LogicalDHCPerver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogicalDHCPerver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogicalDHCPerver Get(string name, Input<string> id, LogicalDHCPerverState? state = null, CustomResourceOptions? options = null)
        {
            return new LogicalDHCPerver(name, id, state, options);
        }
    }

    public sealed class LogicalDHCPerverArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpGenericOptions")]
        private InputList<Inputs.LogicalDHCPerverDhcpGenericOptionArgs>? _dhcpGenericOptions;

        /// <summary>
        /// Generic DHCP options
        /// </summary>
        public InputList<Inputs.LogicalDHCPerverDhcpGenericOptionArgs> DhcpGenericOptions
        {
            get => _dhcpGenericOptions ?? (_dhcpGenericOptions = new InputList<Inputs.LogicalDHCPerverDhcpGenericOptionArgs>());
            set => _dhcpGenericOptions = value;
        }

        [Input("dhcpOption121s")]
        private InputList<Inputs.LogicalDHCPerverDhcpOption121Args>? _dhcpOption121s;

        /// <summary>
        /// DHCP classless static routes
        /// </summary>
        public InputList<Inputs.LogicalDHCPerverDhcpOption121Args> DhcpOption121s
        {
            get => _dhcpOption121s ?? (_dhcpOption121s = new InputList<Inputs.LogicalDHCPerverDhcpOption121Args>());
            set => _dhcpOption121s = value;
        }

        /// <summary>
        /// DHCP profile uuid
        /// </summary>
        [Input("dhcpProfileId", required: true)]
        public Input<string> DhcpProfileId { get; set; } = null!;

        /// <summary>
        /// DHCP server ip in cidr format
        /// </summary>
        [Input("dhcpServerIp", required: true)]
        public Input<string> DhcpServerIp { get; set; } = null!;

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("dnsNameServers")]
        private InputList<string>? _dnsNameServers;

        /// <summary>
        /// DNS IPs
        /// </summary>
        public InputList<string> DnsNameServers
        {
            get => _dnsNameServers ?? (_dnsNameServers = new InputList<string>());
            set => _dnsNameServers = value;
        }

        /// <summary>
        /// Domain name
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Gateway IP
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("tags")]
        private InputList<Inputs.LogicalDHCPerverTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LogicalDHCPerverTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LogicalDHCPerverTagArgs>());
            set => _tags = value;
        }

        public LogicalDHCPerverArgs()
        {
        }
    }

    public sealed class LogicalDHCPerverState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Id of attached logical port
        /// </summary>
        [Input("attachedLogicalPortId")]
        public Input<string>? AttachedLogicalPortId { get; set; }

        /// <summary>
        /// Description of this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpGenericOptions")]
        private InputList<Inputs.LogicalDHCPerverDhcpGenericOptionGetArgs>? _dhcpGenericOptions;

        /// <summary>
        /// Generic DHCP options
        /// </summary>
        public InputList<Inputs.LogicalDHCPerverDhcpGenericOptionGetArgs> DhcpGenericOptions
        {
            get => _dhcpGenericOptions ?? (_dhcpGenericOptions = new InputList<Inputs.LogicalDHCPerverDhcpGenericOptionGetArgs>());
            set => _dhcpGenericOptions = value;
        }

        [Input("dhcpOption121s")]
        private InputList<Inputs.LogicalDHCPerverDhcpOption121GetArgs>? _dhcpOption121s;

        /// <summary>
        /// DHCP classless static routes
        /// </summary>
        public InputList<Inputs.LogicalDHCPerverDhcpOption121GetArgs> DhcpOption121s
        {
            get => _dhcpOption121s ?? (_dhcpOption121s = new InputList<Inputs.LogicalDHCPerverDhcpOption121GetArgs>());
            set => _dhcpOption121s = value;
        }

        /// <summary>
        /// DHCP profile uuid
        /// </summary>
        [Input("dhcpProfileId")]
        public Input<string>? DhcpProfileId { get; set; }

        /// <summary>
        /// DHCP server ip in cidr format
        /// </summary>
        [Input("dhcpServerIp")]
        public Input<string>? DhcpServerIp { get; set; }

        /// <summary>
        /// The display name of this resource. Defaults to ID if not set
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("dnsNameServers")]
        private InputList<string>? _dnsNameServers;

        /// <summary>
        /// DNS IPs
        /// </summary>
        public InputList<string> DnsNameServers
        {
            get => _dnsNameServers ?? (_dnsNameServers = new InputList<string>());
            set => _dnsNameServers = value;
        }

        /// <summary>
        /// Domain name
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Gateway IP
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.LogicalDHCPerverTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.LogicalDHCPerverTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LogicalDHCPerverTagGetArgs>());
            set => _tags = value;
        }

        public LogicalDHCPerverState()
        {
        }
    }
}
