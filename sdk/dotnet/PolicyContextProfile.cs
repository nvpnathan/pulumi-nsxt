// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyContextProfile : Pulumi.CustomResource
    {
        [Output("appIds")]
        public Output<ImmutableArray<Outputs.PolicyContextProfileAppId>> AppIds { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        [Output("domainName")]
        public Output<Outputs.PolicyContextProfileDomainName?> DomainName { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyContextProfileTag>> Tags { get; private set; } = null!;

        [Output("urlCategory")]
        public Output<Outputs.PolicyContextProfileUrlCategory?> UrlCategory { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyContextProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyContextProfile(string name, PolicyContextProfileArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyContextProfile:PolicyContextProfile", name, args ?? new PolicyContextProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyContextProfile(string name, Input<string> id, PolicyContextProfileState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyContextProfile:PolicyContextProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyContextProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyContextProfile Get(string name, Input<string> id, PolicyContextProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyContextProfile(name, id, state, options);
        }
    }

    public sealed class PolicyContextProfileArgs : Pulumi.ResourceArgs
    {
        [Input("appIds")]
        private InputList<Inputs.PolicyContextProfileAppIdArgs>? _appIds;
        public InputList<Inputs.PolicyContextProfileAppIdArgs> AppIds
        {
            get => _appIds ?? (_appIds = new InputList<Inputs.PolicyContextProfileAppIdArgs>());
            set => _appIds = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("domainName")]
        public Input<Inputs.PolicyContextProfileDomainNameArgs>? DomainName { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyContextProfileTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyContextProfileTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyContextProfileTagArgs>());
            set => _tags = value;
        }

        [Input("urlCategory")]
        public Input<Inputs.PolicyContextProfileUrlCategoryArgs>? UrlCategory { get; set; }

        public PolicyContextProfileArgs()
        {
        }
    }

    public sealed class PolicyContextProfileState : Pulumi.ResourceArgs
    {
        [Input("appIds")]
        private InputList<Inputs.PolicyContextProfileAppIdGetArgs>? _appIds;
        public InputList<Inputs.PolicyContextProfileAppIdGetArgs> AppIds
        {
            get => _appIds ?? (_appIds = new InputList<Inputs.PolicyContextProfileAppIdGetArgs>());
            set => _appIds = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("domainName")]
        public Input<Inputs.PolicyContextProfileDomainNameGetArgs>? DomainName { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyContextProfileTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyContextProfileTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyContextProfileTagGetArgs>());
            set => _tags = value;
        }

        [Input("urlCategory")]
        public Input<Inputs.PolicyContextProfileUrlCategoryGetArgs>? UrlCategory { get; set; }

        public PolicyContextProfileState()
        {
        }
    }
}
