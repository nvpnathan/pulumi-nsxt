// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// A conjunction applied to 2 sets of criteria.
        /// </summary>
        [Output("conjunctions")]
        public Output<ImmutableArray<Outputs.PolicyGroupConjunction>> Conjunctions { get; private set; } = null!;

        /// <summary>
        /// Criteria to determine Group membership
        /// </summary>
        [Output("criterias")]
        public Output<ImmutableArray<Outputs.PolicyGroupCriteria>> Criterias { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The domain name to use for resources. If not specified 'default' is used
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
        /// </summary>
        [Output("extendedCriteria")]
        public Output<Outputs.PolicyGroupExtendedCriteria?> ExtendedCriteria { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyGroupTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyGroup(string name, PolicyGroupArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyGroup:PolicyGroup", name, args ?? new PolicyGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyGroup(string name, Input<string> id, PolicyGroupState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyGroup:PolicyGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyGroup Get(string name, Input<string> id, PolicyGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyGroup(name, id, state, options);
        }
    }

    public sealed class PolicyGroupArgs : Pulumi.ResourceArgs
    {
        [Input("conjunctions")]
        private InputList<Inputs.PolicyGroupConjunctionArgs>? _conjunctions;

        /// <summary>
        /// A conjunction applied to 2 sets of criteria.
        /// </summary>
        public InputList<Inputs.PolicyGroupConjunctionArgs> Conjunctions
        {
            get => _conjunctions ?? (_conjunctions = new InputList<Inputs.PolicyGroupConjunctionArgs>());
            set => _conjunctions = value;
        }

        [Input("criterias")]
        private InputList<Inputs.PolicyGroupCriteriaArgs>? _criterias;

        /// <summary>
        /// Criteria to determine Group membership
        /// </summary>
        public InputList<Inputs.PolicyGroupCriteriaArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.PolicyGroupCriteriaArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The domain name to use for resources. If not specified 'default' is used
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
        /// </summary>
        [Input("extendedCriteria")]
        public Input<Inputs.PolicyGroupExtendedCriteriaArgs>? ExtendedCriteria { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyGroupTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyGroupTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyGroupTagArgs>());
            set => _tags = value;
        }

        public PolicyGroupArgs()
        {
        }
    }

    public sealed class PolicyGroupState : Pulumi.ResourceArgs
    {
        [Input("conjunctions")]
        private InputList<Inputs.PolicyGroupConjunctionGetArgs>? _conjunctions;

        /// <summary>
        /// A conjunction applied to 2 sets of criteria.
        /// </summary>
        public InputList<Inputs.PolicyGroupConjunctionGetArgs> Conjunctions
        {
            get => _conjunctions ?? (_conjunctions = new InputList<Inputs.PolicyGroupConjunctionGetArgs>());
            set => _conjunctions = value;
        }

        [Input("criterias")]
        private InputList<Inputs.PolicyGroupCriteriaGetArgs>? _criterias;

        /// <summary>
        /// Criteria to determine Group membership
        /// </summary>
        public InputList<Inputs.PolicyGroupCriteriaGetArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.PolicyGroupCriteriaGetArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The domain name to use for resources. If not specified 'default' is used
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
        /// </summary>
        [Input("extendedCriteria")]
        public Input<Inputs.PolicyGroupExtendedCriteriaGetArgs>? ExtendedCriteria { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyGroupTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyGroupTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyGroupTagGetArgs>());
            set => _tags = value;
        }

        public PolicyGroupState()
        {
        }
    }
}
