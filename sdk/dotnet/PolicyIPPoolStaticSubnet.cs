// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyIPPoolStaticSubnet : Pulumi.CustomResource
    {
        /// <summary>
        /// A collection of IPv4 or IPv6 IP ranges
        /// </summary>
        [Output("allocationRanges")]
        public Output<ImmutableArray<Outputs.PolicyIPPoolStaticSubnetAllocationRange>> AllocationRanges { get; private set; } = null!;

        /// <summary>
        /// Network address and prefix length
        /// </summary>
        [Output("cidr")]
        public Output<string> Cidr { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The collection of up to 3 DNS servers for the subnet
        /// </summary>
        [Output("dnsNameservers")]
        public Output<ImmutableArray<string>> DnsNameservers { get; private set; } = null!;

        /// <summary>
        /// DNS suffix for the nameserver
        /// </summary>
        [Output("dnsSuffix")]
        public Output<string?> DnsSuffix { get; private set; } = null!;

        /// <summary>
        /// The default gateway address
        /// </summary>
        [Output("gateway")]
        public Output<string?> Gateway { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Policy path to the IP Pool for this Subnet
        /// </summary>
        [Output("poolPath")]
        public Output<string> PoolPath { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyIPPoolStaticSubnetTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyIPPoolStaticSubnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyIPPoolStaticSubnet(string name, PolicyIPPoolStaticSubnetArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyIPPoolStaticSubnet:PolicyIPPoolStaticSubnet", name, args ?? new PolicyIPPoolStaticSubnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyIPPoolStaticSubnet(string name, Input<string> id, PolicyIPPoolStaticSubnetState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyIPPoolStaticSubnet:PolicyIPPoolStaticSubnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyIPPoolStaticSubnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyIPPoolStaticSubnet Get(string name, Input<string> id, PolicyIPPoolStaticSubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyIPPoolStaticSubnet(name, id, state, options);
        }
    }

    public sealed class PolicyIPPoolStaticSubnetArgs : Pulumi.ResourceArgs
    {
        [Input("allocationRanges", required: true)]
        private InputList<Inputs.PolicyIPPoolStaticSubnetAllocationRangeArgs>? _allocationRanges;

        /// <summary>
        /// A collection of IPv4 or IPv6 IP ranges
        /// </summary>
        public InputList<Inputs.PolicyIPPoolStaticSubnetAllocationRangeArgs> AllocationRanges
        {
            get => _allocationRanges ?? (_allocationRanges = new InputList<Inputs.PolicyIPPoolStaticSubnetAllocationRangeArgs>());
            set => _allocationRanges = value;
        }

        /// <summary>
        /// Network address and prefix length
        /// </summary>
        [Input("cidr", required: true)]
        public Input<string> Cidr { get; set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("dnsNameservers")]
        private InputList<string>? _dnsNameservers;

        /// <summary>
        /// The collection of up to 3 DNS servers for the subnet
        /// </summary>
        public InputList<string> DnsNameservers
        {
            get => _dnsNameservers ?? (_dnsNameservers = new InputList<string>());
            set => _dnsNameservers = value;
        }

        /// <summary>
        /// DNS suffix for the nameserver
        /// </summary>
        [Input("dnsSuffix")]
        public Input<string>? DnsSuffix { get; set; }

        /// <summary>
        /// The default gateway address
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path to the IP Pool for this Subnet
        /// </summary>
        [Input("poolPath", required: true)]
        public Input<string> PoolPath { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.PolicyIPPoolStaticSubnetTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyIPPoolStaticSubnetTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyIPPoolStaticSubnetTagArgs>());
            set => _tags = value;
        }

        public PolicyIPPoolStaticSubnetArgs()
        {
        }
    }

    public sealed class PolicyIPPoolStaticSubnetState : Pulumi.ResourceArgs
    {
        [Input("allocationRanges")]
        private InputList<Inputs.PolicyIPPoolStaticSubnetAllocationRangeGetArgs>? _allocationRanges;

        /// <summary>
        /// A collection of IPv4 or IPv6 IP ranges
        /// </summary>
        public InputList<Inputs.PolicyIPPoolStaticSubnetAllocationRangeGetArgs> AllocationRanges
        {
            get => _allocationRanges ?? (_allocationRanges = new InputList<Inputs.PolicyIPPoolStaticSubnetAllocationRangeGetArgs>());
            set => _allocationRanges = value;
        }

        /// <summary>
        /// Network address and prefix length
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("dnsNameservers")]
        private InputList<string>? _dnsNameservers;

        /// <summary>
        /// The collection of up to 3 DNS servers for the subnet
        /// </summary>
        public InputList<string> DnsNameservers
        {
            get => _dnsNameservers ?? (_dnsNameservers = new InputList<string>());
            set => _dnsNameservers = value;
        }

        /// <summary>
        /// DNS suffix for the nameserver
        /// </summary>
        [Input("dnsSuffix")]
        public Input<string>? DnsSuffix { get; set; }

        /// <summary>
        /// The default gateway address
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Policy path to the IP Pool for this Subnet
        /// </summary>
        [Input("poolPath")]
        public Input<string>? PoolPath { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyIPPoolStaticSubnetTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyIPPoolStaticSubnetTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyIPPoolStaticSubnetTagGetArgs>());
            set => _tags = value;
        }

        public PolicyIPPoolStaticSubnetState()
        {
        }
    }
}
