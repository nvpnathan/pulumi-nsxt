// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyLBVirtualServer : Pulumi.CustomResource
    {
        /// <summary>
        /// IP access list control for filtering the connections from clients
        /// </summary>
        [Output("accessListControl")]
        public Output<Outputs.PolicyLBVirtualServerAccessListControl?> AccessListControl { get; private set; } = null!;

        /// <summary>
        /// If enabled, all connections/requests sent to virtual server are logged to the access log file
        /// </summary>
        [Output("accessLogEnabled")]
        public Output<bool?> AccessLogEnabled { get; private set; } = null!;

        /// <summary>
        /// Application profile for this virtual server
        /// </summary>
        [Output("applicationProfilePath")]
        public Output<string> ApplicationProfilePath { get; private set; } = null!;

        /// <summary>
        /// This setting is used when load balancer terminates client SSL connection
        /// </summary>
        [Output("clientSsl")]
        public Output<Outputs.PolicyLBVirtualServerClientSsl?> ClientSsl { get; private set; } = null!;

        /// <summary>
        /// Default pool member ports when member port is not defined
        /// </summary>
        [Output("defaultPoolMemberPorts")]
        public Output<ImmutableArray<string>> DefaultPoolMemberPorts { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Flag to enable Virtual Server
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Virtual Server IP address
        /// </summary>
        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Flag to log significant events in access log, if access log is enabed
        /// </summary>
        [Output("logSignificantEventOnly")]
        public Output<bool?> LogSignificantEventOnly { get; private set; } = null!;

        /// <summary>
        /// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
        /// </summary>
        [Output("maxConcurrentConnections")]
        public Output<int?> MaxConcurrentConnections { get; private set; } = null!;

        /// <summary>
        /// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
        /// </summary>
        [Output("maxNewConnectionRate")]
        public Output<int?> MaxNewConnectionRate { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Path to persistence profile allowing related client connections to be sent to the same backend server.
        /// </summary>
        [Output("persistenceProfilePath")]
        public Output<string?> PersistenceProfilePath { get; private set; } = null!;

        /// <summary>
        /// Path for Load Balancer Pool
        /// </summary>
        [Output("poolPath")]
        public Output<string?> PoolPath { get; private set; } = null!;

        /// <summary>
        /// Virtual Server ports
        /// </summary>
        [Output("ports")]
        public Output<ImmutableArray<string>> Ports { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// This setting is used when load balancer establishes connection to the backend server
        /// </summary>
        [Output("serverSsl")]
        public Output<Outputs.PolicyLBVirtualServerServerSsl?> ServerSsl { get; private set; } = null!;

        /// <summary>
        /// Virtual Server can be associated with Load Balancer Service
        /// </summary>
        [Output("servicePath")]
        public Output<string?> ServicePath { get; private set; } = null!;

        /// <summary>
        /// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
        /// </summary>
        [Output("sorryPoolPath")]
        public Output<string?> SorryPoolPath { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyLBVirtualServerTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyLBVirtualServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyLBVirtualServer(string name, PolicyLBVirtualServerArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyLBVirtualServer:PolicyLBVirtualServer", name, args ?? new PolicyLBVirtualServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyLBVirtualServer(string name, Input<string> id, PolicyLBVirtualServerState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyLBVirtualServer:PolicyLBVirtualServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyLBVirtualServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyLBVirtualServer Get(string name, Input<string> id, PolicyLBVirtualServerState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyLBVirtualServer(name, id, state, options);
        }
    }

    public sealed class PolicyLBVirtualServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// IP access list control for filtering the connections from clients
        /// </summary>
        [Input("accessListControl")]
        public Input<Inputs.PolicyLBVirtualServerAccessListControlArgs>? AccessListControl { get; set; }

        /// <summary>
        /// If enabled, all connections/requests sent to virtual server are logged to the access log file
        /// </summary>
        [Input("accessLogEnabled")]
        public Input<bool>? AccessLogEnabled { get; set; }

        /// <summary>
        /// Application profile for this virtual server
        /// </summary>
        [Input("applicationProfilePath", required: true)]
        public Input<string> ApplicationProfilePath { get; set; } = null!;

        /// <summary>
        /// This setting is used when load balancer terminates client SSL connection
        /// </summary>
        [Input("clientSsl")]
        public Input<Inputs.PolicyLBVirtualServerClientSslArgs>? ClientSsl { get; set; }

        [Input("defaultPoolMemberPorts")]
        private InputList<string>? _defaultPoolMemberPorts;

        /// <summary>
        /// Default pool member ports when member port is not defined
        /// </summary>
        public InputList<string> DefaultPoolMemberPorts
        {
            get => _defaultPoolMemberPorts ?? (_defaultPoolMemberPorts = new InputList<string>());
            set => _defaultPoolMemberPorts = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Flag to enable Virtual Server
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Virtual Server IP address
        /// </summary>
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        /// <summary>
        /// Flag to log significant events in access log, if access log is enabed
        /// </summary>
        [Input("logSignificantEventOnly")]
        public Input<bool>? LogSignificantEventOnly { get; set; }

        /// <summary>
        /// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
        /// </summary>
        [Input("maxConcurrentConnections")]
        public Input<int>? MaxConcurrentConnections { get; set; }

        /// <summary>
        /// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
        /// </summary>
        [Input("maxNewConnectionRate")]
        public Input<int>? MaxNewConnectionRate { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Path to persistence profile allowing related client connections to be sent to the same backend server.
        /// </summary>
        [Input("persistenceProfilePath")]
        public Input<string>? PersistenceProfilePath { get; set; }

        /// <summary>
        /// Path for Load Balancer Pool
        /// </summary>
        [Input("poolPath")]
        public Input<string>? PoolPath { get; set; }

        [Input("ports", required: true)]
        private InputList<string>? _ports;

        /// <summary>
        /// Virtual Server ports
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        /// <summary>
        /// This setting is used when load balancer establishes connection to the backend server
        /// </summary>
        [Input("serverSsl")]
        public Input<Inputs.PolicyLBVirtualServerServerSslArgs>? ServerSsl { get; set; }

        /// <summary>
        /// Virtual Server can be associated with Load Balancer Service
        /// </summary>
        [Input("servicePath")]
        public Input<string>? ServicePath { get; set; }

        /// <summary>
        /// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
        /// </summary>
        [Input("sorryPoolPath")]
        public Input<string>? SorryPoolPath { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyLBVirtualServerTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyLBVirtualServerTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyLBVirtualServerTagArgs>());
            set => _tags = value;
        }

        public PolicyLBVirtualServerArgs()
        {
        }
    }

    public sealed class PolicyLBVirtualServerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// IP access list control for filtering the connections from clients
        /// </summary>
        [Input("accessListControl")]
        public Input<Inputs.PolicyLBVirtualServerAccessListControlGetArgs>? AccessListControl { get; set; }

        /// <summary>
        /// If enabled, all connections/requests sent to virtual server are logged to the access log file
        /// </summary>
        [Input("accessLogEnabled")]
        public Input<bool>? AccessLogEnabled { get; set; }

        /// <summary>
        /// Application profile for this virtual server
        /// </summary>
        [Input("applicationProfilePath")]
        public Input<string>? ApplicationProfilePath { get; set; }

        /// <summary>
        /// This setting is used when load balancer terminates client SSL connection
        /// </summary>
        [Input("clientSsl")]
        public Input<Inputs.PolicyLBVirtualServerClientSslGetArgs>? ClientSsl { get; set; }

        [Input("defaultPoolMemberPorts")]
        private InputList<string>? _defaultPoolMemberPorts;

        /// <summary>
        /// Default pool member ports when member port is not defined
        /// </summary>
        public InputList<string> DefaultPoolMemberPorts
        {
            get => _defaultPoolMemberPorts ?? (_defaultPoolMemberPorts = new InputList<string>());
            set => _defaultPoolMemberPorts = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Flag to enable Virtual Server
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Virtual Server IP address
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Flag to log significant events in access log, if access log is enabed
        /// </summary>
        [Input("logSignificantEventOnly")]
        public Input<bool>? LogSignificantEventOnly { get; set; }

        /// <summary>
        /// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
        /// </summary>
        [Input("maxConcurrentConnections")]
        public Input<int>? MaxConcurrentConnections { get; set; }

        /// <summary>
        /// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
        /// </summary>
        [Input("maxNewConnectionRate")]
        public Input<int>? MaxNewConnectionRate { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Path to persistence profile allowing related client connections to be sent to the same backend server.
        /// </summary>
        [Input("persistenceProfilePath")]
        public Input<string>? PersistenceProfilePath { get; set; }

        /// <summary>
        /// Path for Load Balancer Pool
        /// </summary>
        [Input("poolPath")]
        public Input<string>? PoolPath { get; set; }

        [Input("ports")]
        private InputList<string>? _ports;

        /// <summary>
        /// Virtual Server ports
        /// </summary>
        public InputList<string> Ports
        {
            get => _ports ?? (_ports = new InputList<string>());
            set => _ports = value;
        }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        /// <summary>
        /// This setting is used when load balancer establishes connection to the backend server
        /// </summary>
        [Input("serverSsl")]
        public Input<Inputs.PolicyLBVirtualServerServerSslGetArgs>? ServerSsl { get; set; }

        /// <summary>
        /// Virtual Server can be associated with Load Balancer Service
        /// </summary>
        [Input("servicePath")]
        public Input<string>? ServicePath { get; set; }

        /// <summary>
        /// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
        /// </summary>
        [Input("sorryPoolPath")]
        public Input<string>? SorryPoolPath { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyLBVirtualServerTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyLBVirtualServerTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyLBVirtualServerTagGetArgs>());
            set => _tags = value;
        }

        public PolicyLBVirtualServerState()
        {
        }
    }
}
