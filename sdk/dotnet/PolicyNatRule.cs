// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyNatRule : Pulumi.CustomResource
    {
        /// <summary>
        /// The action for the NAT Rule
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The destination network(s) for the NAT Rule
        /// </summary>
        [Output("destinationNetworks")]
        public Output<ImmutableArray<string>> DestinationNetworks { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Enable/disable the rule
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Firewall match flag
        /// </summary>
        [Output("firewallMatch")]
        public Output<string?> FirewallMatch { get; private set; } = null!;

        /// <summary>
        /// The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
        /// </summary>
        [Output("gatewayPath")]
        public Output<string> GatewayPath { get; private set; } = null!;

        /// <summary>
        /// Enable/disable the logging of rule
        /// </summary>
        [Output("logging")]
        public Output<bool?> Logging { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
        /// </summary>
        [Output("rulePriority")]
        public Output<int?> RulePriority { get; private set; } = null!;

        /// <summary>
        /// Policy paths to interfaces or labels where the NAT Rule is enforced
        /// </summary>
        [Output("scopes")]
        public Output<ImmutableArray<string>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Policy path of Service on which the NAT rule will be applied
        /// </summary>
        [Output("service")]
        public Output<string?> Service { get; private set; } = null!;

        /// <summary>
        /// The source network(s) for the NAT Rule
        /// </summary>
        [Output("sourceNetworks")]
        public Output<ImmutableArray<string>> SourceNetworks { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyNatRuleTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The translated network(s) for the NAT Rule
        /// </summary>
        [Output("translatedNetworks")]
        public Output<ImmutableArray<string>> TranslatedNetworks { get; private set; } = null!;

        /// <summary>
        /// Port number or port range. DNAT only
        /// </summary>
        [Output("translatedPorts")]
        public Output<string?> TranslatedPorts { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyNatRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyNatRule(string name, PolicyNatRuleArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyNatRule:PolicyNatRule", name, args ?? new PolicyNatRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyNatRule(string name, Input<string> id, PolicyNatRuleState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyNatRule:PolicyNatRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyNatRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyNatRule Get(string name, Input<string> id, PolicyNatRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyNatRule(name, id, state, options);
        }
    }

    public sealed class PolicyNatRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action for the NAT Rule
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationNetworks")]
        private InputList<string>? _destinationNetworks;

        /// <summary>
        /// The destination network(s) for the NAT Rule
        /// </summary>
        public InputList<string> DestinationNetworks
        {
            get => _destinationNetworks ?? (_destinationNetworks = new InputList<string>());
            set => _destinationNetworks = value;
        }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Enable/disable the rule
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Firewall match flag
        /// </summary>
        [Input("firewallMatch")]
        public Input<string>? FirewallMatch { get; set; }

        /// <summary>
        /// The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
        /// </summary>
        [Input("gatewayPath", required: true)]
        public Input<string> GatewayPath { get; set; } = null!;

        /// <summary>
        /// Enable/disable the logging of rule
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
        /// </summary>
        [Input("rulePriority")]
        public Input<int>? RulePriority { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Policy paths to interfaces or labels where the NAT Rule is enforced
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Policy path of Service on which the NAT rule will be applied
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("sourceNetworks")]
        private InputList<string>? _sourceNetworks;

        /// <summary>
        /// The source network(s) for the NAT Rule
        /// </summary>
        public InputList<string> SourceNetworks
        {
            get => _sourceNetworks ?? (_sourceNetworks = new InputList<string>());
            set => _sourceNetworks = value;
        }

        [Input("tags")]
        private InputList<Inputs.PolicyNatRuleTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyNatRuleTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyNatRuleTagArgs>());
            set => _tags = value;
        }

        [Input("translatedNetworks", required: true)]
        private InputList<string>? _translatedNetworks;

        /// <summary>
        /// The translated network(s) for the NAT Rule
        /// </summary>
        public InputList<string> TranslatedNetworks
        {
            get => _translatedNetworks ?? (_translatedNetworks = new InputList<string>());
            set => _translatedNetworks = value;
        }

        /// <summary>
        /// Port number or port range. DNAT only
        /// </summary>
        [Input("translatedPorts")]
        public Input<string>? TranslatedPorts { get; set; }

        public PolicyNatRuleArgs()
        {
        }
    }

    public sealed class PolicyNatRuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action for the NAT Rule
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationNetworks")]
        private InputList<string>? _destinationNetworks;

        /// <summary>
        /// The destination network(s) for the NAT Rule
        /// </summary>
        public InputList<string> DestinationNetworks
        {
            get => _destinationNetworks ?? (_destinationNetworks = new InputList<string>());
            set => _destinationNetworks = value;
        }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Enable/disable the rule
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Firewall match flag
        /// </summary>
        [Input("firewallMatch")]
        public Input<string>? FirewallMatch { get; set; }

        /// <summary>
        /// The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
        /// </summary>
        [Input("gatewayPath")]
        public Input<string>? GatewayPath { get; set; }

        /// <summary>
        /// Enable/disable the logging of rule
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        /// <summary>
        /// The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
        /// </summary>
        [Input("rulePriority")]
        public Input<int>? RulePriority { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Policy paths to interfaces or labels where the NAT Rule is enforced
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// Policy path of Service on which the NAT rule will be applied
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("sourceNetworks")]
        private InputList<string>? _sourceNetworks;

        /// <summary>
        /// The source network(s) for the NAT Rule
        /// </summary>
        public InputList<string> SourceNetworks
        {
            get => _sourceNetworks ?? (_sourceNetworks = new InputList<string>());
            set => _sourceNetworks = value;
        }

        [Input("tags")]
        private InputList<Inputs.PolicyNatRuleTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyNatRuleTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyNatRuleTagGetArgs>());
            set => _tags = value;
        }

        [Input("translatedNetworks")]
        private InputList<string>? _translatedNetworks;

        /// <summary>
        /// The translated network(s) for the NAT Rule
        /// </summary>
        public InputList<string> TranslatedNetworks
        {
            get => _translatedNetworks ?? (_translatedNetworks = new InputList<string>());
            set => _translatedNetworks = value;
        }

        /// <summary>
        /// Port number or port range. DNAT only
        /// </summary>
        [Input("translatedPorts")]
        public Input<string>? TranslatedPorts { get; set; }

        public PolicyNatRuleState()
        {
        }
    }
}
