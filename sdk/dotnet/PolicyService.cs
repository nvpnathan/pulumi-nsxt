// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyService : Pulumi.CustomResource
    {
        /// <summary>
        /// Algorithm type service entry
        /// </summary>
        [Output("algorithmEntries")]
        public Output<ImmutableArray<Outputs.PolicyServiceAlgorithmEntry>> AlgorithmEntries { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Ether type service entry
        /// </summary>
        [Output("etherTypeEntries")]
        public Output<ImmutableArray<Outputs.PolicyServiceEtherTypeEntry>> EtherTypeEntries { get; private set; } = null!;

        /// <summary>
        /// ICMP type service entry
        /// </summary>
        [Output("icmpEntries")]
        public Output<ImmutableArray<Outputs.PolicyServiceIcmpEntry>> IcmpEntries { get; private set; } = null!;

        /// <summary>
        /// IGMP type service entry
        /// </summary>
        [Output("igmpEntries")]
        public Output<ImmutableArray<Outputs.PolicyServiceIgmpEntry>> IgmpEntries { get; private set; } = null!;

        /// <summary>
        /// IP Protocol type service entry
        /// </summary>
        [Output("ipProtocolEntries")]
        public Output<ImmutableArray<Outputs.PolicyServiceIpProtocolEntry>> IpProtocolEntries { get; private set; } = null!;

        /// <summary>
        /// L4 port set type service entry
        /// </summary>
        [Output("l4PortSetEntries")]
        public Output<ImmutableArray<Outputs.PolicyServiceL4PortSetEntry>> L4PortSetEntries { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyServiceTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyService(string name, PolicyServiceArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyService:PolicyService", name, args ?? new PolicyServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyService(string name, Input<string> id, PolicyServiceState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyService:PolicyService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyService Get(string name, Input<string> id, PolicyServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyService(name, id, state, options);
        }
    }

    public sealed class PolicyServiceArgs : Pulumi.ResourceArgs
    {
        [Input("algorithmEntries")]
        private InputList<Inputs.PolicyServiceAlgorithmEntryArgs>? _algorithmEntries;

        /// <summary>
        /// Algorithm type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceAlgorithmEntryArgs> AlgorithmEntries
        {
            get => _algorithmEntries ?? (_algorithmEntries = new InputList<Inputs.PolicyServiceAlgorithmEntryArgs>());
            set => _algorithmEntries = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        [Input("etherTypeEntries")]
        private InputList<Inputs.PolicyServiceEtherTypeEntryArgs>? _etherTypeEntries;

        /// <summary>
        /// Ether type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceEtherTypeEntryArgs> EtherTypeEntries
        {
            get => _etherTypeEntries ?? (_etherTypeEntries = new InputList<Inputs.PolicyServiceEtherTypeEntryArgs>());
            set => _etherTypeEntries = value;
        }

        [Input("icmpEntries")]
        private InputList<Inputs.PolicyServiceIcmpEntryArgs>? _icmpEntries;

        /// <summary>
        /// ICMP type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceIcmpEntryArgs> IcmpEntries
        {
            get => _icmpEntries ?? (_icmpEntries = new InputList<Inputs.PolicyServiceIcmpEntryArgs>());
            set => _icmpEntries = value;
        }

        [Input("igmpEntries")]
        private InputList<Inputs.PolicyServiceIgmpEntryArgs>? _igmpEntries;

        /// <summary>
        /// IGMP type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceIgmpEntryArgs> IgmpEntries
        {
            get => _igmpEntries ?? (_igmpEntries = new InputList<Inputs.PolicyServiceIgmpEntryArgs>());
            set => _igmpEntries = value;
        }

        [Input("ipProtocolEntries")]
        private InputList<Inputs.PolicyServiceIpProtocolEntryArgs>? _ipProtocolEntries;

        /// <summary>
        /// IP Protocol type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceIpProtocolEntryArgs> IpProtocolEntries
        {
            get => _ipProtocolEntries ?? (_ipProtocolEntries = new InputList<Inputs.PolicyServiceIpProtocolEntryArgs>());
            set => _ipProtocolEntries = value;
        }

        [Input("l4PortSetEntries")]
        private InputList<Inputs.PolicyServiceL4PortSetEntryArgs>? _l4PortSetEntries;

        /// <summary>
        /// L4 port set type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceL4PortSetEntryArgs> L4PortSetEntries
        {
            get => _l4PortSetEntries ?? (_l4PortSetEntries = new InputList<Inputs.PolicyServiceL4PortSetEntryArgs>());
            set => _l4PortSetEntries = value;
        }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyServiceTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyServiceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyServiceTagArgs>());
            set => _tags = value;
        }

        public PolicyServiceArgs()
        {
        }
    }

    public sealed class PolicyServiceState : Pulumi.ResourceArgs
    {
        [Input("algorithmEntries")]
        private InputList<Inputs.PolicyServiceAlgorithmEntryGetArgs>? _algorithmEntries;

        /// <summary>
        /// Algorithm type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceAlgorithmEntryGetArgs> AlgorithmEntries
        {
            get => _algorithmEntries ?? (_algorithmEntries = new InputList<Inputs.PolicyServiceAlgorithmEntryGetArgs>());
            set => _algorithmEntries = value;
        }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("etherTypeEntries")]
        private InputList<Inputs.PolicyServiceEtherTypeEntryGetArgs>? _etherTypeEntries;

        /// <summary>
        /// Ether type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceEtherTypeEntryGetArgs> EtherTypeEntries
        {
            get => _etherTypeEntries ?? (_etherTypeEntries = new InputList<Inputs.PolicyServiceEtherTypeEntryGetArgs>());
            set => _etherTypeEntries = value;
        }

        [Input("icmpEntries")]
        private InputList<Inputs.PolicyServiceIcmpEntryGetArgs>? _icmpEntries;

        /// <summary>
        /// ICMP type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceIcmpEntryGetArgs> IcmpEntries
        {
            get => _icmpEntries ?? (_icmpEntries = new InputList<Inputs.PolicyServiceIcmpEntryGetArgs>());
            set => _icmpEntries = value;
        }

        [Input("igmpEntries")]
        private InputList<Inputs.PolicyServiceIgmpEntryGetArgs>? _igmpEntries;

        /// <summary>
        /// IGMP type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceIgmpEntryGetArgs> IgmpEntries
        {
            get => _igmpEntries ?? (_igmpEntries = new InputList<Inputs.PolicyServiceIgmpEntryGetArgs>());
            set => _igmpEntries = value;
        }

        [Input("ipProtocolEntries")]
        private InputList<Inputs.PolicyServiceIpProtocolEntryGetArgs>? _ipProtocolEntries;

        /// <summary>
        /// IP Protocol type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceIpProtocolEntryGetArgs> IpProtocolEntries
        {
            get => _ipProtocolEntries ?? (_ipProtocolEntries = new InputList<Inputs.PolicyServiceIpProtocolEntryGetArgs>());
            set => _ipProtocolEntries = value;
        }

        [Input("l4PortSetEntries")]
        private InputList<Inputs.PolicyServiceL4PortSetEntryGetArgs>? _l4PortSetEntries;

        /// <summary>
        /// L4 port set type service entry
        /// </summary>
        public InputList<Inputs.PolicyServiceL4PortSetEntryGetArgs> L4PortSetEntries
        {
            get => _l4PortSetEntries ?? (_l4PortSetEntries = new InputList<Inputs.PolicyServiceL4PortSetEntryGetArgs>());
            set => _l4PortSetEntries = value;
        }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputList<Inputs.PolicyServiceTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyServiceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyServiceTagGetArgs>());
            set => _tags = value;
        }

        public PolicyServiceState()
        {
        }
    }
}
