// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Nsxt
{
    public partial class PolicyTier1Gateway : Pulumi.CustomResource
    {
        /// <summary>
        /// Default rule logging
        /// </summary>
        [Output("defaultRuleLogging")]
        public Output<bool?> DefaultRuleLogging { get; private set; } = null!;

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Policy path to DHCP server or relay configuration to use for this Tier1
        /// </summary>
        [Output("dhcpConfigPath")]
        public Output<string?> DhcpConfigPath { get; private set; } = null!;

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The path of the edge cluster connected to this gateway
        /// </summary>
        [Output("edgeClusterPath")]
        public Output<string> EdgeClusterPath { get; private set; } = null!;

        /// <summary>
        /// Policy path to gateway QoS profile in egress direction
        /// </summary>
        [Output("egressQosProfilePath")]
        public Output<string?> EgressQosProfilePath { get; private set; } = null!;

        /// <summary>
        /// Enable edge firewall
        /// </summary>
        [Output("enableFirewall")]
        public Output<bool?> EnableFirewall { get; private set; } = null!;

        /// <summary>
        /// Enable standby relocation
        /// </summary>
        [Output("enableStandbyRelocation")]
        public Output<bool?> EnableStandbyRelocation { get; private set; } = null!;

        /// <summary>
        /// Failover mode
        /// </summary>
        [Output("failoverMode")]
        public Output<string?> FailoverMode { get; private set; } = null!;

        /// <summary>
        /// Force whitelisting
        /// </summary>
        [Output("forceWhitelisting")]
        public Output<bool?> ForceWhitelisting { get; private set; } = null!;

        /// <summary>
        /// Policy path to gateway QoS profile in ingress direction
        /// </summary>
        [Output("ingressQosProfilePath")]
        public Output<string?> IngressQosProfilePath { get; private set; } = null!;

        /// <summary>
        /// Locale Service for the gateway
        /// </summary>
        [Output("intersiteConfig")]
        public Output<Outputs.PolicyTier1GatewayIntersiteConfig> IntersiteConfig { get; private set; } = null!;

        /// <summary>
        /// The path of an IPv6 DAD profile
        /// </summary>
        [Output("ipv6DadProfilePath")]
        public Output<string> Ipv6DadProfilePath { get; private set; } = null!;

        /// <summary>
        /// The path of an IPv6 NDRA profile
        /// </summary>
        [Output("ipv6NdraProfilePath")]
        public Output<string> Ipv6NdraProfilePath { get; private set; } = null!;

        /// <summary>
        /// Locale Service for the gateway
        /// </summary>
        [Output("localeServices")]
        public Output<ImmutableArray<Outputs.PolicyTier1GatewayLocaleService>> LocaleServices { get; private set; } = null!;

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Output("nsxId")]
        public Output<string> NsxId { get; private set; } = null!;

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;

        /// <summary>
        /// Edge node allocation at different sizes for routing and load balancer service to meet performance and scalability
        /// requirements
        /// </summary>
        [Output("poolAllocation")]
        public Output<string?> PoolAllocation { get; private set; } = null!;

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// List of route advertisement rules
        /// </summary>
        [Output("routeAdvertisementRules")]
        public Output<ImmutableArray<Outputs.PolicyTier1GatewayRouteAdvertisementRule>> RouteAdvertisementRules { get; private set; } = null!;

        /// <summary>
        /// Enable different types of route advertisements
        /// </summary>
        [Output("routeAdvertisementTypes")]
        public Output<ImmutableArray<string>> RouteAdvertisementTypes { get; private set; } = null!;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.PolicyTier1GatewayTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The path of the connected Tier0
        /// </summary>
        [Output("tier0Path")]
        public Output<string?> Tier0Path { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyTier1Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyTier1Gateway(string name, PolicyTier1GatewayArgs args, CustomResourceOptions? options = null)
            : base("nsxt:index/policyTier1Gateway:PolicyTier1Gateway", name, args ?? new PolicyTier1GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyTier1Gateway(string name, Input<string> id, PolicyTier1GatewayState? state = null, CustomResourceOptions? options = null)
            : base("nsxt:index/policyTier1Gateway:PolicyTier1Gateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyTier1Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyTier1Gateway Get(string name, Input<string> id, PolicyTier1GatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyTier1Gateway(name, id, state, options);
        }
    }

    public sealed class PolicyTier1GatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default rule logging
        /// </summary>
        [Input("defaultRuleLogging")]
        public Input<bool>? DefaultRuleLogging { get; set; }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Policy path to DHCP server or relay configuration to use for this Tier1
        /// </summary>
        [Input("dhcpConfigPath")]
        public Input<string>? DhcpConfigPath { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// The path of the edge cluster connected to this gateway
        /// </summary>
        [Input("edgeClusterPath")]
        public Input<string>? EdgeClusterPath { get; set; }

        /// <summary>
        /// Policy path to gateway QoS profile in egress direction
        /// </summary>
        [Input("egressQosProfilePath")]
        public Input<string>? EgressQosProfilePath { get; set; }

        /// <summary>
        /// Enable edge firewall
        /// </summary>
        [Input("enableFirewall")]
        public Input<bool>? EnableFirewall { get; set; }

        /// <summary>
        /// Enable standby relocation
        /// </summary>
        [Input("enableStandbyRelocation")]
        public Input<bool>? EnableStandbyRelocation { get; set; }

        /// <summary>
        /// Failover mode
        /// </summary>
        [Input("failoverMode")]
        public Input<string>? FailoverMode { get; set; }

        /// <summary>
        /// Force whitelisting
        /// </summary>
        [Input("forceWhitelisting")]
        public Input<bool>? ForceWhitelisting { get; set; }

        /// <summary>
        /// Policy path to gateway QoS profile in ingress direction
        /// </summary>
        [Input("ingressQosProfilePath")]
        public Input<string>? IngressQosProfilePath { get; set; }

        /// <summary>
        /// Locale Service for the gateway
        /// </summary>
        [Input("intersiteConfig")]
        public Input<Inputs.PolicyTier1GatewayIntersiteConfigArgs>? IntersiteConfig { get; set; }

        /// <summary>
        /// The path of an IPv6 DAD profile
        /// </summary>
        [Input("ipv6DadProfilePath")]
        public Input<string>? Ipv6DadProfilePath { get; set; }

        /// <summary>
        /// The path of an IPv6 NDRA profile
        /// </summary>
        [Input("ipv6NdraProfilePath")]
        public Input<string>? Ipv6NdraProfilePath { get; set; }

        [Input("localeServices")]
        private InputList<Inputs.PolicyTier1GatewayLocaleServiceArgs>? _localeServices;

        /// <summary>
        /// Locale Service for the gateway
        /// </summary>
        public InputList<Inputs.PolicyTier1GatewayLocaleServiceArgs> LocaleServices
        {
            get => _localeServices ?? (_localeServices = new InputList<Inputs.PolicyTier1GatewayLocaleServiceArgs>());
            set => _localeServices = value;
        }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Edge node allocation at different sizes for routing and load balancer service to meet performance and scalability
        /// requirements
        /// </summary>
        [Input("poolAllocation")]
        public Input<string>? PoolAllocation { get; set; }

        [Input("routeAdvertisementRules")]
        private InputList<Inputs.PolicyTier1GatewayRouteAdvertisementRuleArgs>? _routeAdvertisementRules;

        /// <summary>
        /// List of route advertisement rules
        /// </summary>
        public InputList<Inputs.PolicyTier1GatewayRouteAdvertisementRuleArgs> RouteAdvertisementRules
        {
            get => _routeAdvertisementRules ?? (_routeAdvertisementRules = new InputList<Inputs.PolicyTier1GatewayRouteAdvertisementRuleArgs>());
            set => _routeAdvertisementRules = value;
        }

        [Input("routeAdvertisementTypes")]
        private InputList<string>? _routeAdvertisementTypes;

        /// <summary>
        /// Enable different types of route advertisements
        /// </summary>
        public InputList<string> RouteAdvertisementTypes
        {
            get => _routeAdvertisementTypes ?? (_routeAdvertisementTypes = new InputList<string>());
            set => _routeAdvertisementTypes = value;
        }

        [Input("tags")]
        private InputList<Inputs.PolicyTier1GatewayTagArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyTier1GatewayTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyTier1GatewayTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The path of the connected Tier0
        /// </summary>
        [Input("tier0Path")]
        public Input<string>? Tier0Path { get; set; }

        public PolicyTier1GatewayArgs()
        {
        }
    }

    public sealed class PolicyTier1GatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default rule logging
        /// </summary>
        [Input("defaultRuleLogging")]
        public Input<bool>? DefaultRuleLogging { get; set; }

        /// <summary>
        /// Description for this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Policy path to DHCP server or relay configuration to use for this Tier1
        /// </summary>
        [Input("dhcpConfigPath")]
        public Input<string>? DhcpConfigPath { get; set; }

        /// <summary>
        /// Display name for this resource
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The path of the edge cluster connected to this gateway
        /// </summary>
        [Input("edgeClusterPath")]
        public Input<string>? EdgeClusterPath { get; set; }

        /// <summary>
        /// Policy path to gateway QoS profile in egress direction
        /// </summary>
        [Input("egressQosProfilePath")]
        public Input<string>? EgressQosProfilePath { get; set; }

        /// <summary>
        /// Enable edge firewall
        /// </summary>
        [Input("enableFirewall")]
        public Input<bool>? EnableFirewall { get; set; }

        /// <summary>
        /// Enable standby relocation
        /// </summary>
        [Input("enableStandbyRelocation")]
        public Input<bool>? EnableStandbyRelocation { get; set; }

        /// <summary>
        /// Failover mode
        /// </summary>
        [Input("failoverMode")]
        public Input<string>? FailoverMode { get; set; }

        /// <summary>
        /// Force whitelisting
        /// </summary>
        [Input("forceWhitelisting")]
        public Input<bool>? ForceWhitelisting { get; set; }

        /// <summary>
        /// Policy path to gateway QoS profile in ingress direction
        /// </summary>
        [Input("ingressQosProfilePath")]
        public Input<string>? IngressQosProfilePath { get; set; }

        /// <summary>
        /// Locale Service for the gateway
        /// </summary>
        [Input("intersiteConfig")]
        public Input<Inputs.PolicyTier1GatewayIntersiteConfigGetArgs>? IntersiteConfig { get; set; }

        /// <summary>
        /// The path of an IPv6 DAD profile
        /// </summary>
        [Input("ipv6DadProfilePath")]
        public Input<string>? Ipv6DadProfilePath { get; set; }

        /// <summary>
        /// The path of an IPv6 NDRA profile
        /// </summary>
        [Input("ipv6NdraProfilePath")]
        public Input<string>? Ipv6NdraProfilePath { get; set; }

        [Input("localeServices")]
        private InputList<Inputs.PolicyTier1GatewayLocaleServiceGetArgs>? _localeServices;

        /// <summary>
        /// Locale Service for the gateway
        /// </summary>
        public InputList<Inputs.PolicyTier1GatewayLocaleServiceGetArgs> LocaleServices
        {
            get => _localeServices ?? (_localeServices = new InputList<Inputs.PolicyTier1GatewayLocaleServiceGetArgs>());
            set => _localeServices = value;
        }

        /// <summary>
        /// NSX ID for this resource
        /// </summary>
        [Input("nsxId")]
        public Input<string>? NsxId { get; set; }

        /// <summary>
        /// Policy path for this resource
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Edge node allocation at different sizes for routing and load balancer service to meet performance and scalability
        /// requirements
        /// </summary>
        [Input("poolAllocation")]
        public Input<string>? PoolAllocation { get; set; }

        /// <summary>
        /// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
        /// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
        /// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("routeAdvertisementRules")]
        private InputList<Inputs.PolicyTier1GatewayRouteAdvertisementRuleGetArgs>? _routeAdvertisementRules;

        /// <summary>
        /// List of route advertisement rules
        /// </summary>
        public InputList<Inputs.PolicyTier1GatewayRouteAdvertisementRuleGetArgs> RouteAdvertisementRules
        {
            get => _routeAdvertisementRules ?? (_routeAdvertisementRules = new InputList<Inputs.PolicyTier1GatewayRouteAdvertisementRuleGetArgs>());
            set => _routeAdvertisementRules = value;
        }

        [Input("routeAdvertisementTypes")]
        private InputList<string>? _routeAdvertisementTypes;

        /// <summary>
        /// Enable different types of route advertisements
        /// </summary>
        public InputList<string> RouteAdvertisementTypes
        {
            get => _routeAdvertisementTypes ?? (_routeAdvertisementTypes = new InputList<string>());
            set => _routeAdvertisementTypes = value;
        }

        [Input("tags")]
        private InputList<Inputs.PolicyTier1GatewayTagGetArgs>? _tags;

        /// <summary>
        /// Set of opaque identifiers meaningful to the user
        /// </summary>
        public InputList<Inputs.PolicyTier1GatewayTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PolicyTier1GatewayTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The path of the connected Tier0
        /// </summary>
        [Input("tier0Path")]
        public Input<string>? Tier0Path { get; set; }

        public PolicyTier1GatewayState()
        {
        }
    }
}
