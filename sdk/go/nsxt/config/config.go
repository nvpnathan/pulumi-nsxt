// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi/config"
)

func GetAllowUnverifiedSsl(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "nsxt:allowUnverifiedSsl")
	if err == nil {
		return v
	}
	return getEnvOrDefault(false, parseEnvBool, "NSXT_ALLOW_UNVERIFIED_SSL").(bool)
}
func GetCaFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:caFile")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_CA_FILE").(string)
}
func GetClientAuthCertFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:clientAuthCertFile")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_CLIENT_AUTH_CERT_FILE").(string)
}
func GetClientAuthKeyFile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:clientAuthKeyFile")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_CLIENT_AUTH_KEY_FILE").(string)
}

// Enforcement Point for NSXT Policy
func GetEnforcementPoint(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:enforcementPoint")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_POLICY_ENFORCEMENT_POINT").(string)
}

// Is this a policy global manager endpoint
func GetGlobalManager(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "nsxt:globalManager")
	if err == nil {
		return v
	}
	return getEnvOrDefault(false, parseEnvBool, "NSXT_GLOBAL_MANAGER").(bool)
}

// The hostname or IP address of the NSX manager.
func GetHost(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:host")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_MANAGER_HOST").(string)
}

// Maximum number of HTTP client retries
func GetMaxRetries(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "nsxt:maxRetries")
	if err == nil {
		return v
	}
	return getEnvOrDefault(0, parseEnvInt, "NSXT_MAX_RETRIES").(int)
}
func GetPassword(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:password")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_PASSWORD").(string)
}
func GetRemoteAuth(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "nsxt:remoteAuth")
	if err == nil {
		return v
	}
	return getEnvOrDefault(false, parseEnvBool, "NSXT_REMOTE_AUTH").(bool)
}

// Maximum delay in milliseconds between retries of a request
func GetRetryMaxDelay(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "nsxt:retryMaxDelay")
	if err == nil {
		return v
	}
	return getEnvOrDefault(0, parseEnvInt, "NSXT_RETRY_MAX_DELAY").(int)
}

// Minimum delay in milliseconds between retries of a request
func GetRetryMinDelay(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "nsxt:retryMinDelay")
	if err == nil {
		return v
	}
	return getEnvOrDefault(0, parseEnvInt, "NSXT_RETRY_MIN_DELAY").(int)
}

// HTTP replies status codes to retry on
func GetRetryOnStatusCodes(ctx *pulumi.Context) string {
	return config.Get(ctx, "nsxt:retryOnStatusCodes")
}

// Treat partial success status as success
func GetToleratePartialSuccess(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "nsxt:toleratePartialSuccess")
	if err == nil {
		return v
	}
	return getEnvOrDefault(false, parseEnvBool, "NSXT_TOLERATE_PARTIAL_SUCCESS").(bool)
}
func GetUsername(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:username")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_USERNAME").(string)
}

// URL for VMC authorization service (CSP)
func GetVmcAuthHost(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:vmcAuthHost")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_VMC_AUTH_HOST").(string)
}

// Long-living API token for VMC authorization
func GetVmcToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "nsxt:vmcToken")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "NSXT_VMC_TOKEN").(string)
}
