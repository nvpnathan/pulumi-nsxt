// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nsxt

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LBICMPMonitor struct {
	pulumi.CustomResourceState

	// The data size (in bytes) of the ICMP healthcheck packet
	DataLength pulumi.IntPtrOutput `pulumi:"dataLength"`
	// Description of this resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of this resource. Defaults to ID if not set
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Number of consecutive checks that must fail before marking it down
	FallCount pulumi.IntPtrOutput `pulumi:"fallCount"`
	// The frequency at which the system issues the monitor check (in seconds)
	Interval pulumi.IntPtrOutput `pulumi:"interval"`
	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
	// supported
	MonitorPort pulumi.StringPtrOutput `pulumi:"monitorPort"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntOutput `pulumi:"revision"`
	// Number of consecutive checks that must pass before marking it up
	RiseCount pulumi.IntPtrOutput `pulumi:"riseCount"`
	// Set of opaque identifiers meaningful to the user
	Tags LBICMPMonitorTagArrayOutput `pulumi:"tags"`
	// Number of seconds the target has to respond to the monitor request
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
}

// NewLBICMPMonitor registers a new resource with the given unique name, arguments, and options.
func NewLBICMPMonitor(ctx *pulumi.Context,
	name string, args *LBICMPMonitorArgs, opts ...pulumi.ResourceOption) (*LBICMPMonitor, error) {
	if args == nil {
		args = &LBICMPMonitorArgs{}
	}
	var resource LBICMPMonitor
	err := ctx.RegisterResource("nsxt:index/lBICMPMonitor:LBICMPMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLBICMPMonitor gets an existing LBICMPMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLBICMPMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LBICMPMonitorState, opts ...pulumi.ResourceOption) (*LBICMPMonitor, error) {
	var resource LBICMPMonitor
	err := ctx.ReadResource("nsxt:index/lBICMPMonitor:LBICMPMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LBICMPMonitor resources.
type lbicmpmonitorState struct {
	// The data size (in bytes) of the ICMP healthcheck packet
	DataLength *int `pulumi:"dataLength"`
	// Description of this resource
	Description *string `pulumi:"description"`
	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `pulumi:"displayName"`
	// Number of consecutive checks that must fail before marking it down
	FallCount *int `pulumi:"fallCount"`
	// The frequency at which the system issues the monitor check (in seconds)
	Interval *int `pulumi:"interval"`
	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
	// supported
	MonitorPort *string `pulumi:"monitorPort"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *int `pulumi:"revision"`
	// Number of consecutive checks that must pass before marking it up
	RiseCount *int `pulumi:"riseCount"`
	// Set of opaque identifiers meaningful to the user
	Tags []LBICMPMonitorTag `pulumi:"tags"`
	// Number of seconds the target has to respond to the monitor request
	Timeout *int `pulumi:"timeout"`
}

type LBICMPMonitorState struct {
	// The data size (in bytes) of the ICMP healthcheck packet
	DataLength pulumi.IntPtrInput
	// Description of this resource
	Description pulumi.StringPtrInput
	// The display name of this resource. Defaults to ID if not set
	DisplayName pulumi.StringPtrInput
	// Number of consecutive checks that must fail before marking it down
	FallCount pulumi.IntPtrInput
	// The frequency at which the system issues the monitor check (in seconds)
	Interval pulumi.IntPtrInput
	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
	// supported
	MonitorPort pulumi.StringPtrInput
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntPtrInput
	// Number of consecutive checks that must pass before marking it up
	RiseCount pulumi.IntPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags LBICMPMonitorTagArrayInput
	// Number of seconds the target has to respond to the monitor request
	Timeout pulumi.IntPtrInput
}

func (LBICMPMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*lbicmpmonitorState)(nil)).Elem()
}

type lbicmpmonitorArgs struct {
	// The data size (in bytes) of the ICMP healthcheck packet
	DataLength *int `pulumi:"dataLength"`
	// Description of this resource
	Description *string `pulumi:"description"`
	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `pulumi:"displayName"`
	// Number of consecutive checks that must fail before marking it down
	FallCount *int `pulumi:"fallCount"`
	// The frequency at which the system issues the monitor check (in seconds)
	Interval *int `pulumi:"interval"`
	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
	// supported
	MonitorPort *string `pulumi:"monitorPort"`
	// Number of consecutive checks that must pass before marking it up
	RiseCount *int `pulumi:"riseCount"`
	// Set of opaque identifiers meaningful to the user
	Tags []LBICMPMonitorTag `pulumi:"tags"`
	// Number of seconds the target has to respond to the monitor request
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a LBICMPMonitor resource.
type LBICMPMonitorArgs struct {
	// The data size (in bytes) of the ICMP healthcheck packet
	DataLength pulumi.IntPtrInput
	// Description of this resource
	Description pulumi.StringPtrInput
	// The display name of this resource. Defaults to ID if not set
	DisplayName pulumi.StringPtrInput
	// Number of consecutive checks that must fail before marking it down
	FallCount pulumi.IntPtrInput
	// The frequency at which the system issues the monitor check (in seconds)
	Interval pulumi.IntPtrInput
	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
	// supported
	MonitorPort pulumi.StringPtrInput
	// Number of consecutive checks that must pass before marking it up
	RiseCount pulumi.IntPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags LBICMPMonitorTagArrayInput
	// Number of seconds the target has to respond to the monitor request
	Timeout pulumi.IntPtrInput
}

func (LBICMPMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lbicmpmonitorArgs)(nil)).Elem()
}
