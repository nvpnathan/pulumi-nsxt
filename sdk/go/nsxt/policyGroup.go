// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nsxt

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PolicyGroup struct {
	pulumi.CustomResourceState

	// A conjunction applied to 2 sets of criteria.
	Conjunctions PolicyGroupConjunctionArrayOutput `pulumi:"conjunctions"`
	// Criteria to determine Group membership
	Criterias PolicyGroupCriteriaArrayOutput `pulumi:"criterias"`
	// Description for this resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display name for this resource
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The domain name to use for resources. If not specified 'default' is used
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
	ExtendedCriteria PolicyGroupExtendedCriteriaPtrOutput `pulumi:"extendedCriteria"`
	// NSX ID for this resource
	NsxId pulumi.StringOutput `pulumi:"nsxId"`
	// Policy path for this resource
	Path pulumi.StringOutput `pulumi:"path"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntOutput `pulumi:"revision"`
	// Set of opaque identifiers meaningful to the user
	Tags PolicyGroupTagArrayOutput `pulumi:"tags"`
}

// NewPolicyGroup registers a new resource with the given unique name, arguments, and options.
func NewPolicyGroup(ctx *pulumi.Context,
	name string, args *PolicyGroupArgs, opts ...pulumi.ResourceOption) (*PolicyGroup, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil {
		args = &PolicyGroupArgs{}
	}
	var resource PolicyGroup
	err := ctx.RegisterResource("nsxt:index/policyGroup:PolicyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyGroup gets an existing PolicyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyGroupState, opts ...pulumi.ResourceOption) (*PolicyGroup, error) {
	var resource PolicyGroup
	err := ctx.ReadResource("nsxt:index/policyGroup:PolicyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyGroup resources.
type policyGroupState struct {
	// A conjunction applied to 2 sets of criteria.
	Conjunctions []PolicyGroupConjunction `pulumi:"conjunctions"`
	// Criteria to determine Group membership
	Criterias []PolicyGroupCriteria `pulumi:"criterias"`
	// Description for this resource
	Description *string `pulumi:"description"`
	// Display name for this resource
	DisplayName *string `pulumi:"displayName"`
	// The domain name to use for resources. If not specified 'default' is used
	Domain *string `pulumi:"domain"`
	// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
	ExtendedCriteria *PolicyGroupExtendedCriteria `pulumi:"extendedCriteria"`
	// NSX ID for this resource
	NsxId *string `pulumi:"nsxId"`
	// Policy path for this resource
	Path *string `pulumi:"path"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *int `pulumi:"revision"`
	// Set of opaque identifiers meaningful to the user
	Tags []PolicyGroupTag `pulumi:"tags"`
}

type PolicyGroupState struct {
	// A conjunction applied to 2 sets of criteria.
	Conjunctions PolicyGroupConjunctionArrayInput
	// Criteria to determine Group membership
	Criterias PolicyGroupCriteriaArrayInput
	// Description for this resource
	Description pulumi.StringPtrInput
	// Display name for this resource
	DisplayName pulumi.StringPtrInput
	// The domain name to use for resources. If not specified 'default' is used
	Domain pulumi.StringPtrInput
	// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
	ExtendedCriteria PolicyGroupExtendedCriteriaPtrInput
	// NSX ID for this resource
	NsxId pulumi.StringPtrInput
	// Policy path for this resource
	Path pulumi.StringPtrInput
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags PolicyGroupTagArrayInput
}

func (PolicyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGroupState)(nil)).Elem()
}

type policyGroupArgs struct {
	// A conjunction applied to 2 sets of criteria.
	Conjunctions []PolicyGroupConjunction `pulumi:"conjunctions"`
	// Criteria to determine Group membership
	Criterias []PolicyGroupCriteria `pulumi:"criterias"`
	// Description for this resource
	Description *string `pulumi:"description"`
	// Display name for this resource
	DisplayName string `pulumi:"displayName"`
	// The domain name to use for resources. If not specified 'default' is used
	Domain *string `pulumi:"domain"`
	// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
	ExtendedCriteria *PolicyGroupExtendedCriteria `pulumi:"extendedCriteria"`
	// NSX ID for this resource
	NsxId *string `pulumi:"nsxId"`
	// Set of opaque identifiers meaningful to the user
	Tags []PolicyGroupTag `pulumi:"tags"`
}

// The set of arguments for constructing a PolicyGroup resource.
type PolicyGroupArgs struct {
	// A conjunction applied to 2 sets of criteria.
	Conjunctions PolicyGroupConjunctionArrayInput
	// Criteria to determine Group membership
	Criterias PolicyGroupCriteriaArrayInput
	// Description for this resource
	Description pulumi.StringPtrInput
	// Display name for this resource
	DisplayName pulumi.StringInput
	// The domain name to use for resources. If not specified 'default' is used
	Domain pulumi.StringPtrInput
	// Extended criteria to determine group membership. extended_criteria is implicitly "AND" with criteria
	ExtendedCriteria PolicyGroupExtendedCriteriaPtrInput
	// NSX ID for this resource
	NsxId pulumi.StringPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags PolicyGroupTagArrayInput
}

func (PolicyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGroupArgs)(nil)).Elem()
}
