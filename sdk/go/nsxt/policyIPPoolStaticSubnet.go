// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nsxt

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PolicyIPPoolStaticSubnet struct {
	pulumi.CustomResourceState

	// A collection of IPv4 or IPv6 IP ranges
	AllocationRanges PolicyIPPoolStaticSubnetAllocationRangeArrayOutput `pulumi:"allocationRanges"`
	// Network address and prefix length
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// Description for this resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display name for this resource
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The collection of up to 3 DNS servers for the subnet
	DnsNameservers pulumi.StringArrayOutput `pulumi:"dnsNameservers"`
	// DNS suffix for the nameserver
	DnsSuffix pulumi.StringPtrOutput `pulumi:"dnsSuffix"`
	// The default gateway address
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// NSX ID for this resource
	NsxId pulumi.StringOutput `pulumi:"nsxId"`
	// Policy path for this resource
	Path pulumi.StringOutput `pulumi:"path"`
	// Policy path to the IP Pool for this Subnet
	PoolPath pulumi.StringOutput `pulumi:"poolPath"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntOutput `pulumi:"revision"`
	// Set of opaque identifiers meaningful to the user
	Tags PolicyIPPoolStaticSubnetTagArrayOutput `pulumi:"tags"`
}

// NewPolicyIPPoolStaticSubnet registers a new resource with the given unique name, arguments, and options.
func NewPolicyIPPoolStaticSubnet(ctx *pulumi.Context,
	name string, args *PolicyIPPoolStaticSubnetArgs, opts ...pulumi.ResourceOption) (*PolicyIPPoolStaticSubnet, error) {
	if args == nil || args.AllocationRanges == nil {
		return nil, errors.New("missing required argument 'AllocationRanges'")
	}
	if args == nil || args.Cidr == nil {
		return nil, errors.New("missing required argument 'Cidr'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.PoolPath == nil {
		return nil, errors.New("missing required argument 'PoolPath'")
	}
	if args == nil {
		args = &PolicyIPPoolStaticSubnetArgs{}
	}
	var resource PolicyIPPoolStaticSubnet
	err := ctx.RegisterResource("nsxt:index/policyIPPoolStaticSubnet:PolicyIPPoolStaticSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyIPPoolStaticSubnet gets an existing PolicyIPPoolStaticSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyIPPoolStaticSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyIPPoolStaticSubnetState, opts ...pulumi.ResourceOption) (*PolicyIPPoolStaticSubnet, error) {
	var resource PolicyIPPoolStaticSubnet
	err := ctx.ReadResource("nsxt:index/policyIPPoolStaticSubnet:PolicyIPPoolStaticSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyIPPoolStaticSubnet resources.
type policyIPPoolStaticSubnetState struct {
	// A collection of IPv4 or IPv6 IP ranges
	AllocationRanges []PolicyIPPoolStaticSubnetAllocationRange `pulumi:"allocationRanges"`
	// Network address and prefix length
	Cidr *string `pulumi:"cidr"`
	// Description for this resource
	Description *string `pulumi:"description"`
	// Display name for this resource
	DisplayName *string `pulumi:"displayName"`
	// The collection of up to 3 DNS servers for the subnet
	DnsNameservers []string `pulumi:"dnsNameservers"`
	// DNS suffix for the nameserver
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The default gateway address
	Gateway *string `pulumi:"gateway"`
	// NSX ID for this resource
	NsxId *string `pulumi:"nsxId"`
	// Policy path for this resource
	Path *string `pulumi:"path"`
	// Policy path to the IP Pool for this Subnet
	PoolPath *string `pulumi:"poolPath"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *int `pulumi:"revision"`
	// Set of opaque identifiers meaningful to the user
	Tags []PolicyIPPoolStaticSubnetTag `pulumi:"tags"`
}

type PolicyIPPoolStaticSubnetState struct {
	// A collection of IPv4 or IPv6 IP ranges
	AllocationRanges PolicyIPPoolStaticSubnetAllocationRangeArrayInput
	// Network address and prefix length
	Cidr pulumi.StringPtrInput
	// Description for this resource
	Description pulumi.StringPtrInput
	// Display name for this resource
	DisplayName pulumi.StringPtrInput
	// The collection of up to 3 DNS servers for the subnet
	DnsNameservers pulumi.StringArrayInput
	// DNS suffix for the nameserver
	DnsSuffix pulumi.StringPtrInput
	// The default gateway address
	Gateway pulumi.StringPtrInput
	// NSX ID for this resource
	NsxId pulumi.StringPtrInput
	// Policy path for this resource
	Path pulumi.StringPtrInput
	// Policy path to the IP Pool for this Subnet
	PoolPath pulumi.StringPtrInput
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags PolicyIPPoolStaticSubnetTagArrayInput
}

func (PolicyIPPoolStaticSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyIPPoolStaticSubnetState)(nil)).Elem()
}

type policyIPPoolStaticSubnetArgs struct {
	// A collection of IPv4 or IPv6 IP ranges
	AllocationRanges []PolicyIPPoolStaticSubnetAllocationRange `pulumi:"allocationRanges"`
	// Network address and prefix length
	Cidr string `pulumi:"cidr"`
	// Description for this resource
	Description *string `pulumi:"description"`
	// Display name for this resource
	DisplayName string `pulumi:"displayName"`
	// The collection of up to 3 DNS servers for the subnet
	DnsNameservers []string `pulumi:"dnsNameservers"`
	// DNS suffix for the nameserver
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// The default gateway address
	Gateway *string `pulumi:"gateway"`
	// NSX ID for this resource
	NsxId *string `pulumi:"nsxId"`
	// Policy path to the IP Pool for this Subnet
	PoolPath string `pulumi:"poolPath"`
	// Set of opaque identifiers meaningful to the user
	Tags []PolicyIPPoolStaticSubnetTag `pulumi:"tags"`
}

// The set of arguments for constructing a PolicyIPPoolStaticSubnet resource.
type PolicyIPPoolStaticSubnetArgs struct {
	// A collection of IPv4 or IPv6 IP ranges
	AllocationRanges PolicyIPPoolStaticSubnetAllocationRangeArrayInput
	// Network address and prefix length
	Cidr pulumi.StringInput
	// Description for this resource
	Description pulumi.StringPtrInput
	// Display name for this resource
	DisplayName pulumi.StringInput
	// The collection of up to 3 DNS servers for the subnet
	DnsNameservers pulumi.StringArrayInput
	// DNS suffix for the nameserver
	DnsSuffix pulumi.StringPtrInput
	// The default gateway address
	Gateway pulumi.StringPtrInput
	// NSX ID for this resource
	NsxId pulumi.StringPtrInput
	// Policy path to the IP Pool for this Subnet
	PoolPath pulumi.StringInput
	// Set of opaque identifiers meaningful to the user
	Tags PolicyIPPoolStaticSubnetTagArrayInput
}

func (PolicyIPPoolStaticSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyIPPoolStaticSubnetArgs)(nil)).Elem()
}
