// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package nsxt

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type PolicyLBVirtualServer struct {
	pulumi.CustomResourceState

	// IP access list control for filtering the connections from clients
	AccessListControl PolicyLBVirtualServerAccessListControlPtrOutput `pulumi:"accessListControl"`
	// If enabled, all connections/requests sent to virtual server are logged to the access log file
	AccessLogEnabled pulumi.BoolPtrOutput `pulumi:"accessLogEnabled"`
	// Application profile for this virtual server
	ApplicationProfilePath pulumi.StringOutput `pulumi:"applicationProfilePath"`
	// This setting is used when load balancer terminates client SSL connection
	ClientSsl PolicyLBVirtualServerClientSslPtrOutput `pulumi:"clientSsl"`
	// Default pool member ports when member port is not defined
	DefaultPoolMemberPorts pulumi.StringArrayOutput `pulumi:"defaultPoolMemberPorts"`
	// Description for this resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Display name for this resource
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Flag to enable Virtual Server
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Virtual Server IP address
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Flag to log significant events in access log, if access log is enabed
	LogSignificantEventOnly pulumi.BoolPtrOutput `pulumi:"logSignificantEventOnly"`
	// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
	MaxConcurrentConnections pulumi.IntPtrOutput `pulumi:"maxConcurrentConnections"`
	// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
	MaxNewConnectionRate pulumi.IntPtrOutput `pulumi:"maxNewConnectionRate"`
	// NSX ID for this resource
	NsxId pulumi.StringOutput `pulumi:"nsxId"`
	// Policy path for this resource
	Path pulumi.StringOutput `pulumi:"path"`
	// Path to persistence profile allowing related client connections to be sent to the same backend server.
	PersistenceProfilePath pulumi.StringPtrOutput `pulumi:"persistenceProfilePath"`
	// Path for Load Balancer Pool
	PoolPath pulumi.StringPtrOutput `pulumi:"poolPath"`
	// Virtual Server ports
	Ports pulumi.StringArrayOutput `pulumi:"ports"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntOutput `pulumi:"revision"`
	// This setting is used when load balancer establishes connection to the backend server
	ServerSsl PolicyLBVirtualServerServerSslPtrOutput `pulumi:"serverSsl"`
	// Virtual Server can be associated with Load Balancer Service
	ServicePath pulumi.StringPtrOutput `pulumi:"servicePath"`
	// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
	SorryPoolPath pulumi.StringPtrOutput `pulumi:"sorryPoolPath"`
	// Set of opaque identifiers meaningful to the user
	Tags PolicyLBVirtualServerTagArrayOutput `pulumi:"tags"`
}

// NewPolicyLBVirtualServer registers a new resource with the given unique name, arguments, and options.
func NewPolicyLBVirtualServer(ctx *pulumi.Context,
	name string, args *PolicyLBVirtualServerArgs, opts ...pulumi.ResourceOption) (*PolicyLBVirtualServer, error) {
	if args == nil || args.ApplicationProfilePath == nil {
		return nil, errors.New("missing required argument 'ApplicationProfilePath'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.IpAddress == nil {
		return nil, errors.New("missing required argument 'IpAddress'")
	}
	if args == nil || args.Ports == nil {
		return nil, errors.New("missing required argument 'Ports'")
	}
	if args == nil {
		args = &PolicyLBVirtualServerArgs{}
	}
	var resource PolicyLBVirtualServer
	err := ctx.RegisterResource("nsxt:index/policyLBVirtualServer:PolicyLBVirtualServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyLBVirtualServer gets an existing PolicyLBVirtualServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyLBVirtualServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyLBVirtualServerState, opts ...pulumi.ResourceOption) (*PolicyLBVirtualServer, error) {
	var resource PolicyLBVirtualServer
	err := ctx.ReadResource("nsxt:index/policyLBVirtualServer:PolicyLBVirtualServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyLBVirtualServer resources.
type policyLBVirtualServerState struct {
	// IP access list control for filtering the connections from clients
	AccessListControl *PolicyLBVirtualServerAccessListControl `pulumi:"accessListControl"`
	// If enabled, all connections/requests sent to virtual server are logged to the access log file
	AccessLogEnabled *bool `pulumi:"accessLogEnabled"`
	// Application profile for this virtual server
	ApplicationProfilePath *string `pulumi:"applicationProfilePath"`
	// This setting is used when load balancer terminates client SSL connection
	ClientSsl *PolicyLBVirtualServerClientSsl `pulumi:"clientSsl"`
	// Default pool member ports when member port is not defined
	DefaultPoolMemberPorts []string `pulumi:"defaultPoolMemberPorts"`
	// Description for this resource
	Description *string `pulumi:"description"`
	// Display name for this resource
	DisplayName *string `pulumi:"displayName"`
	// Flag to enable Virtual Server
	Enabled *bool `pulumi:"enabled"`
	// Virtual Server IP address
	IpAddress *string `pulumi:"ipAddress"`
	// Flag to log significant events in access log, if access log is enabed
	LogSignificantEventOnly *bool `pulumi:"logSignificantEventOnly"`
	// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
	MaxNewConnectionRate *int `pulumi:"maxNewConnectionRate"`
	// NSX ID for this resource
	NsxId *string `pulumi:"nsxId"`
	// Policy path for this resource
	Path *string `pulumi:"path"`
	// Path to persistence profile allowing related client connections to be sent to the same backend server.
	PersistenceProfilePath *string `pulumi:"persistenceProfilePath"`
	// Path for Load Balancer Pool
	PoolPath *string `pulumi:"poolPath"`
	// Virtual Server ports
	Ports []string `pulumi:"ports"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *int `pulumi:"revision"`
	// This setting is used when load balancer establishes connection to the backend server
	ServerSsl *PolicyLBVirtualServerServerSsl `pulumi:"serverSsl"`
	// Virtual Server can be associated with Load Balancer Service
	ServicePath *string `pulumi:"servicePath"`
	// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
	SorryPoolPath *string `pulumi:"sorryPoolPath"`
	// Set of opaque identifiers meaningful to the user
	Tags []PolicyLBVirtualServerTag `pulumi:"tags"`
}

type PolicyLBVirtualServerState struct {
	// IP access list control for filtering the connections from clients
	AccessListControl PolicyLBVirtualServerAccessListControlPtrInput
	// If enabled, all connections/requests sent to virtual server are logged to the access log file
	AccessLogEnabled pulumi.BoolPtrInput
	// Application profile for this virtual server
	ApplicationProfilePath pulumi.StringPtrInput
	// This setting is used when load balancer terminates client SSL connection
	ClientSsl PolicyLBVirtualServerClientSslPtrInput
	// Default pool member ports when member port is not defined
	DefaultPoolMemberPorts pulumi.StringArrayInput
	// Description for this resource
	Description pulumi.StringPtrInput
	// Display name for this resource
	DisplayName pulumi.StringPtrInput
	// Flag to enable Virtual Server
	Enabled pulumi.BoolPtrInput
	// Virtual Server IP address
	IpAddress pulumi.StringPtrInput
	// Flag to log significant events in access log, if access log is enabed
	LogSignificantEventOnly pulumi.BoolPtrInput
	// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
	MaxConcurrentConnections pulumi.IntPtrInput
	// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
	MaxNewConnectionRate pulumi.IntPtrInput
	// NSX ID for this resource
	NsxId pulumi.StringPtrInput
	// Policy path for this resource
	Path pulumi.StringPtrInput
	// Path to persistence profile allowing related client connections to be sent to the same backend server.
	PersistenceProfilePath pulumi.StringPtrInput
	// Path for Load Balancer Pool
	PoolPath pulumi.StringPtrInput
	// Virtual Server ports
	Ports pulumi.StringArrayInput
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
	// changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
	// operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision pulumi.IntPtrInput
	// This setting is used when load balancer establishes connection to the backend server
	ServerSsl PolicyLBVirtualServerServerSslPtrInput
	// Virtual Server can be associated with Load Balancer Service
	ServicePath pulumi.StringPtrInput
	// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
	SorryPoolPath pulumi.StringPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags PolicyLBVirtualServerTagArrayInput
}

func (PolicyLBVirtualServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyLBVirtualServerState)(nil)).Elem()
}

type policyLBVirtualServerArgs struct {
	// IP access list control for filtering the connections from clients
	AccessListControl *PolicyLBVirtualServerAccessListControl `pulumi:"accessListControl"`
	// If enabled, all connections/requests sent to virtual server are logged to the access log file
	AccessLogEnabled *bool `pulumi:"accessLogEnabled"`
	// Application profile for this virtual server
	ApplicationProfilePath string `pulumi:"applicationProfilePath"`
	// This setting is used when load balancer terminates client SSL connection
	ClientSsl *PolicyLBVirtualServerClientSsl `pulumi:"clientSsl"`
	// Default pool member ports when member port is not defined
	DefaultPoolMemberPorts []string `pulumi:"defaultPoolMemberPorts"`
	// Description for this resource
	Description *string `pulumi:"description"`
	// Display name for this resource
	DisplayName string `pulumi:"displayName"`
	// Flag to enable Virtual Server
	Enabled *bool `pulumi:"enabled"`
	// Virtual Server IP address
	IpAddress string `pulumi:"ipAddress"`
	// Flag to log significant events in access log, if access log is enabed
	LogSignificantEventOnly *bool `pulumi:"logSignificantEventOnly"`
	// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
	MaxConcurrentConnections *int `pulumi:"maxConcurrentConnections"`
	// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
	MaxNewConnectionRate *int `pulumi:"maxNewConnectionRate"`
	// NSX ID for this resource
	NsxId *string `pulumi:"nsxId"`
	// Path to persistence profile allowing related client connections to be sent to the same backend server.
	PersistenceProfilePath *string `pulumi:"persistenceProfilePath"`
	// Path for Load Balancer Pool
	PoolPath *string `pulumi:"poolPath"`
	// Virtual Server ports
	Ports []string `pulumi:"ports"`
	// This setting is used when load balancer establishes connection to the backend server
	ServerSsl *PolicyLBVirtualServerServerSsl `pulumi:"serverSsl"`
	// Virtual Server can be associated with Load Balancer Service
	ServicePath *string `pulumi:"servicePath"`
	// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
	SorryPoolPath *string `pulumi:"sorryPoolPath"`
	// Set of opaque identifiers meaningful to the user
	Tags []PolicyLBVirtualServerTag `pulumi:"tags"`
}

// The set of arguments for constructing a PolicyLBVirtualServer resource.
type PolicyLBVirtualServerArgs struct {
	// IP access list control for filtering the connections from clients
	AccessListControl PolicyLBVirtualServerAccessListControlPtrInput
	// If enabled, all connections/requests sent to virtual server are logged to the access log file
	AccessLogEnabled pulumi.BoolPtrInput
	// Application profile for this virtual server
	ApplicationProfilePath pulumi.StringInput
	// This setting is used when load balancer terminates client SSL connection
	ClientSsl PolicyLBVirtualServerClientSslPtrInput
	// Default pool member ports when member port is not defined
	DefaultPoolMemberPorts pulumi.StringArrayInput
	// Description for this resource
	Description pulumi.StringPtrInput
	// Display name for this resource
	DisplayName pulumi.StringInput
	// Flag to enable Virtual Server
	Enabled pulumi.BoolPtrInput
	// Virtual Server IP address
	IpAddress pulumi.StringInput
	// Flag to log significant events in access log, if access log is enabed
	LogSignificantEventOnly pulumi.BoolPtrInput
	// To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
	MaxConcurrentConnections pulumi.IntPtrInput
	// To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
	MaxNewConnectionRate pulumi.IntPtrInput
	// NSX ID for this resource
	NsxId pulumi.StringPtrInput
	// Path to persistence profile allowing related client connections to be sent to the same backend server.
	PersistenceProfilePath pulumi.StringPtrInput
	// Path for Load Balancer Pool
	PoolPath pulumi.StringPtrInput
	// Virtual Server ports
	Ports pulumi.StringArrayInput
	// This setting is used when load balancer establishes connection to the backend server
	ServerSsl PolicyLBVirtualServerServerSslPtrInput
	// Virtual Server can be associated with Load Balancer Service
	ServicePath pulumi.StringPtrInput
	// When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
	SorryPoolPath pulumi.StringPtrInput
	// Set of opaque identifiers meaningful to the user
	Tags PolicyLBVirtualServerTagArrayInput
}

func (PolicyLBVirtualServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyLBVirtualServerArgs)(nil)).Elem()
}
