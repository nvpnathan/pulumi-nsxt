// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LBHTTPForwardingRule extends pulumi.CustomResource {
    /**
     * Get an existing LBHTTPForwardingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBHTTPForwardingRuleState, opts?: pulumi.CustomResourceOptions): LBHTTPForwardingRule {
        return new LBHTTPForwardingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lBHTTPForwardingRule:LBHTTPForwardingRule';

    /**
     * Returns true if the given object is an instance of LBHTTPForwardingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBHTTPForwardingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBHTTPForwardingRule.__pulumiType;
    }

    /**
     * Rule condition based on http request body
     */
    public readonly bodyConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleBodyCondition[] | undefined>;
    /**
     * Rule condition based on http header
     */
    public readonly cookieConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleCookieCondition[] | undefined>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Rule condition based on http header
     */
    public readonly headerConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleHeaderCondition[] | undefined>;
    /**
     * Redirect the request with a defined status and url
     */
    public readonly httpRedirectAction!: pulumi.Output<outputs.LBHTTPForwardingRuleHttpRedirectAction | undefined>;
    /**
     * Reject the request with a defined status and message
     */
    public readonly httpRejectAction!: pulumi.Output<outputs.LBHTTPForwardingRuleHttpRejectAction | undefined>;
    /**
     * Rule condition based on IP settings of the message
     */
    public readonly ipConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleIpCondition[] | undefined>;
    /**
     * Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
     */
    public readonly matchStrategy!: pulumi.Output<string | undefined>;
    /**
     * Rule condition based on http request method
     */
    public readonly methodConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleMethodCondition[] | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Forward the request to the a defined pool
     */
    public readonly selectPoolAction!: pulumi.Output<outputs.LBHTTPForwardingRuleSelectPoolAction | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LBHTTPForwardingRuleTag[] | undefined>;
    /**
     * Rule condition based on TCP settings of the message
     */
    public readonly tcpConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleTcpCondition[] | undefined>;
    /**
     * Rule condition based on http request URI
     */
    public readonly uriConditions!: pulumi.Output<outputs.LBHTTPForwardingRuleUriCondition[] | undefined>;
    /**
     * Rule condition based on http request version
     */
    public readonly versionCondition!: pulumi.Output<outputs.LBHTTPForwardingRuleVersionCondition | undefined>;

    /**
     * Create a LBHTTPForwardingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LBHTTPForwardingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBHTTPForwardingRuleArgs | LBHTTPForwardingRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LBHTTPForwardingRuleState | undefined;
            inputs["bodyConditions"] = state ? state.bodyConditions : undefined;
            inputs["cookieConditions"] = state ? state.cookieConditions : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["headerConditions"] = state ? state.headerConditions : undefined;
            inputs["httpRedirectAction"] = state ? state.httpRedirectAction : undefined;
            inputs["httpRejectAction"] = state ? state.httpRejectAction : undefined;
            inputs["ipConditions"] = state ? state.ipConditions : undefined;
            inputs["matchStrategy"] = state ? state.matchStrategy : undefined;
            inputs["methodConditions"] = state ? state.methodConditions : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["selectPoolAction"] = state ? state.selectPoolAction : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tcpConditions"] = state ? state.tcpConditions : undefined;
            inputs["uriConditions"] = state ? state.uriConditions : undefined;
            inputs["versionCondition"] = state ? state.versionCondition : undefined;
        } else {
            const args = argsOrState as LBHTTPForwardingRuleArgs | undefined;
            inputs["bodyConditions"] = args ? args.bodyConditions : undefined;
            inputs["cookieConditions"] = args ? args.cookieConditions : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["headerConditions"] = args ? args.headerConditions : undefined;
            inputs["httpRedirectAction"] = args ? args.httpRedirectAction : undefined;
            inputs["httpRejectAction"] = args ? args.httpRejectAction : undefined;
            inputs["ipConditions"] = args ? args.ipConditions : undefined;
            inputs["matchStrategy"] = args ? args.matchStrategy : undefined;
            inputs["methodConditions"] = args ? args.methodConditions : undefined;
            inputs["selectPoolAction"] = args ? args.selectPoolAction : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tcpConditions"] = args ? args.tcpConditions : undefined;
            inputs["uriConditions"] = args ? args.uriConditions : undefined;
            inputs["versionCondition"] = args ? args.versionCondition : undefined;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LBHTTPForwardingRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBHTTPForwardingRule resources.
 */
export interface LBHTTPForwardingRuleState {
    /**
     * Rule condition based on http request body
     */
    readonly bodyConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleBodyCondition>[]>;
    /**
     * Rule condition based on http header
     */
    readonly cookieConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleCookieCondition>[]>;
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Rule condition based on http header
     */
    readonly headerConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleHeaderCondition>[]>;
    /**
     * Redirect the request with a defined status and url
     */
    readonly httpRedirectAction?: pulumi.Input<inputs.LBHTTPForwardingRuleHttpRedirectAction>;
    /**
     * Reject the request with a defined status and message
     */
    readonly httpRejectAction?: pulumi.Input<inputs.LBHTTPForwardingRuleHttpRejectAction>;
    /**
     * Rule condition based on IP settings of the message
     */
    readonly ipConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleIpCondition>[]>;
    /**
     * Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
     */
    readonly matchStrategy?: pulumi.Input<string>;
    /**
     * Rule condition based on http request method
     */
    readonly methodConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleMethodCondition>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Forward the request to the a defined pool
     */
    readonly selectPoolAction?: pulumi.Input<inputs.LBHTTPForwardingRuleSelectPoolAction>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleTag>[]>;
    /**
     * Rule condition based on TCP settings of the message
     */
    readonly tcpConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleTcpCondition>[]>;
    /**
     * Rule condition based on http request URI
     */
    readonly uriConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleUriCondition>[]>;
    /**
     * Rule condition based on http request version
     */
    readonly versionCondition?: pulumi.Input<inputs.LBHTTPForwardingRuleVersionCondition>;
}

/**
 * The set of arguments for constructing a LBHTTPForwardingRule resource.
 */
export interface LBHTTPForwardingRuleArgs {
    /**
     * Rule condition based on http request body
     */
    readonly bodyConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleBodyCondition>[]>;
    /**
     * Rule condition based on http header
     */
    readonly cookieConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleCookieCondition>[]>;
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Rule condition based on http header
     */
    readonly headerConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleHeaderCondition>[]>;
    /**
     * Redirect the request with a defined status and url
     */
    readonly httpRedirectAction?: pulumi.Input<inputs.LBHTTPForwardingRuleHttpRedirectAction>;
    /**
     * Reject the request with a defined status and message
     */
    readonly httpRejectAction?: pulumi.Input<inputs.LBHTTPForwardingRuleHttpRejectAction>;
    /**
     * Rule condition based on IP settings of the message
     */
    readonly ipConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleIpCondition>[]>;
    /**
     * Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
     */
    readonly matchStrategy?: pulumi.Input<string>;
    /**
     * Rule condition based on http request method
     */
    readonly methodConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleMethodCondition>[]>;
    /**
     * Forward the request to the a defined pool
     */
    readonly selectPoolAction?: pulumi.Input<inputs.LBHTTPForwardingRuleSelectPoolAction>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleTag>[]>;
    /**
     * Rule condition based on TCP settings of the message
     */
    readonly tcpConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleTcpCondition>[]>;
    /**
     * Rule condition based on http request URI
     */
    readonly uriConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPForwardingRuleUriCondition>[]>;
    /**
     * Rule condition based on http request version
     */
    readonly versionCondition?: pulumi.Input<inputs.LBHTTPForwardingRuleVersionCondition>;
}
