// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LBHTTPMonitor extends pulumi.CustomResource {
    /**
     * Get an existing LBHTTPMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBHTTPMonitorState, opts?: pulumi.CustomResourceOptions): LBHTTPMonitor {
        return new LBHTTPMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lBHTTPMonitor:LBHTTPMonitor';

    /**
     * Returns true if the given object is an instance of LBHTTPMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBHTTPMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBHTTPMonitor.__pulumiType;
    }

    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    public readonly fallCount!: pulumi.Output<number | undefined>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    public readonly monitorPort!: pulumi.Output<string | undefined>;
    /**
     * String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
     */
    public readonly requestBody!: pulumi.Output<string | undefined>;
    /**
     * Array of HTTP request headers
     */
    public readonly requestHeaders!: pulumi.Output<outputs.LBHTTPMonitorRequestHeader[] | undefined>;
    /**
     * Health check method for HTTP monitor type
     */
    public readonly requestMethod!: pulumi.Output<string | undefined>;
    /**
     * URL used for HTTP monitor
     */
    public readonly requestUrl!: pulumi.Output<string | undefined>;
    /**
     * HTTP request version
     */
    public readonly requestVersion!: pulumi.Output<string | undefined>;
    /**
     * If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
     * supported), and succeeds only if there is a match
     */
    public readonly responseBody!: pulumi.Output<string | undefined>;
    /**
     * The HTTP response status code should be a valid HTTP status code
     */
    public readonly responseStatusCodes!: pulumi.Output<number[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    public readonly riseCount!: pulumi.Output<number | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LBHTTPMonitorTag[] | undefined>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a LBHTTPMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LBHTTPMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBHTTPMonitorArgs | LBHTTPMonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LBHTTPMonitorState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["fallCount"] = state ? state.fallCount : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["monitorPort"] = state ? state.monitorPort : undefined;
            inputs["requestBody"] = state ? state.requestBody : undefined;
            inputs["requestHeaders"] = state ? state.requestHeaders : undefined;
            inputs["requestMethod"] = state ? state.requestMethod : undefined;
            inputs["requestUrl"] = state ? state.requestUrl : undefined;
            inputs["requestVersion"] = state ? state.requestVersion : undefined;
            inputs["responseBody"] = state ? state.responseBody : undefined;
            inputs["responseStatusCodes"] = state ? state.responseStatusCodes : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["riseCount"] = state ? state.riseCount : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as LBHTTPMonitorArgs | undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["fallCount"] = args ? args.fallCount : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["monitorPort"] = args ? args.monitorPort : undefined;
            inputs["requestBody"] = args ? args.requestBody : undefined;
            inputs["requestHeaders"] = args ? args.requestHeaders : undefined;
            inputs["requestMethod"] = args ? args.requestMethod : undefined;
            inputs["requestUrl"] = args ? args.requestUrl : undefined;
            inputs["requestVersion"] = args ? args.requestVersion : undefined;
            inputs["responseBody"] = args ? args.responseBody : undefined;
            inputs["responseStatusCodes"] = args ? args.responseStatusCodes : undefined;
            inputs["riseCount"] = args ? args.riseCount : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LBHTTPMonitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBHTTPMonitor resources.
 */
export interface LBHTTPMonitorState {
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    readonly fallCount?: pulumi.Input<number>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    readonly interval?: pulumi.Input<number>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    readonly monitorPort?: pulumi.Input<string>;
    /**
     * String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
     */
    readonly requestBody?: pulumi.Input<string>;
    /**
     * Array of HTTP request headers
     */
    readonly requestHeaders?: pulumi.Input<pulumi.Input<inputs.LBHTTPMonitorRequestHeader>[]>;
    /**
     * Health check method for HTTP monitor type
     */
    readonly requestMethod?: pulumi.Input<string>;
    /**
     * URL used for HTTP monitor
     */
    readonly requestUrl?: pulumi.Input<string>;
    /**
     * HTTP request version
     */
    readonly requestVersion?: pulumi.Input<string>;
    /**
     * If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
     * supported), and succeeds only if there is a match
     */
    readonly responseBody?: pulumi.Input<string>;
    /**
     * The HTTP response status code should be a valid HTTP status code
     */
    readonly responseStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    readonly riseCount?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPMonitorTag>[]>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    readonly timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LBHTTPMonitor resource.
 */
export interface LBHTTPMonitorArgs {
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    readonly fallCount?: pulumi.Input<number>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    readonly interval?: pulumi.Input<number>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    readonly monitorPort?: pulumi.Input<string>;
    /**
     * String to send as HTTP health check request body. Valid only for certain HTTP methods like POST
     */
    readonly requestBody?: pulumi.Input<string>;
    /**
     * Array of HTTP request headers
     */
    readonly requestHeaders?: pulumi.Input<pulumi.Input<inputs.LBHTTPMonitorRequestHeader>[]>;
    /**
     * Health check method for HTTP monitor type
     */
    readonly requestMethod?: pulumi.Input<string>;
    /**
     * URL used for HTTP monitor
     */
    readonly requestUrl?: pulumi.Input<string>;
    /**
     * HTTP request version
     */
    readonly requestVersion?: pulumi.Input<string>;
    /**
     * If HTTP specified, healthcheck HTTP response body is matched against the specified string (regular expressions not
     * supported), and succeeds only if there is a match
     */
    readonly responseBody?: pulumi.Input<string>;
    /**
     * The HTTP response status code should be a valid HTTP status code
     */
    readonly responseStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    readonly riseCount?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPMonitorTag>[]>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    readonly timeout?: pulumi.Input<number>;
}
