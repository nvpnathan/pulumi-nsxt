// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LBHTTPRequestRewriteRule extends pulumi.CustomResource {
    /**
     * Get an existing LBHTTPRequestRewriteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBHTTPRequestRewriteRuleState, opts?: pulumi.CustomResourceOptions): LBHTTPRequestRewriteRule {
        return new LBHTTPRequestRewriteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lBHTTPRequestRewriteRule:LBHTTPRequestRewriteRule';

    /**
     * Returns true if the given object is an instance of LBHTTPRequestRewriteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBHTTPRequestRewriteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBHTTPRequestRewriteRule.__pulumiType;
    }

    /**
     * Rule condition based on http request body
     */
    public readonly bodyConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleBodyCondition[] | undefined>;
    /**
     * Rule condition based on http header
     */
    public readonly cookieConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleCookieCondition[] | undefined>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Rule condition based on http header
     */
    public readonly headerConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleHeaderCondition[] | undefined>;
    /**
     * Header to replace original header in outgoing message
     */
    public readonly headerRewriteAction!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleHeaderRewriteAction | undefined>;
    /**
     * Rule condition based on IP settings of the message
     */
    public readonly ipConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleIpCondition[] | undefined>;
    /**
     * Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
     */
    public readonly matchStrategy!: pulumi.Output<string | undefined>;
    /**
     * Rule condition based on http request method
     */
    public readonly methodConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleMethodCondition[] | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleTag[] | undefined>;
    /**
     * Rule condition based on TCP settings of the message
     */
    public readonly tcpConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleTcpCondition[] | undefined>;
    /**
     * Rule condition based on http request URI arguments (query string)
     */
    public readonly uriArgumentsConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleUriArgumentsCondition[] | undefined>;
    /**
     * Rule condition based on http request URI
     */
    public readonly uriConditions!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleUriCondition[] | undefined>;
    /**
     * Uri to replace original URI in outgoing request
     */
    public readonly uriRewriteAction!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleUriRewriteAction | undefined>;
    /**
     * Rule condition based on http request version
     */
    public readonly versionCondition!: pulumi.Output<outputs.LBHTTPRequestRewriteRuleVersionCondition | undefined>;

    /**
     * Create a LBHTTPRequestRewriteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LBHTTPRequestRewriteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBHTTPRequestRewriteRuleArgs | LBHTTPRequestRewriteRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LBHTTPRequestRewriteRuleState | undefined;
            inputs["bodyConditions"] = state ? state.bodyConditions : undefined;
            inputs["cookieConditions"] = state ? state.cookieConditions : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["headerConditions"] = state ? state.headerConditions : undefined;
            inputs["headerRewriteAction"] = state ? state.headerRewriteAction : undefined;
            inputs["ipConditions"] = state ? state.ipConditions : undefined;
            inputs["matchStrategy"] = state ? state.matchStrategy : undefined;
            inputs["methodConditions"] = state ? state.methodConditions : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tcpConditions"] = state ? state.tcpConditions : undefined;
            inputs["uriArgumentsConditions"] = state ? state.uriArgumentsConditions : undefined;
            inputs["uriConditions"] = state ? state.uriConditions : undefined;
            inputs["uriRewriteAction"] = state ? state.uriRewriteAction : undefined;
            inputs["versionCondition"] = state ? state.versionCondition : undefined;
        } else {
            const args = argsOrState as LBHTTPRequestRewriteRuleArgs | undefined;
            inputs["bodyConditions"] = args ? args.bodyConditions : undefined;
            inputs["cookieConditions"] = args ? args.cookieConditions : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["headerConditions"] = args ? args.headerConditions : undefined;
            inputs["headerRewriteAction"] = args ? args.headerRewriteAction : undefined;
            inputs["ipConditions"] = args ? args.ipConditions : undefined;
            inputs["matchStrategy"] = args ? args.matchStrategy : undefined;
            inputs["methodConditions"] = args ? args.methodConditions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tcpConditions"] = args ? args.tcpConditions : undefined;
            inputs["uriArgumentsConditions"] = args ? args.uriArgumentsConditions : undefined;
            inputs["uriConditions"] = args ? args.uriConditions : undefined;
            inputs["uriRewriteAction"] = args ? args.uriRewriteAction : undefined;
            inputs["versionCondition"] = args ? args.versionCondition : undefined;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LBHTTPRequestRewriteRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBHTTPRequestRewriteRule resources.
 */
export interface LBHTTPRequestRewriteRuleState {
    /**
     * Rule condition based on http request body
     */
    readonly bodyConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleBodyCondition>[]>;
    /**
     * Rule condition based on http header
     */
    readonly cookieConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleCookieCondition>[]>;
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Rule condition based on http header
     */
    readonly headerConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleHeaderCondition>[]>;
    /**
     * Header to replace original header in outgoing message
     */
    readonly headerRewriteAction?: pulumi.Input<inputs.LBHTTPRequestRewriteRuleHeaderRewriteAction>;
    /**
     * Rule condition based on IP settings of the message
     */
    readonly ipConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleIpCondition>[]>;
    /**
     * Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
     */
    readonly matchStrategy?: pulumi.Input<string>;
    /**
     * Rule condition based on http request method
     */
    readonly methodConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleMethodCondition>[]>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleTag>[]>;
    /**
     * Rule condition based on TCP settings of the message
     */
    readonly tcpConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleTcpCondition>[]>;
    /**
     * Rule condition based on http request URI arguments (query string)
     */
    readonly uriArgumentsConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleUriArgumentsCondition>[]>;
    /**
     * Rule condition based on http request URI
     */
    readonly uriConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleUriCondition>[]>;
    /**
     * Uri to replace original URI in outgoing request
     */
    readonly uriRewriteAction?: pulumi.Input<inputs.LBHTTPRequestRewriteRuleUriRewriteAction>;
    /**
     * Rule condition based on http request version
     */
    readonly versionCondition?: pulumi.Input<inputs.LBHTTPRequestRewriteRuleVersionCondition>;
}

/**
 * The set of arguments for constructing a LBHTTPRequestRewriteRule resource.
 */
export interface LBHTTPRequestRewriteRuleArgs {
    /**
     * Rule condition based on http request body
     */
    readonly bodyConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleBodyCondition>[]>;
    /**
     * Rule condition based on http header
     */
    readonly cookieConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleCookieCondition>[]>;
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Rule condition based on http header
     */
    readonly headerConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleHeaderCondition>[]>;
    /**
     * Header to replace original header in outgoing message
     */
    readonly headerRewriteAction?: pulumi.Input<inputs.LBHTTPRequestRewriteRuleHeaderRewriteAction>;
    /**
     * Rule condition based on IP settings of the message
     */
    readonly ipConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleIpCondition>[]>;
    /**
     * Strategy when multiple match conditions are specified in one rule (ANY vs ALL)
     */
    readonly matchStrategy?: pulumi.Input<string>;
    /**
     * Rule condition based on http request method
     */
    readonly methodConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleMethodCondition>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleTag>[]>;
    /**
     * Rule condition based on TCP settings of the message
     */
    readonly tcpConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleTcpCondition>[]>;
    /**
     * Rule condition based on http request URI arguments (query string)
     */
    readonly uriArgumentsConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleUriArgumentsCondition>[]>;
    /**
     * Rule condition based on http request URI
     */
    readonly uriConditions?: pulumi.Input<pulumi.Input<inputs.LBHTTPRequestRewriteRuleUriCondition>[]>;
    /**
     * Uri to replace original URI in outgoing request
     */
    readonly uriRewriteAction?: pulumi.Input<inputs.LBHTTPRequestRewriteRuleUriRewriteAction>;
    /**
     * Rule condition based on http request version
     */
    readonly versionCondition?: pulumi.Input<inputs.LBHTTPRequestRewriteRuleVersionCondition>;
}
