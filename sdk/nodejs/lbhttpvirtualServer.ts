// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LBHTTPVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing LBHTTPVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBHTTPVirtualServerState, opts?: pulumi.CustomResourceOptions): LBHTTPVirtualServer {
        return new LBHTTPVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lBHTTPVirtualServer:LBHTTPVirtualServer';

    /**
     * Returns true if the given object is an instance of LBHTTPVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBHTTPVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBHTTPVirtualServer.__pulumiType;
    }

    /**
     * Whether access log is enabled
     */
    public readonly accessLogEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The http application profile defines the application protocol characteristics
     */
    public readonly applicationProfileId!: pulumi.Output<string>;
    /**
     * Client SSL settings for Virtual Server
     */
    public readonly clientSsl!: pulumi.Output<outputs.LBHTTPVirtualServerClientSsl | undefined>;
    /**
     * Default pool member port
     */
    public readonly defaultPoolMemberPort!: pulumi.Output<string | undefined>;
    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Whether the virtual server is enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Virtual server IP address
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * If not specified, connections are unlimited
     */
    public readonly maxConcurrentConnections!: pulumi.Output<number | undefined>;
    /**
     * If not specified, connection rate is unlimited
     */
    public readonly maxNewConnectionRate!: pulumi.Output<number | undefined>;
    /**
     * Persistence profile is used to allow related client connections to be sent to the same backend server
     */
    public readonly persistenceProfileId!: pulumi.Output<string | undefined>;
    /**
     * Server pool for backend connections
     */
    public readonly poolId!: pulumi.Output<string | undefined>;
    /**
     * Virtual server port
     */
    public readonly port!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Customization of load balancing behavior using match/action rules
     */
    public readonly ruleIds!: pulumi.Output<string[] | undefined>;
    /**
     * Server SSL settings for Virtual Server
     */
    public readonly serverSsl!: pulumi.Output<outputs.LBHTTPVirtualServerServerSsl | undefined>;
    /**
     * When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request
     * would be served by sorry server pool
     */
    public readonly sorryPoolId!: pulumi.Output<string | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LBHTTPVirtualServerTag[] | undefined>;

    /**
     * Create a LBHTTPVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LBHTTPVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBHTTPVirtualServerArgs | LBHTTPVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LBHTTPVirtualServerState | undefined;
            inputs["accessLogEnabled"] = state ? state.accessLogEnabled : undefined;
            inputs["applicationProfileId"] = state ? state.applicationProfileId : undefined;
            inputs["clientSsl"] = state ? state.clientSsl : undefined;
            inputs["defaultPoolMemberPort"] = state ? state.defaultPoolMemberPort : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["maxConcurrentConnections"] = state ? state.maxConcurrentConnections : undefined;
            inputs["maxNewConnectionRate"] = state ? state.maxNewConnectionRate : undefined;
            inputs["persistenceProfileId"] = state ? state.persistenceProfileId : undefined;
            inputs["poolId"] = state ? state.poolId : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["ruleIds"] = state ? state.ruleIds : undefined;
            inputs["serverSsl"] = state ? state.serverSsl : undefined;
            inputs["sorryPoolId"] = state ? state.sorryPoolId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LBHTTPVirtualServerArgs | undefined;
            if (!args || args.applicationProfileId === undefined) {
                throw new Error("Missing required property 'applicationProfileId'");
            }
            if (!args || args.ipAddress === undefined) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if (!args || args.port === undefined) {
                throw new Error("Missing required property 'port'");
            }
            inputs["accessLogEnabled"] = args ? args.accessLogEnabled : undefined;
            inputs["applicationProfileId"] = args ? args.applicationProfileId : undefined;
            inputs["clientSsl"] = args ? args.clientSsl : undefined;
            inputs["defaultPoolMemberPort"] = args ? args.defaultPoolMemberPort : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["maxConcurrentConnections"] = args ? args.maxConcurrentConnections : undefined;
            inputs["maxNewConnectionRate"] = args ? args.maxNewConnectionRate : undefined;
            inputs["persistenceProfileId"] = args ? args.persistenceProfileId : undefined;
            inputs["poolId"] = args ? args.poolId : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["ruleIds"] = args ? args.ruleIds : undefined;
            inputs["serverSsl"] = args ? args.serverSsl : undefined;
            inputs["sorryPoolId"] = args ? args.sorryPoolId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LBHTTPVirtualServer.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBHTTPVirtualServer resources.
 */
export interface LBHTTPVirtualServerState {
    /**
     * Whether access log is enabled
     */
    readonly accessLogEnabled?: pulumi.Input<boolean>;
    /**
     * The http application profile defines the application protocol characteristics
     */
    readonly applicationProfileId?: pulumi.Input<string>;
    /**
     * Client SSL settings for Virtual Server
     */
    readonly clientSsl?: pulumi.Input<inputs.LBHTTPVirtualServerClientSsl>;
    /**
     * Default pool member port
     */
    readonly defaultPoolMemberPort?: pulumi.Input<string>;
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Whether the virtual server is enabled
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Virtual server IP address
     */
    readonly ipAddress?: pulumi.Input<string>;
    /**
     * If not specified, connections are unlimited
     */
    readonly maxConcurrentConnections?: pulumi.Input<number>;
    /**
     * If not specified, connection rate is unlimited
     */
    readonly maxNewConnectionRate?: pulumi.Input<number>;
    /**
     * Persistence profile is used to allow related client connections to be sent to the same backend server
     */
    readonly persistenceProfileId?: pulumi.Input<string>;
    /**
     * Server pool for backend connections
     */
    readonly poolId?: pulumi.Input<string>;
    /**
     * Virtual server port
     */
    readonly port?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Customization of load balancing behavior using match/action rules
     */
    readonly ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server SSL settings for Virtual Server
     */
    readonly serverSsl?: pulumi.Input<inputs.LBHTTPVirtualServerServerSsl>;
    /**
     * When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request
     * would be served by sorry server pool
     */
    readonly sorryPoolId?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPVirtualServerTag>[]>;
}

/**
 * The set of arguments for constructing a LBHTTPVirtualServer resource.
 */
export interface LBHTTPVirtualServerArgs {
    /**
     * Whether access log is enabled
     */
    readonly accessLogEnabled?: pulumi.Input<boolean>;
    /**
     * The http application profile defines the application protocol characteristics
     */
    readonly applicationProfileId: pulumi.Input<string>;
    /**
     * Client SSL settings for Virtual Server
     */
    readonly clientSsl?: pulumi.Input<inputs.LBHTTPVirtualServerClientSsl>;
    /**
     * Default pool member port
     */
    readonly defaultPoolMemberPort?: pulumi.Input<string>;
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Whether the virtual server is enabled
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Virtual server IP address
     */
    readonly ipAddress: pulumi.Input<string>;
    /**
     * If not specified, connections are unlimited
     */
    readonly maxConcurrentConnections?: pulumi.Input<number>;
    /**
     * If not specified, connection rate is unlimited
     */
    readonly maxNewConnectionRate?: pulumi.Input<number>;
    /**
     * Persistence profile is used to allow related client connections to be sent to the same backend server
     */
    readonly persistenceProfileId?: pulumi.Input<string>;
    /**
     * Server pool for backend connections
     */
    readonly poolId?: pulumi.Input<string>;
    /**
     * Virtual server port
     */
    readonly port: pulumi.Input<string>;
    /**
     * Customization of load balancing behavior using match/action rules
     */
    readonly ruleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server SSL settings for Virtual Server
     */
    readonly serverSsl?: pulumi.Input<inputs.LBHTTPVirtualServerServerSsl>;
    /**
     * When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request
     * would be served by sorry server pool
     */
    readonly sorryPoolId?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBHTTPVirtualServerTag>[]>;
}
