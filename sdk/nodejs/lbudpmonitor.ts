// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LBUDPMonitor extends pulumi.CustomResource {
    /**
     * Get an existing LBUDPMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LBUDPMonitorState, opts?: pulumi.CustomResourceOptions): LBUDPMonitor {
        return new LBUDPMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/lBUDPMonitor:LBUDPMonitor';

    /**
     * Returns true if the given object is an instance of LBUDPMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LBUDPMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LBUDPMonitor.__pulumiType;
    }

    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    public readonly fallCount!: pulumi.Output<number | undefined>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    public readonly monitorPort!: pulumi.Output<string | undefined>;
    /**
     * Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not
     * supported
     */
    public readonly receive!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    public readonly riseCount!: pulumi.Output<number | undefined>;
    /**
     * The data to be sent to the monitored server.
     */
    public readonly send!: pulumi.Output<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LBUDPMonitorTag[] | undefined>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a LBUDPMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LBUDPMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LBUDPMonitorArgs | LBUDPMonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LBUDPMonitorState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["fallCount"] = state ? state.fallCount : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["monitorPort"] = state ? state.monitorPort : undefined;
            inputs["receive"] = state ? state.receive : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["riseCount"] = state ? state.riseCount : undefined;
            inputs["send"] = state ? state.send : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as LBUDPMonitorArgs | undefined;
            if (!args || args.receive === undefined) {
                throw new Error("Missing required property 'receive'");
            }
            if (!args || args.send === undefined) {
                throw new Error("Missing required property 'send'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["fallCount"] = args ? args.fallCount : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["monitorPort"] = args ? args.monitorPort : undefined;
            inputs["receive"] = args ? args.receive : undefined;
            inputs["riseCount"] = args ? args.riseCount : undefined;
            inputs["send"] = args ? args.send : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LBUDPMonitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LBUDPMonitor resources.
 */
export interface LBUDPMonitorState {
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    readonly fallCount?: pulumi.Input<number>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    readonly interval?: pulumi.Input<number>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    readonly monitorPort?: pulumi.Input<string>;
    /**
     * Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not
     * supported
     */
    readonly receive?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    readonly riseCount?: pulumi.Input<number>;
    /**
     * The data to be sent to the monitored server.
     */
    readonly send?: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBUDPMonitorTag>[]>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    readonly timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LBUDPMonitor resource.
 */
export interface LBUDPMonitorArgs {
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must fail before marking it down
     */
    readonly fallCount?: pulumi.Input<number>;
    /**
     * The frequency at which the system issues the monitor check (in seconds)
     */
    readonly interval?: pulumi.Input<number>;
    /**
     * If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not
     * supported
     */
    readonly monitorPort?: pulumi.Input<string>;
    /**
     * Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not
     * supported
     */
    readonly receive: pulumi.Input<string>;
    /**
     * Number of consecutive checks that must pass before marking it up
     */
    readonly riseCount?: pulumi.Input<number>;
    /**
     * The data to be sent to the monitored server.
     */
    readonly send: pulumi.Input<string>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LBUDPMonitorTag>[]>;
    /**
     * Number of seconds the target has to respond to the monitor request
     */
    readonly timeout?: pulumi.Input<number>;
}
