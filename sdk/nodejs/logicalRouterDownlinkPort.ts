// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogicalRouterDownlinkPort extends pulumi.CustomResource {
    /**
     * Get an existing LogicalRouterDownlinkPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicalRouterDownlinkPortState, opts?: pulumi.CustomResourceOptions): LogicalRouterDownlinkPort {
        return new LogicalRouterDownlinkPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/logicalRouterDownlinkPort:LogicalRouterDownlinkPort';

    /**
     * Returns true if the given object is an instance of LogicalRouterDownlinkPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicalRouterDownlinkPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicalRouterDownlinkPort.__pulumiType;
    }

    /**
     * Description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Logical router port subnet (ipAddress / prefix length)
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * Identifier for port on logical switch to connect to
     */
    public readonly linkedLogicalSwitchPortId!: pulumi.Output<string>;
    /**
     * Identifier for logical router on which this port is created
     */
    public readonly logicalRouterId!: pulumi.Output<string>;
    /**
     * MAC address
     */
    public /*out*/ readonly macAddress!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Service Bindings
     */
    public readonly serviceBindings!: pulumi.Output<outputs.LogicalRouterDownlinkPortServiceBinding[] | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.LogicalRouterDownlinkPortTag[] | undefined>;
    /**
     * Unicast Reverse Path Forwarding mode
     */
    public readonly urpfMode!: pulumi.Output<string | undefined>;

    /**
     * Create a LogicalRouterDownlinkPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicalRouterDownlinkPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicalRouterDownlinkPortArgs | LogicalRouterDownlinkPortState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LogicalRouterDownlinkPortState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["linkedLogicalSwitchPortId"] = state ? state.linkedLogicalSwitchPortId : undefined;
            inputs["logicalRouterId"] = state ? state.logicalRouterId : undefined;
            inputs["macAddress"] = state ? state.macAddress : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["serviceBindings"] = state ? state.serviceBindings : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["urpfMode"] = state ? state.urpfMode : undefined;
        } else {
            const args = argsOrState as LogicalRouterDownlinkPortArgs | undefined;
            if (!args || args.ipAddress === undefined) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if (!args || args.linkedLogicalSwitchPortId === undefined) {
                throw new Error("Missing required property 'linkedLogicalSwitchPortId'");
            }
            if (!args || args.logicalRouterId === undefined) {
                throw new Error("Missing required property 'logicalRouterId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["linkedLogicalSwitchPortId"] = args ? args.linkedLogicalSwitchPortId : undefined;
            inputs["logicalRouterId"] = args ? args.logicalRouterId : undefined;
            inputs["serviceBindings"] = args ? args.serviceBindings : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["urpfMode"] = args ? args.urpfMode : undefined;
            inputs["macAddress"] = undefined /*out*/;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LogicalRouterDownlinkPort.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogicalRouterDownlinkPort resources.
 */
export interface LogicalRouterDownlinkPortState {
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Logical router port subnet (ipAddress / prefix length)
     */
    readonly ipAddress?: pulumi.Input<string>;
    /**
     * Identifier for port on logical switch to connect to
     */
    readonly linkedLogicalSwitchPortId?: pulumi.Input<string>;
    /**
     * Identifier for logical router on which this port is created
     */
    readonly logicalRouterId?: pulumi.Input<string>;
    /**
     * MAC address
     */
    readonly macAddress?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Service Bindings
     */
    readonly serviceBindings?: pulumi.Input<pulumi.Input<inputs.LogicalRouterDownlinkPortServiceBinding>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LogicalRouterDownlinkPortTag>[]>;
    /**
     * Unicast Reverse Path Forwarding mode
     */
    readonly urpfMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogicalRouterDownlinkPort resource.
 */
export interface LogicalRouterDownlinkPortArgs {
    /**
     * Description of this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The display name of this resource. Defaults to ID if not set
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Logical router port subnet (ipAddress / prefix length)
     */
    readonly ipAddress: pulumi.Input<string>;
    /**
     * Identifier for port on logical switch to connect to
     */
    readonly linkedLogicalSwitchPortId: pulumi.Input<string>;
    /**
     * Identifier for logical router on which this port is created
     */
    readonly logicalRouterId: pulumi.Input<string>;
    /**
     * Service Bindings
     */
    readonly serviceBindings?: pulumi.Input<pulumi.Input<inputs.LogicalRouterDownlinkPortServiceBinding>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.LogicalRouterDownlinkPortTag>[]>;
    /**
     * Unicast Reverse Path Forwarding mode
     */
    readonly urpfMode?: pulumi.Input<string>;
}
