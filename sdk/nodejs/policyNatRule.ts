// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyNatRule extends pulumi.CustomResource {
    /**
     * Get an existing PolicyNatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyNatRuleState, opts?: pulumi.CustomResourceOptions): PolicyNatRule {
        return new PolicyNatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyNatRule:PolicyNatRule';

    /**
     * Returns true if the given object is an instance of PolicyNatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyNatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyNatRule.__pulumiType;
    }

    /**
     * The action for the NAT Rule
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination network(s) for the NAT Rule
     */
    public readonly destinationNetworks!: pulumi.Output<string[] | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Enable/disable the rule
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Firewall match flag
     */
    public readonly firewallMatch!: pulumi.Output<string | undefined>;
    /**
     * The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
     */
    public readonly gatewayPath!: pulumi.Output<string>;
    /**
     * Enable/disable the logging of rule
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
     */
    public readonly rulePriority!: pulumi.Output<number | undefined>;
    /**
     * Policy paths to interfaces or labels where the NAT Rule is enforced
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Policy path of Service on which the NAT rule will be applied
     */
    public readonly service!: pulumi.Output<string | undefined>;
    /**
     * The source network(s) for the NAT Rule
     */
    public readonly sourceNetworks!: pulumi.Output<string[] | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyNatRuleTag[] | undefined>;
    /**
     * The translated network(s) for the NAT Rule
     */
    public readonly translatedNetworks!: pulumi.Output<string[]>;
    /**
     * Port number or port range. DNAT only
     */
    public readonly translatedPorts!: pulumi.Output<string | undefined>;

    /**
     * Create a PolicyNatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyNatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyNatRuleArgs | PolicyNatRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PolicyNatRuleState | undefined;
            inputs["action"] = state ? state.action : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["destinationNetworks"] = state ? state.destinationNetworks : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["firewallMatch"] = state ? state.firewallMatch : undefined;
            inputs["gatewayPath"] = state ? state.gatewayPath : undefined;
            inputs["logging"] = state ? state.logging : undefined;
            inputs["nsxId"] = state ? state.nsxId : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["rulePriority"] = state ? state.rulePriority : undefined;
            inputs["scopes"] = state ? state.scopes : undefined;
            inputs["service"] = state ? state.service : undefined;
            inputs["sourceNetworks"] = state ? state.sourceNetworks : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["translatedNetworks"] = state ? state.translatedNetworks : undefined;
            inputs["translatedPorts"] = state ? state.translatedPorts : undefined;
        } else {
            const args = argsOrState as PolicyNatRuleArgs | undefined;
            if (!args || args.action === undefined) {
                throw new Error("Missing required property 'action'");
            }
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.gatewayPath === undefined) {
                throw new Error("Missing required property 'gatewayPath'");
            }
            if (!args || args.translatedNetworks === undefined) {
                throw new Error("Missing required property 'translatedNetworks'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["destinationNetworks"] = args ? args.destinationNetworks : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["firewallMatch"] = args ? args.firewallMatch : undefined;
            inputs["gatewayPath"] = args ? args.gatewayPath : undefined;
            inputs["logging"] = args ? args.logging : undefined;
            inputs["nsxId"] = args ? args.nsxId : undefined;
            inputs["rulePriority"] = args ? args.rulePriority : undefined;
            inputs["scopes"] = args ? args.scopes : undefined;
            inputs["service"] = args ? args.service : undefined;
            inputs["sourceNetworks"] = args ? args.sourceNetworks : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["translatedNetworks"] = args ? args.translatedNetworks : undefined;
            inputs["translatedPorts"] = args ? args.translatedPorts : undefined;
            inputs["path"] = undefined /*out*/;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PolicyNatRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyNatRule resources.
 */
export interface PolicyNatRuleState {
    /**
     * The action for the NAT Rule
     */
    readonly action?: pulumi.Input<string>;
    /**
     * Description for this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The destination network(s) for the NAT Rule
     */
    readonly destinationNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for this resource
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * Enable/disable the rule
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Firewall match flag
     */
    readonly firewallMatch?: pulumi.Input<string>;
    /**
     * The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
     */
    readonly gatewayPath?: pulumi.Input<string>;
    /**
     * Enable/disable the logging of rule
     */
    readonly logging?: pulumi.Input<boolean>;
    /**
     * NSX ID for this resource
     */
    readonly nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    readonly path?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
     */
    readonly rulePriority?: pulumi.Input<number>;
    /**
     * Policy paths to interfaces or labels where the NAT Rule is enforced
     */
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy path of Service on which the NAT rule will be applied
     */
    readonly service?: pulumi.Input<string>;
    /**
     * The source network(s) for the NAT Rule
     */
    readonly sourceNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.PolicyNatRuleTag>[]>;
    /**
     * The translated network(s) for the NAT Rule
     */
    readonly translatedNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port number or port range. DNAT only
     */
    readonly translatedPorts?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyNatRule resource.
 */
export interface PolicyNatRuleArgs {
    /**
     * The action for the NAT Rule
     */
    readonly action: pulumi.Input<string>;
    /**
     * Description for this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The destination network(s) for the NAT Rule
     */
    readonly destinationNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for this resource
     */
    readonly displayName: pulumi.Input<string>;
    /**
     * Enable/disable the rule
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Firewall match flag
     */
    readonly firewallMatch?: pulumi.Input<string>;
    /**
     * The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
     */
    readonly gatewayPath: pulumi.Input<string>;
    /**
     * Enable/disable the logging of rule
     */
    readonly logging?: pulumi.Input<boolean>;
    /**
     * NSX ID for this resource
     */
    readonly nsxId?: pulumi.Input<string>;
    /**
     * The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
     */
    readonly rulePriority?: pulumi.Input<number>;
    /**
     * Policy paths to interfaces or labels where the NAT Rule is enforced
     */
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy path of Service on which the NAT rule will be applied
     */
    readonly service?: pulumi.Input<string>;
    /**
     * The source network(s) for the NAT Rule
     */
    readonly sourceNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.PolicyNatRuleTag>[]>;
    /**
     * The translated network(s) for the NAT Rule
     */
    readonly translatedNetworks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port number or port range. DNAT only
     */
    readonly translatedPorts?: pulumi.Input<string>;
}
