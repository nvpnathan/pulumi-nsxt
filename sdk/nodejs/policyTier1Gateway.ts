// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyTier1Gateway extends pulumi.CustomResource {
    /**
     * Get an existing PolicyTier1Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyTier1GatewayState, opts?: pulumi.CustomResourceOptions): PolicyTier1Gateway {
        return new PolicyTier1Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyTier1Gateway:PolicyTier1Gateway';

    /**
     * Returns true if the given object is an instance of PolicyTier1Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyTier1Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyTier1Gateway.__pulumiType;
    }

    /**
     * Default rule logging
     */
    public readonly defaultRuleLogging!: pulumi.Output<boolean | undefined>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Policy path to DHCP server or relay configuration to use for this Tier1
     */
    public readonly dhcpConfigPath!: pulumi.Output<string | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The path of the edge cluster connected to this gateway
     */
    public readonly edgeClusterPath!: pulumi.Output<string>;
    /**
     * Policy path to gateway QoS profile in egress direction
     */
    public readonly egressQosProfilePath!: pulumi.Output<string | undefined>;
    /**
     * Enable edge firewall
     */
    public readonly enableFirewall!: pulumi.Output<boolean | undefined>;
    /**
     * Enable standby relocation
     */
    public readonly enableStandbyRelocation!: pulumi.Output<boolean | undefined>;
    /**
     * Failover mode
     */
    public readonly failoverMode!: pulumi.Output<string | undefined>;
    /**
     * Force whitelisting
     *
     * @deprecated Use nsxt_policy_predefined_gateway_policy resource to control default action
     */
    public readonly forceWhitelisting!: pulumi.Output<boolean | undefined>;
    /**
     * Policy path to gateway QoS profile in ingress direction
     */
    public readonly ingressQosProfilePath!: pulumi.Output<string | undefined>;
    /**
     * Locale Service for the gateway
     */
    public readonly intersiteConfig!: pulumi.Output<outputs.PolicyTier1GatewayIntersiteConfig>;
    /**
     * The path of an IPv6 DAD profile
     */
    public readonly ipv6DadProfilePath!: pulumi.Output<string>;
    /**
     * The path of an IPv6 NDRA profile
     */
    public readonly ipv6NdraProfilePath!: pulumi.Output<string>;
    /**
     * Locale Service for the gateway
     */
    public readonly localeServices!: pulumi.Output<outputs.PolicyTier1GatewayLocaleService[] | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Edge node allocation at different sizes for routing and load balancer service to meet performance and scalability
     * requirements
     */
    public readonly poolAllocation!: pulumi.Output<string | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * List of route advertisement rules
     */
    public readonly routeAdvertisementRules!: pulumi.Output<outputs.PolicyTier1GatewayRouteAdvertisementRule[] | undefined>;
    /**
     * Enable different types of route advertisements
     */
    public readonly routeAdvertisementTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyTier1GatewayTag[] | undefined>;
    /**
     * The path of the connected Tier0
     */
    public readonly tier0Path!: pulumi.Output<string | undefined>;

    /**
     * Create a PolicyTier1Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyTier1GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyTier1GatewayArgs | PolicyTier1GatewayState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PolicyTier1GatewayState | undefined;
            inputs["defaultRuleLogging"] = state ? state.defaultRuleLogging : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dhcpConfigPath"] = state ? state.dhcpConfigPath : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["edgeClusterPath"] = state ? state.edgeClusterPath : undefined;
            inputs["egressQosProfilePath"] = state ? state.egressQosProfilePath : undefined;
            inputs["enableFirewall"] = state ? state.enableFirewall : undefined;
            inputs["enableStandbyRelocation"] = state ? state.enableStandbyRelocation : undefined;
            inputs["failoverMode"] = state ? state.failoverMode : undefined;
            inputs["forceWhitelisting"] = state ? state.forceWhitelisting : undefined;
            inputs["ingressQosProfilePath"] = state ? state.ingressQosProfilePath : undefined;
            inputs["intersiteConfig"] = state ? state.intersiteConfig : undefined;
            inputs["ipv6DadProfilePath"] = state ? state.ipv6DadProfilePath : undefined;
            inputs["ipv6NdraProfilePath"] = state ? state.ipv6NdraProfilePath : undefined;
            inputs["localeServices"] = state ? state.localeServices : undefined;
            inputs["nsxId"] = state ? state.nsxId : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["poolAllocation"] = state ? state.poolAllocation : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["routeAdvertisementRules"] = state ? state.routeAdvertisementRules : undefined;
            inputs["routeAdvertisementTypes"] = state ? state.routeAdvertisementTypes : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tier0Path"] = state ? state.tier0Path : undefined;
        } else {
            const args = argsOrState as PolicyTier1GatewayArgs | undefined;
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            inputs["defaultRuleLogging"] = args ? args.defaultRuleLogging : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dhcpConfigPath"] = args ? args.dhcpConfigPath : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["edgeClusterPath"] = args ? args.edgeClusterPath : undefined;
            inputs["egressQosProfilePath"] = args ? args.egressQosProfilePath : undefined;
            inputs["enableFirewall"] = args ? args.enableFirewall : undefined;
            inputs["enableStandbyRelocation"] = args ? args.enableStandbyRelocation : undefined;
            inputs["failoverMode"] = args ? args.failoverMode : undefined;
            inputs["forceWhitelisting"] = args ? args.forceWhitelisting : undefined;
            inputs["ingressQosProfilePath"] = args ? args.ingressQosProfilePath : undefined;
            inputs["intersiteConfig"] = args ? args.intersiteConfig : undefined;
            inputs["ipv6DadProfilePath"] = args ? args.ipv6DadProfilePath : undefined;
            inputs["ipv6NdraProfilePath"] = args ? args.ipv6NdraProfilePath : undefined;
            inputs["localeServices"] = args ? args.localeServices : undefined;
            inputs["nsxId"] = args ? args.nsxId : undefined;
            inputs["poolAllocation"] = args ? args.poolAllocation : undefined;
            inputs["routeAdvertisementRules"] = args ? args.routeAdvertisementRules : undefined;
            inputs["routeAdvertisementTypes"] = args ? args.routeAdvertisementTypes : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tier0Path"] = args ? args.tier0Path : undefined;
            inputs["path"] = undefined /*out*/;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PolicyTier1Gateway.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyTier1Gateway resources.
 */
export interface PolicyTier1GatewayState {
    /**
     * Default rule logging
     */
    readonly defaultRuleLogging?: pulumi.Input<boolean>;
    /**
     * Description for this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Policy path to DHCP server or relay configuration to use for this Tier1
     */
    readonly dhcpConfigPath?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * The path of the edge cluster connected to this gateway
     */
    readonly edgeClusterPath?: pulumi.Input<string>;
    /**
     * Policy path to gateway QoS profile in egress direction
     */
    readonly egressQosProfilePath?: pulumi.Input<string>;
    /**
     * Enable edge firewall
     */
    readonly enableFirewall?: pulumi.Input<boolean>;
    /**
     * Enable standby relocation
     */
    readonly enableStandbyRelocation?: pulumi.Input<boolean>;
    /**
     * Failover mode
     */
    readonly failoverMode?: pulumi.Input<string>;
    /**
     * Force whitelisting
     *
     * @deprecated Use nsxt_policy_predefined_gateway_policy resource to control default action
     */
    readonly forceWhitelisting?: pulumi.Input<boolean>;
    /**
     * Policy path to gateway QoS profile in ingress direction
     */
    readonly ingressQosProfilePath?: pulumi.Input<string>;
    /**
     * Locale Service for the gateway
     */
    readonly intersiteConfig?: pulumi.Input<inputs.PolicyTier1GatewayIntersiteConfig>;
    /**
     * The path of an IPv6 DAD profile
     */
    readonly ipv6DadProfilePath?: pulumi.Input<string>;
    /**
     * The path of an IPv6 NDRA profile
     */
    readonly ipv6NdraProfilePath?: pulumi.Input<string>;
    /**
     * Locale Service for the gateway
     */
    readonly localeServices?: pulumi.Input<pulumi.Input<inputs.PolicyTier1GatewayLocaleService>[]>;
    /**
     * NSX ID for this resource
     */
    readonly nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    readonly path?: pulumi.Input<string>;
    /**
     * Edge node allocation at different sizes for routing and load balancer service to meet performance and scalability
     * requirements
     */
    readonly poolAllocation?: pulumi.Input<string>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * List of route advertisement rules
     */
    readonly routeAdvertisementRules?: pulumi.Input<pulumi.Input<inputs.PolicyTier1GatewayRouteAdvertisementRule>[]>;
    /**
     * Enable different types of route advertisements
     */
    readonly routeAdvertisementTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.PolicyTier1GatewayTag>[]>;
    /**
     * The path of the connected Tier0
     */
    readonly tier0Path?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyTier1Gateway resource.
 */
export interface PolicyTier1GatewayArgs {
    /**
     * Default rule logging
     */
    readonly defaultRuleLogging?: pulumi.Input<boolean>;
    /**
     * Description for this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Policy path to DHCP server or relay configuration to use for this Tier1
     */
    readonly dhcpConfigPath?: pulumi.Input<string>;
    /**
     * Display name for this resource
     */
    readonly displayName: pulumi.Input<string>;
    /**
     * The path of the edge cluster connected to this gateway
     */
    readonly edgeClusterPath?: pulumi.Input<string>;
    /**
     * Policy path to gateway QoS profile in egress direction
     */
    readonly egressQosProfilePath?: pulumi.Input<string>;
    /**
     * Enable edge firewall
     */
    readonly enableFirewall?: pulumi.Input<boolean>;
    /**
     * Enable standby relocation
     */
    readonly enableStandbyRelocation?: pulumi.Input<boolean>;
    /**
     * Failover mode
     */
    readonly failoverMode?: pulumi.Input<string>;
    /**
     * Force whitelisting
     *
     * @deprecated Use nsxt_policy_predefined_gateway_policy resource to control default action
     */
    readonly forceWhitelisting?: pulumi.Input<boolean>;
    /**
     * Policy path to gateway QoS profile in ingress direction
     */
    readonly ingressQosProfilePath?: pulumi.Input<string>;
    /**
     * Locale Service for the gateway
     */
    readonly intersiteConfig?: pulumi.Input<inputs.PolicyTier1GatewayIntersiteConfig>;
    /**
     * The path of an IPv6 DAD profile
     */
    readonly ipv6DadProfilePath?: pulumi.Input<string>;
    /**
     * The path of an IPv6 NDRA profile
     */
    readonly ipv6NdraProfilePath?: pulumi.Input<string>;
    /**
     * Locale Service for the gateway
     */
    readonly localeServices?: pulumi.Input<pulumi.Input<inputs.PolicyTier1GatewayLocaleService>[]>;
    /**
     * NSX ID for this resource
     */
    readonly nsxId?: pulumi.Input<string>;
    /**
     * Edge node allocation at different sizes for routing and load balancer service to meet performance and scalability
     * requirements
     */
    readonly poolAllocation?: pulumi.Input<string>;
    /**
     * List of route advertisement rules
     */
    readonly routeAdvertisementRules?: pulumi.Input<pulumi.Input<inputs.PolicyTier1GatewayRouteAdvertisementRule>[]>;
    /**
     * Enable different types of route advertisements
     */
    readonly routeAdvertisementTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.PolicyTier1GatewayTag>[]>;
    /**
     * The path of the connected Tier0
     */
    readonly tier0Path?: pulumi.Input<string>;
}
