// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyVlanSegment extends pulumi.CustomResource {
    /**
     * Get an existing PolicyVlanSegment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyVlanSegmentState, opts?: pulumi.CustomResourceOptions): PolicyVlanSegment {
        return new PolicyVlanSegment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt:index/policyVlanSegment:PolicyVlanSegment';

    /**
     * Returns true if the given object is an instance of PolicyVlanSegment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyVlanSegment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyVlanSegment.__pulumiType;
    }

    /**
     * Advanced segment configuration
     */
    public readonly advancedConfig!: pulumi.Output<outputs.PolicyVlanSegmentAdvancedConfig | undefined>;
    /**
     * Description for this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Policy path to DHCP server or relay configuration to use for subnets configured on this segment
     */
    public readonly dhcpConfigPath!: pulumi.Output<string | undefined>;
    /**
     * IP and MAC discovery profiles for this segment
     */
    public readonly discoveryProfile!: pulumi.Output<outputs.PolicyVlanSegmentDiscoveryProfile | undefined>;
    /**
     * Display name for this resource
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * DNS domain names
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Configuration for extending Segment through L2 VPN
     */
    public readonly l2Extension!: pulumi.Output<outputs.PolicyVlanSegmentL2Extension | undefined>;
    /**
     * NSX ID for this resource
     */
    public readonly nsxId!: pulumi.Output<string>;
    /**
     * Policy path for this resource
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * QoS profiles for this segment
     */
    public readonly qosProfile!: pulumi.Output<outputs.PolicyVlanSegmentQosProfile | undefined>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    public /*out*/ readonly revision!: pulumi.Output<number>;
    /**
     * Security profiles for this segment
     */
    public readonly securityProfile!: pulumi.Output<outputs.PolicyVlanSegmentSecurityProfile | undefined>;
    /**
     * Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
     */
    public readonly subnets!: pulumi.Output<outputs.PolicyVlanSegmentSubnet[] | undefined>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    public readonly tags!: pulumi.Output<outputs.PolicyVlanSegmentTag[] | undefined>;
    /**
     * Policy path to the transport zone
     */
    public readonly transportZonePath!: pulumi.Output<string>;
    /**
     * VLAN IDs for VLAN backed Segment
     */
    public readonly vlanIds!: pulumi.Output<string[]>;

    /**
     * Create a PolicyVlanSegment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyVlanSegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyVlanSegmentArgs | PolicyVlanSegmentState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PolicyVlanSegmentState | undefined;
            inputs["advancedConfig"] = state ? state.advancedConfig : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dhcpConfigPath"] = state ? state.dhcpConfigPath : undefined;
            inputs["discoveryProfile"] = state ? state.discoveryProfile : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["l2Extension"] = state ? state.l2Extension : undefined;
            inputs["nsxId"] = state ? state.nsxId : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["qosProfile"] = state ? state.qosProfile : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["securityProfile"] = state ? state.securityProfile : undefined;
            inputs["subnets"] = state ? state.subnets : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["transportZonePath"] = state ? state.transportZonePath : undefined;
            inputs["vlanIds"] = state ? state.vlanIds : undefined;
        } else {
            const args = argsOrState as PolicyVlanSegmentArgs | undefined;
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.transportZonePath === undefined) {
                throw new Error("Missing required property 'transportZonePath'");
            }
            if (!args || args.vlanIds === undefined) {
                throw new Error("Missing required property 'vlanIds'");
            }
            inputs["advancedConfig"] = args ? args.advancedConfig : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dhcpConfigPath"] = args ? args.dhcpConfigPath : undefined;
            inputs["discoveryProfile"] = args ? args.discoveryProfile : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["l2Extension"] = args ? args.l2Extension : undefined;
            inputs["nsxId"] = args ? args.nsxId : undefined;
            inputs["qosProfile"] = args ? args.qosProfile : undefined;
            inputs["securityProfile"] = args ? args.securityProfile : undefined;
            inputs["subnets"] = args ? args.subnets : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["transportZonePath"] = args ? args.transportZonePath : undefined;
            inputs["vlanIds"] = args ? args.vlanIds : undefined;
            inputs["path"] = undefined /*out*/;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PolicyVlanSegment.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyVlanSegment resources.
 */
export interface PolicyVlanSegmentState {
    /**
     * Advanced segment configuration
     */
    readonly advancedConfig?: pulumi.Input<inputs.PolicyVlanSegmentAdvancedConfig>;
    /**
     * Description for this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Policy path to DHCP server or relay configuration to use for subnets configured on this segment
     */
    readonly dhcpConfigPath?: pulumi.Input<string>;
    /**
     * IP and MAC discovery profiles for this segment
     */
    readonly discoveryProfile?: pulumi.Input<inputs.PolicyVlanSegmentDiscoveryProfile>;
    /**
     * Display name for this resource
     */
    readonly displayName?: pulumi.Input<string>;
    /**
     * DNS domain names
     */
    readonly domainName?: pulumi.Input<string>;
    /**
     * Configuration for extending Segment through L2 VPN
     */
    readonly l2Extension?: pulumi.Input<inputs.PolicyVlanSegmentL2Extension>;
    /**
     * NSX ID for this resource
     */
    readonly nsxId?: pulumi.Input<string>;
    /**
     * Policy path for this resource
     */
    readonly path?: pulumi.Input<string>;
    /**
     * QoS profiles for this segment
     */
    readonly qosProfile?: pulumi.Input<inputs.PolicyVlanSegmentQosProfile>;
    /**
     * The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
     * changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
     * operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Security profiles for this segment
     */
    readonly securityProfile?: pulumi.Input<inputs.PolicyVlanSegmentSecurityProfile>;
    /**
     * Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
     */
    readonly subnets?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentSubnet>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentTag>[]>;
    /**
     * Policy path to the transport zone
     */
    readonly transportZonePath?: pulumi.Input<string>;
    /**
     * VLAN IDs for VLAN backed Segment
     */
    readonly vlanIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PolicyVlanSegment resource.
 */
export interface PolicyVlanSegmentArgs {
    /**
     * Advanced segment configuration
     */
    readonly advancedConfig?: pulumi.Input<inputs.PolicyVlanSegmentAdvancedConfig>;
    /**
     * Description for this resource
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Policy path to DHCP server or relay configuration to use for subnets configured on this segment
     */
    readonly dhcpConfigPath?: pulumi.Input<string>;
    /**
     * IP and MAC discovery profiles for this segment
     */
    readonly discoveryProfile?: pulumi.Input<inputs.PolicyVlanSegmentDiscoveryProfile>;
    /**
     * Display name for this resource
     */
    readonly displayName: pulumi.Input<string>;
    /**
     * DNS domain names
     */
    readonly domainName?: pulumi.Input<string>;
    /**
     * Configuration for extending Segment through L2 VPN
     */
    readonly l2Extension?: pulumi.Input<inputs.PolicyVlanSegmentL2Extension>;
    /**
     * NSX ID for this resource
     */
    readonly nsxId?: pulumi.Input<string>;
    /**
     * QoS profiles for this segment
     */
    readonly qosProfile?: pulumi.Input<inputs.PolicyVlanSegmentQosProfile>;
    /**
     * Security profiles for this segment
     */
    readonly securityProfile?: pulumi.Input<inputs.PolicyVlanSegmentSecurityProfile>;
    /**
     * Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
     */
    readonly subnets?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentSubnet>[]>;
    /**
     * Set of opaque identifiers meaningful to the user
     */
    readonly tags?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentTag>[]>;
    /**
     * Policy path to the transport zone
     */
    readonly transportZonePath: pulumi.Input<string>;
    /**
     * VLAN IDs for VLAN backed Segment
     */
    readonly vlanIds: pulumi.Input<pulumi.Input<string>[]>;
}
