// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the nsxt package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'nsxt';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }


    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        inputs["allowUnverifiedSsl"] = pulumi.output((args ? args.allowUnverifiedSsl : undefined) || <any>utilities.getEnvBoolean("NSXT_ALLOW_UNVERIFIED_SSL")).apply(JSON.stringify);
        inputs["caFile"] = (args ? args.caFile : undefined) || utilities.getEnv("NSXT_CA_FILE");
        inputs["clientAuthCertFile"] = (args ? args.clientAuthCertFile : undefined) || utilities.getEnv("NSXT_CLIENT_AUTH_CERT_FILE");
        inputs["clientAuthKeyFile"] = (args ? args.clientAuthKeyFile : undefined) || utilities.getEnv("NSXT_CLIENT_AUTH_KEY_FILE");
        inputs["enforcementPoint"] = (args ? args.enforcementPoint : undefined) || utilities.getEnv("NSXT_POLICY_ENFORCEMENT_POINT");
        inputs["globalManager"] = pulumi.output((args ? args.globalManager : undefined) || <any>utilities.getEnvBoolean("NSXT_GLOBAL_MANAGER")).apply(JSON.stringify);
        inputs["host"] = (args ? args.host : undefined) || utilities.getEnv("NSXT_MANAGER_HOST");
        inputs["maxRetries"] = pulumi.output((args ? args.maxRetries : undefined) || <any>utilities.getEnvNumber("NSXT_MAX_RETRIES")).apply(JSON.stringify);
        inputs["password"] = (args ? args.password : undefined) || utilities.getEnv("NSXT_PASSWORD");
        inputs["remoteAuth"] = pulumi.output((args ? args.remoteAuth : undefined) || <any>utilities.getEnvBoolean("NSXT_REMOTE_AUTH")).apply(JSON.stringify);
        inputs["retryMaxDelay"] = pulumi.output((args ? args.retryMaxDelay : undefined) || <any>utilities.getEnvNumber("NSXT_RETRY_MAX_DELAY")).apply(JSON.stringify);
        inputs["retryMinDelay"] = pulumi.output((args ? args.retryMinDelay : undefined) || <any>utilities.getEnvNumber("NSXT_RETRY_MIN_DELAY")).apply(JSON.stringify);
        inputs["retryOnStatusCodes"] = pulumi.output(args ? args.retryOnStatusCodes : undefined).apply(JSON.stringify);
        inputs["toleratePartialSuccess"] = pulumi.output((args ? args.toleratePartialSuccess : undefined) || <any>utilities.getEnvBoolean("NSXT_TOLERATE_PARTIAL_SUCCESS")).apply(JSON.stringify);
        inputs["username"] = (args ? args.username : undefined) || utilities.getEnv("NSXT_USERNAME");
        inputs["vmcAuthHost"] = (args ? args.vmcAuthHost : undefined) || utilities.getEnv("NSXT_VMC_AUTH_HOST");
        inputs["vmcToken"] = (args ? args.vmcToken : undefined) || utilities.getEnv("NSXT_VMC_TOKEN");
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Provider.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    readonly allowUnverifiedSsl?: pulumi.Input<boolean>;
    readonly caFile?: pulumi.Input<string>;
    readonly clientAuthCertFile?: pulumi.Input<string>;
    readonly clientAuthKeyFile?: pulumi.Input<string>;
    /**
     * Enforcement Point for NSXT Policy
     */
    readonly enforcementPoint?: pulumi.Input<string>;
    /**
     * Is this a policy global manager endpoint
     */
    readonly globalManager?: pulumi.Input<boolean>;
    /**
     * The hostname or IP address of the NSX manager.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * Maximum number of HTTP client retries
     */
    readonly maxRetries?: pulumi.Input<number>;
    readonly password?: pulumi.Input<string>;
    readonly remoteAuth?: pulumi.Input<boolean>;
    /**
     * Maximum delay in milliseconds between retries of a request
     */
    readonly retryMaxDelay?: pulumi.Input<number>;
    /**
     * Minimum delay in milliseconds between retries of a request
     */
    readonly retryMinDelay?: pulumi.Input<number>;
    /**
     * HTTP replies status codes to retry on
     */
    readonly retryOnStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Treat partial success status as success
     */
    readonly toleratePartialSuccess?: pulumi.Input<boolean>;
    readonly username?: pulumi.Input<string>;
    /**
     * URL for VMC authorization service (CSP)
     */
    readonly vmcAuthHost?: pulumi.Input<string>;
    /**
     * Long-living API token for VMC authorization
     */
    readonly vmcToken?: pulumi.Input<string>;
}
