// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlgorithmTypeNSServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface DHCPRelayProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface DHCPRelayServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface DHCPServerIPPoolDhcpGenericOption {
    code: pulumi.Input<number>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DHCPServerIPPoolDhcpOption121 {
    network: pulumi.Input<string>;
    nextHop: pulumi.Input<string>;
}

export interface DHCPServerIPPoolIpRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface DHCPServerIPPoolTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface DHCPServerProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface EtherTypeNSServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface FirewallSectionAppliedTo {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface FirewallSectionRule {
    action: pulumi.Input<string>;
    appliedTos?: pulumi.Input<pulumi.Input<inputs.FirewallSectionRuleAppliedTo>[]>;
    description?: pulumi.Input<string>;
    destinations?: pulumi.Input<pulumi.Input<inputs.FirewallSectionRuleDestination>[]>;
    destinationsExcluded?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipProtocol?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    notes?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
    ruleTag?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.FirewallSectionRuleService>[]>;
    sources?: pulumi.Input<pulumi.Input<inputs.FirewallSectionRuleSource>[]>;
    sourcesExcluded?: pulumi.Input<boolean>;
}

export interface FirewallSectionRuleAppliedTo {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface FirewallSectionRuleDestination {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface FirewallSectionRuleService {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface FirewallSectionRuleSource {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface FirewallSectionTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface ICMPTypeNSServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IGMPTypeNSServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IPBlockSubnetAllocationRange {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface IPBlockSubnetTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IPBlockTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IPDiscoverySwitchingProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IPPoolSubnet {
    allocationRanges: pulumi.Input<pulumi.Input<string>[]>;
    cidr: pulumi.Input<string>;
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    dnsSuffix?: pulumi.Input<string>;
    gatewayIp?: pulumi.Input<string>;
}

export interface IPPoolTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IPProtocolNSServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface IPSetTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface L4PortSetNSServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBClientSSLProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBCookiePersistenceProfileInsertModeParams {
    cookieDomain?: pulumi.Input<string>;
    cookieExpiryType?: pulumi.Input<string>;
    cookiePath?: pulumi.Input<string>;
    maxIdleTime?: pulumi.Input<number>;
    maxLifeTime?: pulumi.Input<number>;
}

export interface LBCookiePersistenceProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBFastTCPApplicationProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBFastUDPApplicationProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPApplicationProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleBodyCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleCookieCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleHeaderCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleHttpRedirectAction {
    redirectStatus: pulumi.Input<string>;
    redirectUrl: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleHttpRejectAction {
    replyMessage: pulumi.Input<string>;
    replyStatus: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleIpCondition {
    inverse?: pulumi.Input<boolean>;
    sourceAddress: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleMethodCondition {
    inverse?: pulumi.Input<boolean>;
    method: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleSelectPoolAction {
    poolId: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleTcpCondition {
    inverse?: pulumi.Input<boolean>;
    sourcePort: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleUriCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface LBHTTPForwardingRuleVersionCondition {
    inverse?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
}

export interface LBHTTPMonitorRequestHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPMonitorTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleBodyCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleCookieCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleHeaderCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleHeaderRewriteAction {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleIpCondition {
    inverse?: pulumi.Input<boolean>;
    sourceAddress: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleMethodCondition {
    inverse?: pulumi.Input<boolean>;
    method: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleTcpCondition {
    inverse?: pulumi.Input<boolean>;
    sourcePort: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleUriArgumentsCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    uriArguments: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleUriCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleUriRewriteAction {
    uri: pulumi.Input<string>;
    uriArguments?: pulumi.Input<string>;
}

export interface LBHTTPRequestRewriteRuleVersionCondition {
    inverse?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleCookieCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleHeaderRewriteAction {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleIpCondition {
    inverse?: pulumi.Input<boolean>;
    sourceAddress: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleMethodCondition {
    inverse?: pulumi.Input<boolean>;
    method: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleRequestHeaderCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleResponseHeaderCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleTcpCondition {
    inverse?: pulumi.Input<boolean>;
    sourcePort: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleUriArgumentsCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    uriArguments: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleUriCondition {
    caseSensitive?: pulumi.Input<boolean>;
    inverse?: pulumi.Input<boolean>;
    matchType: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface LBHTTPResponseRewriteRuleVersionCondition {
    inverse?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
}

export interface LBHTTPSMonitorRequestHeader {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LBHTTPSMonitorTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBHTTPVirtualServerClientSsl {
    caIds?: pulumi.Input<pulumi.Input<string>[]>;
    certificateChainDepth?: pulumi.Input<number>;
    clientAuth?: pulumi.Input<boolean>;
    clientSslProfileId: pulumi.Input<string>;
    crlIds?: pulumi.Input<pulumi.Input<string>[]>;
    defaultCertificateId: pulumi.Input<string>;
    sniCertificateIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LBHTTPVirtualServerServerSsl {
    caIds?: pulumi.Input<pulumi.Input<string>[]>;
    certificateChainDepth?: pulumi.Input<number>;
    clientCertificateId?: pulumi.Input<string>;
    crlIds?: pulumi.Input<pulumi.Input<string>[]>;
    serverAuth?: pulumi.Input<boolean>;
    serverSslProfileId: pulumi.Input<string>;
}

export interface LBHTTPVirtualServerTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBICMPMonitorTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBPassiveMonitorTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBPoolMember {
    adminState?: pulumi.Input<string>;
    backupMember?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    maxConcurrentConnections?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface LBPoolMemberGroup {
    groupingObject: pulumi.Input<inputs.LBPoolMemberGroupGroupingObject>;
    ipVersionFilter?: pulumi.Input<string>;
    limitIpListSize?: pulumi.Input<boolean>;
    maxIpListSize?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
}

export interface LBPoolMemberGroupGroupingObject {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface LBPoolSnatTranslation {
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface LBPoolTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBServerSSLProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBSourceIPPersistenceProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBTCPMonitorTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBTCPVirtualServerTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBUDPMonitorTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LBUDPVirtualServerTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalDHCPPortTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalDHCPerverDhcpGenericOption {
    code: pulumi.Input<number>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogicalDHCPerverDhcpOption121 {
    network: pulumi.Input<string>;
    nextHop: pulumi.Input<string>;
}

export interface LogicalDHCPerverTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalPortSwitchingProfileId {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LogicalPortTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalRouterCentralizedServicePortTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalRouterDownlinkPortServiceBinding {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface LogicalRouterDownlinkPortTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalRouterLinkPortOnTier0Tag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalRouterLinkPortOnTier1Tag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalSwitchAddressBinding {
    ipAddress?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface LogicalSwitchSwitchingProfileId {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface LogicalSwitchTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalTier0RouterFirewallSection {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface LogicalTier0RouterTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface LogicalTier1RouterFirewallSection {
    isValid?: pulumi.Input<boolean>;
    targetDisplayName?: pulumi.Input<string>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
}

export interface LogicalTier1RouterTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface MACManagementSwitchingProfileMacLearning {
    enabled?: pulumi.Input<boolean>;
    limit?: pulumi.Input<number>;
    limitPolicy?: pulumi.Input<string>;
    unicastFloodingAllowed?: pulumi.Input<boolean>;
}

export interface MACManagementSwitchingProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface NATRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface NSServiceGroupTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface NSroupMember {
    targetType: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NSroupMembershipCriteria {
    scope?: pulumi.Input<string>;
    scopeOp?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    tagOp?: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
}

export interface NSroupTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyBGPConfigRouteAggregation {
    prefix?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<boolean>;
}

export interface PolicyBGPConfigTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyBGPNeighborBfdConfig {
    enabled?: pulumi.Input<boolean>;
    interval?: pulumi.Input<number>;
    multiple?: pulumi.Input<number>;
}

export interface PolicyBGPNeighborRouteFiltering {
    addressFamily: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    inRouteFilter?: pulumi.Input<string>;
    maximumRoutes?: pulumi.Input<number>;
    outRouteFilter?: pulumi.Input<string>;
}

export interface PolicyBGPNeighborTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyContextProfileAppId {
    description?: pulumi.Input<string>;
    isAlgType?: pulumi.Input<boolean>;
    subAttribute?: pulumi.Input<inputs.PolicyContextProfileAppIdSubAttribute>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyContextProfileAppIdSubAttribute {
    cifsSmbVersions?: pulumi.Input<pulumi.Input<string>[]>;
    tlsCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    tlsVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyContextProfileDomainName {
    description?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyContextProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyContextProfileUrlCategory {
    description?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyDHCPRelayTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyDHCPServerTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyGatewayPolicyRule {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    destinationsExcluded?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    displayName: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    logLabel?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    notes?: pulumi.Input<string>;
    nsxId?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    revision?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    sequenceNumber?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sourceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourcesExcluded?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyGatewayPolicyRuleTag>[]>;
}

export interface PolicyGatewayPolicyRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyGatewayPolicyTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyGatewayPrefixListPrefix {
    action?: pulumi.Input<string>;
    ge?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    network?: pulumi.Input<string>;
}

export interface PolicyGatewayPrefixListTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyGroupConjunction {
    operator: pulumi.Input<string>;
}

export interface PolicyGroupCriteria {
    conditions?: pulumi.Input<pulumi.Input<inputs.PolicyGroupCriteriaCondition>[]>;
    ipaddressExpression?: pulumi.Input<inputs.PolicyGroupCriteriaIpaddressExpression>;
    macaddressExpression?: pulumi.Input<inputs.PolicyGroupCriteriaMacaddressExpression>;
    pathExpression?: pulumi.Input<inputs.PolicyGroupCriteriaPathExpression>;
}

export interface PolicyGroupCriteriaCondition {
    key: pulumi.Input<string>;
    memberType: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface PolicyGroupCriteriaIpaddressExpression {
    ipAddresses: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyGroupCriteriaMacaddressExpression {
    macAddresses: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyGroupCriteriaPathExpression {
    memberPaths: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyGroupExtendedCriteria {
    identityGroups?: pulumi.Input<pulumi.Input<inputs.PolicyGroupExtendedCriteriaIdentityGroup>[]>;
}

export interface PolicyGroupExtendedCriteriaIdentityGroup {
    distinguishedName?: pulumi.Input<string>;
    domainBaseDistinguishedName?: pulumi.Input<string>;
    sid?: pulumi.Input<string>;
}

export interface PolicyGroupTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyIPAddressAllocationTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyIPBlockTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyIPPoolBlockSubnetTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyIPPoolStaticSubnetAllocationRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface PolicyIPPoolStaticSubnetTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyIPPoolTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyLBPoolMember {
    adminState?: pulumi.Input<string>;
    backupMember?: pulumi.Input<boolean>;
    displayName?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    maxConcurrentConnections?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface PolicyLBPoolMemberGroup {
    allowIpv4?: pulumi.Input<boolean>;
    allowIpv6?: pulumi.Input<boolean>;
    groupPath: pulumi.Input<string>;
    maxIpListSize?: pulumi.Input<number>;
    port?: pulumi.Input<string>;
}

export interface PolicyLBPoolSnat {
    ipPoolAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface PolicyLBPoolTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyLBServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyLBVirtualServerAccessListControl {
    action: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    groupPath: pulumi.Input<string>;
}

export interface PolicyLBVirtualServerClientSsl {
    caPaths?: pulumi.Input<pulumi.Input<string>[]>;
    certificateChainDepth?: pulumi.Input<number>;
    clientAuth?: pulumi.Input<string>;
    crlPaths?: pulumi.Input<pulumi.Input<string>[]>;
    defaultCertificatePath: pulumi.Input<string>;
    sniPaths?: pulumi.Input<pulumi.Input<string>[]>;
    sslProfilePath?: pulumi.Input<string>;
}

export interface PolicyLBVirtualServerServerSsl {
    caPaths?: pulumi.Input<pulumi.Input<string>[]>;
    certificateChainDepth?: pulumi.Input<number>;
    clientCertificatePath?: pulumi.Input<string>;
    crlPaths?: pulumi.Input<pulumi.Input<string>[]>;
    serverAuth?: pulumi.Input<string>;
    sslProfilePath?: pulumi.Input<string>;
}

export interface PolicyLBVirtualServerTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyNatRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyPredefinedGatewayPolicyDefaultRule {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    logLabel?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    nsxId?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
    scope: pulumi.Input<string>;
    sequenceNumber?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyPredefinedGatewayPolicyDefaultRuleTag>[]>;
}

export interface PolicyPredefinedGatewayPolicyDefaultRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyPredefinedGatewayPolicyRule {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    destinationsExcluded?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    displayName: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    logLabel?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    notes?: pulumi.Input<string>;
    nsxId?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    revision?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    sequenceNumber?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sourceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourcesExcluded?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyPredefinedGatewayPolicyRuleTag>[]>;
}

export interface PolicyPredefinedGatewayPolicyRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyPredefinedGatewayPolicyTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyPredefinedSecurityPolicyDefaultRule {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    logLabel?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    nsxId?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
    scope?: pulumi.Input<string>;
    sequenceNumber?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyPredefinedSecurityPolicyDefaultRuleTag>[]>;
}

export interface PolicyPredefinedSecurityPolicyDefaultRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyPredefinedSecurityPolicyRule {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    destinationsExcluded?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    displayName: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    logLabel?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    notes?: pulumi.Input<string>;
    nsxId?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    revision?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    sequenceNumber?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sourceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourcesExcluded?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyPredefinedSecurityPolicyRuleTag>[]>;
}

export interface PolicyPredefinedSecurityPolicyRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyPredefinedSecurityPolicyTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicySecurityPolicyRule {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationGroups?: pulumi.Input<pulumi.Input<string>[]>;
    destinationsExcluded?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    displayName: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    logLabel?: pulumi.Input<string>;
    logged?: pulumi.Input<boolean>;
    notes?: pulumi.Input<string>;
    nsxId?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    revision?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    sequenceNumber?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sourceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourcesExcluded?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicySecurityPolicyRuleTag>[]>;
}

export interface PolicySecurityPolicyRuleTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicySecurityPolicyTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicySegmentAdvancedConfig {
    addressPoolPath?: pulumi.Input<string>;
    connectivity?: pulumi.Input<string>;
    hybrid?: pulumi.Input<boolean>;
    localEgress?: pulumi.Input<boolean>;
    uplinkTeamingPolicy?: pulumi.Input<string>;
}

export interface PolicySegmentDiscoveryProfile {
    bindingMapPath?: pulumi.Input<string>;
    ipDiscoveryProfilePath?: pulumi.Input<string>;
    macDiscoveryProfilePath?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
}

export interface PolicySegmentL2Extension {
    l2vpnPaths?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelId?: pulumi.Input<number>;
}

export interface PolicySegmentQosProfile {
    bindingMapPath?: pulumi.Input<string>;
    qosProfilePath: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
}

export interface PolicySegmentSecurityProfile {
    bindingMapPath?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
    securityProfilePath?: pulumi.Input<string>;
    spoofguardProfilePath?: pulumi.Input<string>;
}

export interface PolicySegmentSubnet {
    cidr: pulumi.Input<string>;
    dhcpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpV4Config?: pulumi.Input<inputs.PolicySegmentSubnetDhcpV4Config>;
    dhcpV6Config?: pulumi.Input<inputs.PolicySegmentSubnetDhcpV6Config>;
    network?: pulumi.Input<string>;
}

export interface PolicySegmentSubnetDhcpV4Config {
    dhcpGenericOptions?: pulumi.Input<pulumi.Input<inputs.PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption>[]>;
    dhcpOption121s?: pulumi.Input<pulumi.Input<inputs.PolicySegmentSubnetDhcpV4ConfigDhcpOption121>[]>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    leaseTime?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
}

export interface PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption {
    code: pulumi.Input<number>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicySegmentSubnetDhcpV4ConfigDhcpOption121 {
    network: pulumi.Input<string>;
    nextHop: pulumi.Input<string>;
}

export interface PolicySegmentSubnetDhcpV6Config {
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    excludedRanges?: pulumi.Input<pulumi.Input<inputs.PolicySegmentSubnetDhcpV6ConfigExcludedRange>[]>;
    leaseTime?: pulumi.Input<number>;
    preferredTime?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
    sntpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicySegmentSubnetDhcpV6ConfigExcludedRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface PolicySegmentTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyServiceAlgorithmEntry {
    algorithm: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationPort: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    sourcePorts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyServiceEtherTypeEntry {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    etherType: pulumi.Input<number>;
}

export interface PolicyServiceIcmpEntry {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    icmpCode?: pulumi.Input<string>;
    icmpType?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface PolicyServiceIgmpEntry {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
}

export interface PolicyServiceIpProtocolEntry {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    protocol: pulumi.Input<number>;
}

export interface PolicyServiceL4PortSetEntry {
    description?: pulumi.Input<string>;
    destinationPorts?: pulumi.Input<pulumi.Input<string>[]>;
    displayName?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    sourcePorts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyServiceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyStaticRouteNextHop {
    adminDistance?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
}

export interface PolicyStaticRouteTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyTier0GatewayBgpConfig {
    ecmp?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    gracefulRestartMode?: pulumi.Input<string>;
    gracefulRestartStaleRouteTimer?: pulumi.Input<number>;
    gracefulRestartTimer?: pulumi.Input<number>;
    interSrIbgp?: pulumi.Input<boolean>;
    localAsNum?: pulumi.Input<string>;
    multipathRelax?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
    routeAggregations?: pulumi.Input<pulumi.Input<inputs.PolicyTier0GatewayBgpConfigRouteAggregation>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyTier0GatewayBgpConfigTag>[]>;
}

export interface PolicyTier0GatewayBgpConfigRouteAggregation {
    prefix?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<boolean>;
}

export interface PolicyTier0GatewayBgpConfigTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyTier0GatewayHAVIPConfigConfig {
    enabled?: pulumi.Input<boolean>;
    externalInterfacePaths: pulumi.Input<pulumi.Input<string>[]>;
    vipSubnets: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyTier0GatewayInterfaceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyTier0GatewayIntersiteConfig {
    fallbackSitePaths?: pulumi.Input<pulumi.Input<string>[]>;
    primarySitePath?: pulumi.Input<string>;
    transitSubnet?: pulumi.Input<string>;
}

export interface PolicyTier0GatewayLocaleService {
    edgeClusterPath: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    preferredEdgePaths?: pulumi.Input<pulumi.Input<string>[]>;
    redistributionConfig?: pulumi.Input<inputs.PolicyTier0GatewayLocaleServiceRedistributionConfig>;
    revision?: pulumi.Input<number>;
}

export interface PolicyTier0GatewayLocaleServiceRedistributionConfig {
    enabled?: pulumi.Input<boolean>;
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyTier0GatewayLocaleServiceRedistributionConfigRule>[]>;
}

export interface PolicyTier0GatewayLocaleServiceRedistributionConfigRule {
    name?: pulumi.Input<string>;
    routeMapPath?: pulumi.Input<string>;
    types?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyTier0GatewayRedistributionConfig {
    enabled?: pulumi.Input<boolean>;
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyTier0GatewayRedistributionConfigRule>[]>;
}

export interface PolicyTier0GatewayRedistributionConfigRule {
    name?: pulumi.Input<string>;
    routeMapPath?: pulumi.Input<string>;
    types?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyTier0GatewayTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyTier0GatewayVrfConfig {
    evpnTransitVni?: pulumi.Input<number>;
    gatewayPath: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    routeDistinguisher?: pulumi.Input<string>;
    routeTarget?: pulumi.Input<inputs.PolicyTier0GatewayVrfConfigRouteTarget>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyTier0GatewayVrfConfigTag>[]>;
}

export interface PolicyTier0GatewayVrfConfigRouteTarget {
    addressFamily?: pulumi.Input<string>;
    autoMode?: pulumi.Input<boolean>;
    exportTargets?: pulumi.Input<pulumi.Input<string>[]>;
    importTargets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyTier0GatewayVrfConfigTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyTier1GatewayInterfaceTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyTier1GatewayIntersiteConfig {
    fallbackSitePaths?: pulumi.Input<pulumi.Input<string>[]>;
    primarySitePath?: pulumi.Input<string>;
    transitSubnet?: pulumi.Input<string>;
}

export interface PolicyTier1GatewayLocaleService {
    edgeClusterPath: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    preferredEdgePaths?: pulumi.Input<pulumi.Input<string>[]>;
    revision?: pulumi.Input<number>;
}

export interface PolicyTier1GatewayRouteAdvertisementRule {
    action?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    prefixOperator?: pulumi.Input<string>;
    routeAdvertisementTypes?: pulumi.Input<pulumi.Input<string>[]>;
    subnets: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyTier1GatewayTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyVMTagsPort {
    segmentPath: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.PolicyVMTagsPortTag>[]>;
}

export interface PolicyVMTagsPortTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyVMTagsTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyVlanSegmentAdvancedConfig {
    addressPoolPath?: pulumi.Input<string>;
    connectivity?: pulumi.Input<string>;
    hybrid?: pulumi.Input<boolean>;
    localEgress?: pulumi.Input<boolean>;
    uplinkTeamingPolicy?: pulumi.Input<string>;
}

export interface PolicyVlanSegmentDiscoveryProfile {
    bindingMapPath?: pulumi.Input<string>;
    ipDiscoveryProfilePath?: pulumi.Input<string>;
    macDiscoveryProfilePath?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
}

export interface PolicyVlanSegmentL2Extension {
    l2vpnPaths?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelId?: pulumi.Input<number>;
}

export interface PolicyVlanSegmentQosProfile {
    bindingMapPath?: pulumi.Input<string>;
    qosProfilePath: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
}

export interface PolicyVlanSegmentSecurityProfile {
    bindingMapPath?: pulumi.Input<string>;
    revision?: pulumi.Input<number>;
    securityProfilePath?: pulumi.Input<string>;
    spoofguardProfilePath?: pulumi.Input<string>;
}

export interface PolicyVlanSegmentSubnet {
    cidr: pulumi.Input<string>;
    dhcpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpV4Config?: pulumi.Input<inputs.PolicyVlanSegmentSubnetDhcpV4Config>;
    dhcpV6Config?: pulumi.Input<inputs.PolicyVlanSegmentSubnetDhcpV6Config>;
    network?: pulumi.Input<string>;
}

export interface PolicyVlanSegmentSubnetDhcpV4Config {
    dhcpGenericOptions?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption>[]>;
    dhcpOption121s?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121>[]>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    leaseTime?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
}

export interface PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption {
    code: pulumi.Input<number>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121 {
    network: pulumi.Input<string>;
    nextHop: pulumi.Input<string>;
}

export interface PolicyVlanSegmentSubnetDhcpV6Config {
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    excludedRanges?: pulumi.Input<pulumi.Input<inputs.PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange>[]>;
    leaseTime?: pulumi.Input<number>;
    preferredTime?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
    sntpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface PolicyVlanSegmentTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface QOSSwitchingProfileEgressRateShaper {
    averageBwMbps?: pulumi.Input<number>;
    burstSize?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    peakBwMbps?: pulumi.Input<number>;
}

export interface QOSSwitchingProfileIngressBroadcastRateShaper {
    averageBwKbps?: pulumi.Input<number>;
    burstSize?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    peakBwKbps?: pulumi.Input<number>;
}

export interface QOSSwitchingProfileIngressRateShaper {
    averageBwMbps?: pulumi.Input<number>;
    burstSize?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    peakBwMbps?: pulumi.Input<number>;
}

export interface QOSSwitchingProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface SpoofguardSwitchingProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface StaticRouteNextHop {
    administrativeDistance?: pulumi.Input<number>;
    bfdEnabled?: pulumi.Input<boolean>;
    blackholeAction?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    logicalRouterPortId?: pulumi.Input<string>;
}

export interface StaticRouteTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface SwitchSecuritySwitchingProfileRateLimits {
    enabled?: pulumi.Input<boolean>;
    rxBroadcast?: pulumi.Input<number>;
    rxMulticast?: pulumi.Input<number>;
    txBroadcast?: pulumi.Input<number>;
    txMulticast?: pulumi.Input<number>;
}

export interface SwitchSecuritySwitchingProfileTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface VMTagsLogicalPortTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface VMTagsTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface VlanLogicalSwitchAddressBinding {
    ipAddress?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface VlanLogicalSwitchSwitchingProfileId {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface VlanLogicalSwitchTag {
    scope?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}
