// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlgorithmTypeNSServiceTag {
    scope?: string;
    tag?: string;
}

export interface DHCPRelayProfileTag {
    scope?: string;
    tag?: string;
}

export interface DHCPRelayServiceTag {
    scope?: string;
    tag?: string;
}

export interface DHCPServerIPPoolDhcpGenericOption {
    code: number;
    values: string[];
}

export interface DHCPServerIPPoolDhcpOption121 {
    network: string;
    nextHop: string;
}

export interface DHCPServerIPPoolIpRange {
    end: string;
    start: string;
}

export interface DHCPServerIPPoolTag {
    scope?: string;
    tag?: string;
}

export interface DHCPServerProfileTag {
    scope?: string;
    tag?: string;
}

export interface EtherTypeNSServiceTag {
    scope?: string;
    tag?: string;
}

export interface FirewallSectionAppliedTo {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface FirewallSectionRule {
    action: string;
    appliedTos?: outputs.FirewallSectionRuleAppliedTo[];
    description?: string;
    destinations?: outputs.FirewallSectionRuleDestination[];
    destinationsExcluded?: boolean;
    direction?: string;
    disabled?: boolean;
    displayName?: string;
    id: string;
    ipProtocol?: string;
    logged?: boolean;
    notes?: string;
    revision: number;
    ruleTag?: string;
    services?: outputs.FirewallSectionRuleService[];
    sources?: outputs.FirewallSectionRuleSource[];
    sourcesExcluded?: boolean;
}

export interface FirewallSectionRuleAppliedTo {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface FirewallSectionRuleDestination {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface FirewallSectionRuleService {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface FirewallSectionRuleSource {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface FirewallSectionTag {
    scope?: string;
    tag?: string;
}

export interface ICMPTypeNSServiceTag {
    scope?: string;
    tag?: string;
}

export interface IGMPTypeNSServiceTag {
    scope?: string;
    tag?: string;
}

export interface IPBlockSubnetAllocationRange {
    end: string;
    start: string;
}

export interface IPBlockSubnetTag {
    scope?: string;
    tag?: string;
}

export interface IPBlockTag {
    scope?: string;
    tag?: string;
}

export interface IPDiscoverySwitchingProfileTag {
    scope?: string;
    tag?: string;
}

export interface IPPoolSubnet {
    allocationRanges: string[];
    cidr: string;
    dnsNameservers?: string[];
    dnsSuffix?: string;
    gatewayIp?: string;
}

export interface IPPoolTag {
    scope?: string;
    tag?: string;
}

export interface IPProtocolNSServiceTag {
    scope?: string;
    tag?: string;
}

export interface IPSetTag {
    scope?: string;
    tag?: string;
}

export interface L4PortSetNSServiceTag {
    scope?: string;
    tag?: string;
}

export interface LBClientSSLProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBCookiePersistenceProfileInsertModeParams {
    cookieDomain?: string;
    cookieExpiryType?: string;
    cookiePath?: string;
    maxIdleTime: number;
    maxLifeTime: number;
}

export interface LBCookiePersistenceProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBFastTCPApplicationProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBFastUDPApplicationProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPApplicationProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPForwardingRuleBodyCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    value: string;
}

export interface LBHTTPForwardingRuleCookieCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPForwardingRuleHeaderCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPForwardingRuleHttpRedirectAction {
    redirectStatus: string;
    redirectUrl: string;
}

export interface LBHTTPForwardingRuleHttpRejectAction {
    replyMessage: string;
    replyStatus: string;
}

export interface LBHTTPForwardingRuleIpCondition {
    inverse?: boolean;
    sourceAddress: string;
}

export interface LBHTTPForwardingRuleMethodCondition {
    inverse?: boolean;
    method: string;
}

export interface LBHTTPForwardingRuleSelectPoolAction {
    poolId: string;
}

export interface LBHTTPForwardingRuleTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPForwardingRuleTcpCondition {
    inverse?: boolean;
    sourcePort: string;
}

export interface LBHTTPForwardingRuleUriCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    uri: string;
}

export interface LBHTTPForwardingRuleVersionCondition {
    inverse?: boolean;
    version: string;
}

export interface LBHTTPMonitorRequestHeader {
    name: string;
    value: string;
}

export interface LBHTTPMonitorTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPRequestRewriteRuleBodyCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    value: string;
}

export interface LBHTTPRequestRewriteRuleCookieCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPRequestRewriteRuleHeaderCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPRequestRewriteRuleHeaderRewriteAction {
    name: string;
    value?: string;
}

export interface LBHTTPRequestRewriteRuleIpCondition {
    inverse?: boolean;
    sourceAddress: string;
}

export interface LBHTTPRequestRewriteRuleMethodCondition {
    inverse?: boolean;
    method: string;
}

export interface LBHTTPRequestRewriteRuleTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPRequestRewriteRuleTcpCondition {
    inverse?: boolean;
    sourcePort: string;
}

export interface LBHTTPRequestRewriteRuleUriArgumentsCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    uriArguments: string;
}

export interface LBHTTPRequestRewriteRuleUriCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    uri: string;
}

export interface LBHTTPRequestRewriteRuleUriRewriteAction {
    uri: string;
    uriArguments?: string;
}

export interface LBHTTPRequestRewriteRuleVersionCondition {
    inverse?: boolean;
    version: string;
}

export interface LBHTTPResponseRewriteRuleCookieCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPResponseRewriteRuleHeaderRewriteAction {
    name: string;
    value?: string;
}

export interface LBHTTPResponseRewriteRuleIpCondition {
    inverse?: boolean;
    sourceAddress: string;
}

export interface LBHTTPResponseRewriteRuleMethodCondition {
    inverse?: boolean;
    method: string;
}

export interface LBHTTPResponseRewriteRuleRequestHeaderCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPResponseRewriteRuleResponseHeaderCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    name: string;
    value: string;
}

export interface LBHTTPResponseRewriteRuleTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPResponseRewriteRuleTcpCondition {
    inverse?: boolean;
    sourcePort: string;
}

export interface LBHTTPResponseRewriteRuleUriArgumentsCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    uriArguments: string;
}

export interface LBHTTPResponseRewriteRuleUriCondition {
    caseSensitive?: boolean;
    inverse?: boolean;
    matchType: string;
    uri: string;
}

export interface LBHTTPResponseRewriteRuleVersionCondition {
    inverse?: boolean;
    version: string;
}

export interface LBHTTPSMonitorRequestHeader {
    name: string;
    value: string;
}

export interface LBHTTPSMonitorTag {
    scope?: string;
    tag?: string;
}

export interface LBHTTPVirtualServerClientSsl {
    caIds?: string[];
    certificateChainDepth?: number;
    clientAuth?: boolean;
    clientSslProfileId: string;
    crlIds?: string[];
    defaultCertificateId: string;
    sniCertificateIds?: string[];
}

export interface LBHTTPVirtualServerServerSsl {
    caIds?: string[];
    certificateChainDepth?: number;
    clientCertificateId?: string;
    crlIds?: string[];
    serverAuth?: boolean;
    serverSslProfileId: string;
}

export interface LBHTTPVirtualServerTag {
    scope?: string;
    tag?: string;
}

export interface LBICMPMonitorTag {
    scope?: string;
    tag?: string;
}

export interface LBPassiveMonitorTag {
    scope?: string;
    tag?: string;
}

export interface LBPoolMember {
    adminState?: string;
    backupMember?: boolean;
    displayName: string;
    ipAddress: string;
    maxConcurrentConnections?: number;
    port?: string;
    weight?: number;
}

export interface LBPoolMemberGroup {
    groupingObject: outputs.LBPoolMemberGroupGroupingObject;
    ipVersionFilter?: string;
    limitIpListSize?: boolean;
    maxIpListSize?: number;
    port?: number;
}

export interface LBPoolMemberGroupGroupingObject {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface LBPoolSnatTranslation {
    ip?: string;
    type?: string;
}

export interface LBPoolTag {
    scope?: string;
    tag?: string;
}

export interface LBServerSSLProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBServiceTag {
    scope?: string;
    tag?: string;
}

export interface LBSourceIPPersistenceProfileTag {
    scope?: string;
    tag?: string;
}

export interface LBTCPMonitorTag {
    scope?: string;
    tag?: string;
}

export interface LBTCPVirtualServerTag {
    scope?: string;
    tag?: string;
}

export interface LBUDPMonitorTag {
    scope?: string;
    tag?: string;
}

export interface LBUDPVirtualServerTag {
    scope?: string;
    tag?: string;
}

export interface LogicalDHCPPortTag {
    scope?: string;
    tag?: string;
}

export interface LogicalDHCPerverDhcpGenericOption {
    code: number;
    values: string[];
}

export interface LogicalDHCPerverDhcpOption121 {
    network: string;
    nextHop: string;
}

export interface LogicalDHCPerverTag {
    scope?: string;
    tag?: string;
}

export interface LogicalPortSwitchingProfileId {
    key: string;
    value: string;
}

export interface LogicalPortTag {
    scope?: string;
    tag?: string;
}

export interface LogicalRouterCentralizedServicePortTag {
    scope?: string;
    tag?: string;
}

export interface LogicalRouterDownlinkPortServiceBinding {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface LogicalRouterDownlinkPortTag {
    scope?: string;
    tag?: string;
}

export interface LogicalRouterLinkPortOnTier0Tag {
    scope?: string;
    tag?: string;
}

export interface LogicalRouterLinkPortOnTier1Tag {
    scope?: string;
    tag?: string;
}

export interface LogicalSwitchAddressBinding {
    ipAddress?: string;
    macAddress?: string;
    vlan?: number;
}

export interface LogicalSwitchSwitchingProfileId {
    key: string;
    value: string;
}

export interface LogicalSwitchTag {
    scope?: string;
    tag?: string;
}

export interface LogicalTier0RouterFirewallSection {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface LogicalTier0RouterTag {
    scope?: string;
    tag?: string;
}

export interface LogicalTier1RouterFirewallSection {
    isValid: boolean;
    targetDisplayName: string;
    targetId?: string;
    targetType?: string;
}

export interface LogicalTier1RouterTag {
    scope?: string;
    tag?: string;
}

export interface MACManagementSwitchingProfileMacLearning {
    enabled?: boolean;
    limit?: number;
    limitPolicy?: string;
    unicastFloodingAllowed?: boolean;
}

export interface MACManagementSwitchingProfileTag {
    scope?: string;
    tag?: string;
}

export interface NATRuleTag {
    scope?: string;
    tag?: string;
}

export interface NSServiceGroupTag {
    scope?: string;
    tag?: string;
}

export interface NSroupMember {
    targetType: string;
    value: string;
}

export interface NSroupMembershipCriteria {
    scope?: string;
    scopeOp?: string;
    tag?: string;
    tagOp?: string;
    targetType: string;
}

export interface NSroupTag {
    scope?: string;
    tag?: string;
}

export interface PolicyBGPConfigRouteAggregation {
    prefix?: string;
    summaryOnly?: boolean;
}

export interface PolicyBGPConfigTag {
    scope?: string;
    tag?: string;
}

export interface PolicyBGPNeighborBfdConfig {
    enabled?: boolean;
    interval?: number;
    multiple?: number;
}

export interface PolicyBGPNeighborRouteFiltering {
    addressFamily: string;
    enabled?: boolean;
    inRouteFilter?: string;
    maximumRoutes?: number;
    outRouteFilter?: string;
}

export interface PolicyBGPNeighborTag {
    scope?: string;
    tag?: string;
}

export interface PolicyContextProfileAppId {
    description?: string;
    isAlgType: boolean;
    subAttribute?: outputs.PolicyContextProfileAppIdSubAttribute;
    values: string[];
}

export interface PolicyContextProfileAppIdSubAttribute {
    cifsSmbVersions?: string[];
    tlsCipherSuites?: string[];
    tlsVersions?: string[];
}

export interface PolicyContextProfileDomainName {
    description?: string;
    values: string[];
}

export interface PolicyContextProfileTag {
    scope?: string;
    tag?: string;
}

export interface PolicyContextProfileUrlCategory {
    description?: string;
    values: string[];
}

export interface PolicyDHCPRelayTag {
    scope?: string;
    tag?: string;
}

export interface PolicyDHCPServerTag {
    scope?: string;
    tag?: string;
}

export interface PolicyGatewayPolicyRule {
    action?: string;
    description?: string;
    destinationGroups?: string[];
    destinationsExcluded?: boolean;
    direction?: string;
    disabled?: boolean;
    displayName: string;
    ipVersion?: string;
    logLabel?: string;
    logged?: boolean;
    notes?: string;
    nsxId: string;
    profiles?: string[];
    revision: number;
    ruleId: number;
    scopes: string[];
    sequenceNumber: number;
    services?: string[];
    sourceGroups?: string[];
    sourcesExcluded?: boolean;
    tags?: outputs.PolicyGatewayPolicyRuleTag[];
}

export interface PolicyGatewayPolicyRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicyGatewayPolicyTag {
    scope?: string;
    tag?: string;
}

export interface PolicyGatewayPrefixListPrefix {
    action?: string;
    ge?: number;
    le?: number;
    network?: string;
}

export interface PolicyGatewayPrefixListTag {
    scope?: string;
    tag?: string;
}

export interface PolicyGroupConjunction {
    operator: string;
}

export interface PolicyGroupCriteria {
    conditions?: outputs.PolicyGroupCriteriaCondition[];
    ipaddressExpression?: outputs.PolicyGroupCriteriaIpaddressExpression;
    macaddressExpression?: outputs.PolicyGroupCriteriaMacaddressExpression;
    pathExpression?: outputs.PolicyGroupCriteriaPathExpression;
}

export interface PolicyGroupCriteriaCondition {
    key: string;
    memberType: string;
    operator: string;
    value: string;
}

export interface PolicyGroupCriteriaIpaddressExpression {
    ipAddresses: string[];
}

export interface PolicyGroupCriteriaMacaddressExpression {
    macAddresses: string[];
}

export interface PolicyGroupCriteriaPathExpression {
    memberPaths: string[];
}

export interface PolicyGroupExtendedCriteria {
    identityGroups?: outputs.PolicyGroupExtendedCriteriaIdentityGroup[];
}

export interface PolicyGroupExtendedCriteriaIdentityGroup {
    distinguishedName?: string;
    domainBaseDistinguishedName?: string;
    sid?: string;
}

export interface PolicyGroupTag {
    scope?: string;
    tag?: string;
}

export interface PolicyIPAddressAllocationTag {
    scope?: string;
    tag?: string;
}

export interface PolicyIPBlockTag {
    scope?: string;
    tag?: string;
}

export interface PolicyIPPoolBlockSubnetTag {
    scope?: string;
    tag?: string;
}

export interface PolicyIPPoolStaticSubnetAllocationRange {
    end: string;
    start: string;
}

export interface PolicyIPPoolStaticSubnetTag {
    scope?: string;
    tag?: string;
}

export interface PolicyIPPoolTag {
    scope?: string;
    tag?: string;
}

export interface PolicyLBPoolMember {
    adminState?: string;
    backupMember?: boolean;
    displayName: string;
    ipAddress: string;
    maxConcurrentConnections?: number;
    port?: string;
    weight?: number;
}

export interface PolicyLBPoolMemberGroup {
    allowIpv4?: boolean;
    allowIpv6?: boolean;
    groupPath: string;
    maxIpListSize?: number;
    port?: string;
}

export interface PolicyLBPoolSnat {
    ipPoolAddresses?: string[];
    type?: string;
}

export interface PolicyLBPoolTag {
    scope?: string;
    tag?: string;
}

export interface PolicyLBServiceTag {
    scope?: string;
    tag?: string;
}

export interface PolicyLBVirtualServerAccessListControl {
    action: string;
    enabled?: boolean;
    groupPath: string;
}

export interface PolicyLBVirtualServerClientSsl {
    caPaths?: string[];
    certificateChainDepth?: number;
    clientAuth?: string;
    crlPaths?: string[];
    defaultCertificatePath: string;
    sniPaths?: string[];
    sslProfilePath?: string;
}

export interface PolicyLBVirtualServerServerSsl {
    caPaths?: string[];
    certificateChainDepth?: number;
    clientCertificatePath?: string;
    crlPaths?: string[];
    serverAuth?: string;
    sslProfilePath?: string;
}

export interface PolicyLBVirtualServerTag {
    scope?: string;
    tag?: string;
}

export interface PolicyNatRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicyPredefinedGatewayPolicyDefaultRule {
    action?: string;
    description: string;
    logLabel?: string;
    logged?: boolean;
    nsxId: string;
    path: string;
    revision: number;
    scope: string;
    sequenceNumber: number;
    tags?: outputs.PolicyPredefinedGatewayPolicyDefaultRuleTag[];
}

export interface PolicyPredefinedGatewayPolicyDefaultRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicyPredefinedGatewayPolicyRule {
    action?: string;
    description?: string;
    destinationGroups?: string[];
    destinationsExcluded?: boolean;
    direction?: string;
    disabled?: boolean;
    displayName: string;
    ipVersion?: string;
    logLabel?: string;
    logged?: boolean;
    notes?: string;
    nsxId: string;
    profiles?: string[];
    revision: number;
    ruleId: number;
    scopes: string[];
    sequenceNumber: number;
    services?: string[];
    sourceGroups?: string[];
    sourcesExcluded?: boolean;
    tags?: outputs.PolicyPredefinedGatewayPolicyRuleTag[];
}

export interface PolicyPredefinedGatewayPolicyRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicyPredefinedGatewayPolicyTag {
    scope?: string;
    tag?: string;
}

export interface PolicyPredefinedSecurityPolicyDefaultRule {
    action?: string;
    description: string;
    logLabel?: string;
    logged?: boolean;
    nsxId: string;
    path: string;
    revision: number;
    scope: string;
    sequenceNumber: number;
    tags?: outputs.PolicyPredefinedSecurityPolicyDefaultRuleTag[];
}

export interface PolicyPredefinedSecurityPolicyDefaultRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicyPredefinedSecurityPolicyRule {
    action?: string;
    description?: string;
    destinationGroups?: string[];
    destinationsExcluded?: boolean;
    direction?: string;
    disabled?: boolean;
    displayName: string;
    ipVersion?: string;
    logLabel?: string;
    logged?: boolean;
    notes?: string;
    nsxId: string;
    profiles?: string[];
    revision: number;
    ruleId: number;
    scopes?: string[];
    sequenceNumber: number;
    services?: string[];
    sourceGroups?: string[];
    sourcesExcluded?: boolean;
    tags?: outputs.PolicyPredefinedSecurityPolicyRuleTag[];
}

export interface PolicyPredefinedSecurityPolicyRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicyPredefinedSecurityPolicyTag {
    scope?: string;
    tag?: string;
}

export interface PolicySecurityPolicyRule {
    action?: string;
    description?: string;
    destinationGroups?: string[];
    destinationsExcluded?: boolean;
    direction?: string;
    disabled?: boolean;
    displayName: string;
    ipVersion?: string;
    logLabel?: string;
    logged?: boolean;
    notes?: string;
    nsxId: string;
    profiles?: string[];
    revision: number;
    ruleId: number;
    scopes?: string[];
    sequenceNumber: number;
    services?: string[];
    sourceGroups?: string[];
    sourcesExcluded?: boolean;
    tags?: outputs.PolicySecurityPolicyRuleTag[];
}

export interface PolicySecurityPolicyRuleTag {
    scope?: string;
    tag?: string;
}

export interface PolicySecurityPolicyTag {
    scope?: string;
    tag?: string;
}

export interface PolicySegmentAdvancedConfig {
    addressPoolPath?: string;
    connectivity?: string;
    hybrid?: boolean;
    localEgress?: boolean;
    uplinkTeamingPolicy?: string;
}

export interface PolicySegmentDiscoveryProfile {
    bindingMapPath: string;
    ipDiscoveryProfilePath?: string;
    macDiscoveryProfilePath?: string;
    revision: number;
}

export interface PolicySegmentL2Extension {
    l2vpnPaths?: string[];
    tunnelId?: number;
}

export interface PolicySegmentQosProfile {
    bindingMapPath: string;
    qosProfilePath: string;
    revision: number;
}

export interface PolicySegmentSecurityProfile {
    bindingMapPath: string;
    revision: number;
    securityProfilePath?: string;
    spoofguardProfilePath?: string;
}

export interface PolicySegmentSubnet {
    cidr: string;
    dhcpRanges?: string[];
    dhcpV4Config?: outputs.PolicySegmentSubnetDhcpV4Config;
    dhcpV6Config?: outputs.PolicySegmentSubnetDhcpV6Config;
    network: string;
}

export interface PolicySegmentSubnetDhcpV4Config {
    dhcpGenericOptions?: outputs.PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption[];
    dhcpOption121s?: outputs.PolicySegmentSubnetDhcpV4ConfigDhcpOption121[];
    dnsServers?: string[];
    leaseTime?: number;
    serverAddress?: string;
}

export interface PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption {
    code: number;
    values: string[];
}

export interface PolicySegmentSubnetDhcpV4ConfigDhcpOption121 {
    network: string;
    nextHop: string;
}

export interface PolicySegmentSubnetDhcpV6Config {
    dnsServers?: string[];
    domainNames?: string[];
    excludedRanges?: outputs.PolicySegmentSubnetDhcpV6ConfigExcludedRange[];
    leaseTime?: number;
    preferredTime?: number;
    serverAddress?: string;
    sntpServers?: string[];
}

export interface PolicySegmentSubnetDhcpV6ConfigExcludedRange {
    end: string;
    start: string;
}

export interface PolicySegmentTag {
    scope?: string;
    tag?: string;
}

export interface PolicyServiceAlgorithmEntry {
    algorithm: string;
    description?: string;
    destinationPort: string;
    displayName?: string;
    sourcePorts?: string[];
}

export interface PolicyServiceEtherTypeEntry {
    description?: string;
    displayName?: string;
    etherType: number;
}

export interface PolicyServiceIcmpEntry {
    description?: string;
    displayName?: string;
    icmpCode?: string;
    icmpType?: string;
    protocol: string;
}

export interface PolicyServiceIgmpEntry {
    description?: string;
    displayName?: string;
}

export interface PolicyServiceIpProtocolEntry {
    description?: string;
    displayName?: string;
    protocol: number;
}

export interface PolicyServiceL4PortSetEntry {
    description?: string;
    destinationPorts?: string[];
    displayName?: string;
    protocol: string;
    sourcePorts?: string[];
}

export interface PolicyServiceTag {
    scope?: string;
    tag?: string;
}

export interface PolicyStaticRouteNextHop {
    adminDistance?: number;
    interface?: string;
    ipAddress: string;
}

export interface PolicyStaticRouteTag {
    scope?: string;
    tag?: string;
}

export interface PolicyTier0GatewayBgpConfig {
    ecmp?: boolean;
    enabled?: boolean;
    gracefulRestartMode?: string;
    gracefulRestartStaleRouteTimer?: number;
    gracefulRestartTimer?: number;
    interSrIbgp?: boolean;
    localAsNum?: string;
    multipathRelax?: boolean;
    path: string;
    revision: number;
    routeAggregations?: outputs.PolicyTier0GatewayBgpConfigRouteAggregation[];
    tags?: outputs.PolicyTier0GatewayBgpConfigTag[];
}

export interface PolicyTier0GatewayBgpConfigRouteAggregation {
    prefix?: string;
    summaryOnly?: boolean;
}

export interface PolicyTier0GatewayBgpConfigTag {
    scope?: string;
    tag?: string;
}

export interface PolicyTier0GatewayHAVIPConfigConfig {
    enabled?: boolean;
    externalInterfacePaths: string[];
    vipSubnets: string[];
}

export interface PolicyTier0GatewayInterfaceTag {
    scope?: string;
    tag?: string;
}

export interface PolicyTier0GatewayIntersiteConfig {
    fallbackSitePaths?: string[];
    primarySitePath?: string;
    transitSubnet: string;
}

export interface PolicyTier0GatewayLocaleService {
    edgeClusterPath: string;
    path: string;
    preferredEdgePaths?: string[];
    redistributionConfig?: outputs.PolicyTier0GatewayLocaleServiceRedistributionConfig;
    revision: number;
}

export interface PolicyTier0GatewayLocaleServiceRedistributionConfig {
    enabled?: boolean;
    rules?: outputs.PolicyTier0GatewayLocaleServiceRedistributionConfigRule[];
}

export interface PolicyTier0GatewayLocaleServiceRedistributionConfigRule {
    name?: string;
    routeMapPath?: string;
    types?: string[];
}

export interface PolicyTier0GatewayRedistributionConfig {
    enabled?: boolean;
    rules?: outputs.PolicyTier0GatewayRedistributionConfigRule[];
}

export interface PolicyTier0GatewayRedistributionConfigRule {
    name?: string;
    routeMapPath?: string;
    types?: string[];
}

export interface PolicyTier0GatewayTag {
    scope?: string;
    tag?: string;
}

export interface PolicyTier0GatewayVrfConfig {
    evpnTransitVni?: number;
    gatewayPath: string;
    path: string;
    routeDistinguisher?: string;
    routeTarget?: outputs.PolicyTier0GatewayVrfConfigRouteTarget;
    tags?: outputs.PolicyTier0GatewayVrfConfigTag[];
}

export interface PolicyTier0GatewayVrfConfigRouteTarget {
    addressFamily?: string;
    autoMode?: boolean;
    exportTargets?: string[];
    importTargets?: string[];
}

export interface PolicyTier0GatewayVrfConfigTag {
    scope?: string;
    tag?: string;
}

export interface PolicyTier1GatewayInterfaceTag {
    scope?: string;
    tag?: string;
}

export interface PolicyTier1GatewayIntersiteConfig {
    fallbackSitePaths?: string[];
    primarySitePath?: string;
    transitSubnet: string;
}

export interface PolicyTier1GatewayLocaleService {
    edgeClusterPath: string;
    path: string;
    preferredEdgePaths?: string[];
    revision: number;
}

export interface PolicyTier1GatewayRouteAdvertisementRule {
    action?: string;
    name: string;
    prefixOperator?: string;
    routeAdvertisementTypes?: string[];
    subnets: string[];
}

export interface PolicyTier1GatewayTag {
    scope?: string;
    tag?: string;
}

export interface PolicyVMTagsPort {
    segmentPath: string;
    tags?: outputs.PolicyVMTagsPortTag[];
}

export interface PolicyVMTagsPortTag {
    scope?: string;
    tag?: string;
}

export interface PolicyVMTagsTag {
    scope?: string;
    tag?: string;
}

export interface PolicyVlanSegmentAdvancedConfig {
    addressPoolPath?: string;
    connectivity?: string;
    hybrid?: boolean;
    localEgress?: boolean;
    uplinkTeamingPolicy?: string;
}

export interface PolicyVlanSegmentDiscoveryProfile {
    bindingMapPath: string;
    ipDiscoveryProfilePath?: string;
    macDiscoveryProfilePath?: string;
    revision: number;
}

export interface PolicyVlanSegmentL2Extension {
    l2vpnPaths?: string[];
    tunnelId?: number;
}

export interface PolicyVlanSegmentQosProfile {
    bindingMapPath: string;
    qosProfilePath: string;
    revision: number;
}

export interface PolicyVlanSegmentSecurityProfile {
    bindingMapPath: string;
    revision: number;
    securityProfilePath?: string;
    spoofguardProfilePath?: string;
}

export interface PolicyVlanSegmentSubnet {
    cidr: string;
    dhcpRanges?: string[];
    dhcpV4Config?: outputs.PolicyVlanSegmentSubnetDhcpV4Config;
    dhcpV6Config?: outputs.PolicyVlanSegmentSubnetDhcpV6Config;
    network: string;
}

export interface PolicyVlanSegmentSubnetDhcpV4Config {
    dhcpGenericOptions?: outputs.PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption[];
    dhcpOption121s?: outputs.PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121[];
    dnsServers?: string[];
    leaseTime?: number;
    serverAddress?: string;
}

export interface PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption {
    code: number;
    values: string[];
}

export interface PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121 {
    network: string;
    nextHop: string;
}

export interface PolicyVlanSegmentSubnetDhcpV6Config {
    dnsServers?: string[];
    domainNames?: string[];
    excludedRanges?: outputs.PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange[];
    leaseTime?: number;
    preferredTime?: number;
    serverAddress?: string;
    sntpServers?: string[];
}

export interface PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange {
    end: string;
    start: string;
}

export interface PolicyVlanSegmentTag {
    scope?: string;
    tag?: string;
}

export interface QOSSwitchingProfileEgressRateShaper {
    averageBwMbps?: number;
    burstSize?: number;
    enabled?: boolean;
    peakBwMbps?: number;
}

export interface QOSSwitchingProfileIngressBroadcastRateShaper {
    averageBwKbps?: number;
    burstSize?: number;
    enabled?: boolean;
    peakBwKbps?: number;
}

export interface QOSSwitchingProfileIngressRateShaper {
    averageBwMbps?: number;
    burstSize?: number;
    enabled?: boolean;
    peakBwMbps?: number;
}

export interface QOSSwitchingProfileTag {
    scope?: string;
    tag?: string;
}

export interface SpoofguardSwitchingProfileTag {
    scope?: string;
    tag?: string;
}

export interface StaticRouteNextHop {
    administrativeDistance?: number;
    bfdEnabled: boolean;
    blackholeAction: string;
    ipAddress?: string;
    logicalRouterPortId?: string;
}

export interface StaticRouteTag {
    scope?: string;
    tag?: string;
}

export interface SwitchSecuritySwitchingProfileRateLimits {
    enabled?: boolean;
    rxBroadcast?: number;
    rxMulticast?: number;
    txBroadcast?: number;
    txMulticast?: number;
}

export interface SwitchSecuritySwitchingProfileTag {
    scope?: string;
    tag?: string;
}

export interface VMTagsLogicalPortTag {
    scope?: string;
    tag?: string;
}

export interface VMTagsTag {
    scope?: string;
    tag?: string;
}

export interface VlanLogicalSwitchAddressBinding {
    ipAddress?: string;
    macAddress?: string;
    vlan?: number;
}

export interface VlanLogicalSwitchSwitchingProfileId {
    key: string;
    value: string;
}

export interface VlanLogicalSwitchTag {
    scope?: string;
    tag?: string;
}
