# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

__config__ = pulumi.Config('nsxt')

allow_unverified_ssl = __config__.get('allowUnverifiedSsl') or utilities.get_env_bool('NSXT_ALLOW_UNVERIFIED_SSL')

ca_file = __config__.get('caFile') or utilities.get_env('NSXT_CA_FILE')

client_auth_cert_file = __config__.get('clientAuthCertFile') or utilities.get_env('NSXT_CLIENT_AUTH_CERT_FILE')

client_auth_key_file = __config__.get('clientAuthKeyFile') or utilities.get_env('NSXT_CLIENT_AUTH_KEY_FILE')

enforcement_point = __config__.get('enforcementPoint') or utilities.get_env('NSXT_POLICY_ENFORCEMENT_POINT')
"""
Enforcement Point for NSXT Policy
"""

global_manager = __config__.get('globalManager') or utilities.get_env_bool('NSXT_GLOBAL_MANAGER')
"""
Is this a policy global manager endpoint
"""

host = __config__.get('host') or utilities.get_env('NSXT_MANAGER_HOST')
"""
The hostname or IP address of the NSX manager.
"""

max_retries = __config__.get('maxRetries') or utilities.get_env_int('NSXT_MAX_RETRIES')
"""
Maximum number of HTTP client retries
"""

password = __config__.get('password') or utilities.get_env('NSXT_PASSWORD')

remote_auth = __config__.get('remoteAuth') or utilities.get_env_bool('NSXT_REMOTE_AUTH')

retry_max_delay = __config__.get('retryMaxDelay') or utilities.get_env_int('NSXT_RETRY_MAX_DELAY')
"""
Maximum delay in milliseconds between retries of a request
"""

retry_min_delay = __config__.get('retryMinDelay') or utilities.get_env_int('NSXT_RETRY_MIN_DELAY')
"""
Minimum delay in milliseconds between retries of a request
"""

retry_on_status_codes = __config__.get('retryOnStatusCodes')
"""
HTTP replies status codes to retry on
"""

tolerate_partial_success = __config__.get('toleratePartialSuccess') or utilities.get_env_bool('NSXT_TOLERATE_PARTIAL_SUCCESS')
"""
Treat partial success status as success
"""

username = __config__.get('username') or utilities.get_env('NSXT_USERNAME')

vmc_auth_host = __config__.get('vmcAuthHost') or utilities.get_env('NSXT_VMC_AUTH_HOST')
"""
URL for VMC authorization service (CSP)
"""

vmc_token = __config__.get('vmcToken') or utilities.get_env('NSXT_VMC_TOKEN')
"""
Long-living API token for VMC authorization
"""

