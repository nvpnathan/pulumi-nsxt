# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetEdgeClusterResult:
    """
    A collection of values returned by getEdgeCluster.
    """
    def __init__(__self__, deployment_type=None, description=None, display_name=None, id=None, member_node_type=None):
        if deployment_type and not isinstance(deployment_type, str):
            raise TypeError("Expected argument 'deployment_type' to be a str")
        __self__.deployment_type = deployment_type
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        if member_node_type and not isinstance(member_node_type, str):
            raise TypeError("Expected argument 'member_node_type' to be a str")
        __self__.member_node_type = member_node_type
class AwaitableGetEdgeClusterResult(GetEdgeClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEdgeClusterResult(
            deployment_type=self.deployment_type,
            description=self.description,
            display_name=self.display_name,
            id=self.id,
            member_node_type=self.member_node_type)

def get_edge_cluster(deployment_type=None,description=None,display_name=None,id=None,member_node_type=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['deploymentType'] = deployment_type
    __args__['description'] = description
    __args__['displayName'] = display_name
    __args__['id'] = id
    __args__['memberNodeType'] = member_node_type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('nsxt:index/getEdgeCluster:getEdgeCluster', __args__, opts=opts).value

    return AwaitableGetEdgeClusterResult(
        deployment_type=__ret__.get('deploymentType'),
        description=__ret__.get('description'),
        display_name=__ret__.get('displayName'),
        id=__ret__.get('id'),
        member_node_type=__ret__.get('memberNodeType'))
