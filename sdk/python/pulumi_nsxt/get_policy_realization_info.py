# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetPolicyRealizationInfoResult:
    """
    A collection of values returned by getPolicyRealizationInfo.
    """
    def __init__(__self__, entity_type=None, id=None, path=None, realized_id=None, site_path=None, state=None):
        if entity_type and not isinstance(entity_type, str):
            raise TypeError("Expected argument 'entity_type' to be a str")
        __self__.entity_type = entity_type
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        __self__.path = path
        if realized_id and not isinstance(realized_id, str):
            raise TypeError("Expected argument 'realized_id' to be a str")
        __self__.realized_id = realized_id
        if site_path and not isinstance(site_path, str):
            raise TypeError("Expected argument 'site_path' to be a str")
        __self__.site_path = site_path
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
class AwaitableGetPolicyRealizationInfoResult(GetPolicyRealizationInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyRealizationInfoResult(
            entity_type=self.entity_type,
            id=self.id,
            path=self.path,
            realized_id=self.realized_id,
            site_path=self.site_path,
            state=self.state)

def get_policy_realization_info(entity_type=None,id=None,path=None,site_path=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['entityType'] = entity_type
    __args__['id'] = id
    __args__['path'] = path
    __args__['sitePath'] = site_path
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('nsxt:index/getPolicyRealizationInfo:getPolicyRealizationInfo', __args__, opts=opts).value

    return AwaitableGetPolicyRealizationInfoResult(
        entity_type=__ret__.get('entityType'),
        id=__ret__.get('id'),
        path=__ret__.get('path'),
        realized_id=__ret__.get('realizedId'),
        site_path=__ret__.get('sitePath'),
        state=__ret__.get('state'))
