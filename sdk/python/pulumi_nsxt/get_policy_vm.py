# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetPolicyVMResult:
    """
    A collection of values returned by getPolicyVM.
    """
    def __init__(__self__, bios_id=None, description=None, display_name=None, external_id=None, id=None, instance_id=None):
        if bios_id and not isinstance(bios_id, str):
            raise TypeError("Expected argument 'bios_id' to be a str")
        __self__.bios_id = bios_id
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        __self__.display_name = display_name
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        __self__.external_id = external_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        __self__.instance_id = instance_id
class AwaitableGetPolicyVMResult(GetPolicyVMResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyVMResult(
            bios_id=self.bios_id,
            description=self.description,
            display_name=self.display_name,
            external_id=self.external_id,
            id=self.id,
            instance_id=self.instance_id)

def get_policy_vm(bios_id=None,description=None,display_name=None,external_id=None,instance_id=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['biosId'] = bios_id
    __args__['description'] = description
    __args__['displayName'] = display_name
    __args__['externalId'] = external_id
    __args__['instanceId'] = instance_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('nsxt:index/getPolicyVM:getPolicyVM', __args__, opts=opts).value

    return AwaitableGetPolicyVMResult(
        bios_id=__ret__.get('biosId'),
        description=__ret__.get('description'),
        display_name=__ret__.get('displayName'),
        external_id=__ret__.get('externalId'),
        id=__ret__.get('id'),
        instance_id=__ret__.get('instanceId'))
