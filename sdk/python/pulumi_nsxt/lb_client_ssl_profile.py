# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LBClientSSLProfile(pulumi.CustomResource):
    ciphers: pulumi.Output[list]
    """
    Supported SSL cipher list
    """
    description: pulumi.Output[str]
    """
    Description of this resource
    """
    display_name: pulumi.Output[str]
    """
    The display name of this resource. Defaults to ID if not set
    """
    is_secure: pulumi.Output[bool]
    """
    This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or
    protocols is insecure
    """
    prefer_server_ciphers: pulumi.Output[bool]
    """
    Allow server to override the client's preference
    """
    protocols: pulumi.Output[list]
    """
    SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but
    disabled by default
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    session_cache_enabled: pulumi.Output[bool]
    """
    Reuse previously negotiated security parameters during handshake
    """
    session_cache_timeout: pulumi.Output[float]
    """
    For how long the SSL session parameters can be reused
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, ciphers=None, description=None, display_name=None, prefer_server_ciphers=None, protocols=None, session_cache_enabled=None, session_cache_timeout=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a LBClientSSLProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] ciphers: Supported SSL cipher list
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[bool] prefer_server_ciphers: Allow server to override the client's preference
        :param pulumi.Input[list] protocols: SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but
               disabled by default
        :param pulumi.Input[bool] session_cache_enabled: Reuse previously negotiated security parameters during handshake
        :param pulumi.Input[float] session_cache_timeout: For how long the SSL session parameters can be reused
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['ciphers'] = ciphers
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['prefer_server_ciphers'] = prefer_server_ciphers
            __props__['protocols'] = protocols
            __props__['session_cache_enabled'] = session_cache_enabled
            __props__['session_cache_timeout'] = session_cache_timeout
            __props__['tags'] = tags
            __props__['is_secure'] = None
            __props__['revision'] = None
        super(LBClientSSLProfile, __self__).__init__(
            'nsxt:index/lBClientSSLProfile:LBClientSSLProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, ciphers=None, description=None, display_name=None, is_secure=None, prefer_server_ciphers=None, protocols=None, revision=None, session_cache_enabled=None, session_cache_timeout=None, tags=None):
        """
        Get an existing LBClientSSLProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] ciphers: Supported SSL cipher list
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[bool] is_secure: This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or
               protocols is insecure
        :param pulumi.Input[bool] prefer_server_ciphers: Allow server to override the client's preference
        :param pulumi.Input[list] protocols: SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but
               disabled by default
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[bool] session_cache_enabled: Reuse previously negotiated security parameters during handshake
        :param pulumi.Input[float] session_cache_timeout: For how long the SSL session parameters can be reused
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["ciphers"] = ciphers
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["is_secure"] = is_secure
        __props__["prefer_server_ciphers"] = prefer_server_ciphers
        __props__["protocols"] = protocols
        __props__["revision"] = revision
        __props__["session_cache_enabled"] = session_cache_enabled
        __props__["session_cache_timeout"] = session_cache_timeout
        __props__["tags"] = tags
        return LBClientSSLProfile(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
