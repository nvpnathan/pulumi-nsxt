# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LBPool(pulumi.CustomResource):
    active_monitor_id: pulumi.Output[str]
    """
    Active health monitor Id. If one is not set, the active healthchecks will be disabled
    """
    algorithm: pulumi.Output[str]
    """
    Load balancing algorithm controls how the incoming connections are distributed among the members
    """
    description: pulumi.Output[str]
    """
    Description of this resource
    """
    display_name: pulumi.Output[str]
    """
    The display name of this resource. Defaults to ID if not set
    """
    member_group: pulumi.Output[dict]
    """
    Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified

      * `groupingObject` (`dict`)
        * `isValid` (`bool`)
        * `targetDisplayName` (`str`)
        * `targetId` (`str`)
        * `targetType` (`str`)

      * `ipVersionFilter` (`str`)
      * `limitIpListSize` (`bool`)
      * `maxIpListSize` (`float`)
      * `port` (`float`)
    """
    members: pulumi.Output[list]
    """
    List of server pool members. Each pool member is identified, typically, by an IP address and a port

      * `admin_state` (`str`)
      * `backupMember` (`bool`)
      * `display_name` (`str`)
      * `ip_address` (`str`)
      * `max_concurrent_connections` (`float`)
      * `port` (`str`)
      * `weight` (`float`)
    """
    min_active_members: pulumi.Output[float]
    """
    The minimum number of members for the pool to be considered active
    """
    passive_monitor_id: pulumi.Output[str]
    """
    Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    snat_translation: pulumi.Output[dict]
    """
    SNAT translation configuration

      * `ip` (`str`)
      * `type` (`str`)
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    tcp_multiplexing_enabled: pulumi.Output[bool]
    """
    TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
    multiple client requests from different client TCP connections
    """
    tcp_multiplexing_number: pulumi.Output[float]
    """
    The maximum number of TCP connections per pool that are idly kept alive for sending future client requests
    """
    def __init__(__self__, resource_name, opts=None, active_monitor_id=None, algorithm=None, description=None, display_name=None, member_group=None, members=None, min_active_members=None, passive_monitor_id=None, snat_translation=None, tags=None, tcp_multiplexing_enabled=None, tcp_multiplexing_number=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a LBPool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_monitor_id: Active health monitor Id. If one is not set, the active healthchecks will be disabled
        :param pulumi.Input[str] algorithm: Load balancing algorithm controls how the incoming connections are distributed among the members
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[dict] member_group: Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
        :param pulumi.Input[list] members: List of server pool members. Each pool member is identified, typically, by an IP address and a port
        :param pulumi.Input[float] min_active_members: The minimum number of members for the pool to be considered active
        :param pulumi.Input[str] passive_monitor_id: Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
        :param pulumi.Input[dict] snat_translation: SNAT translation configuration
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user
        :param pulumi.Input[bool] tcp_multiplexing_enabled: TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
               multiple client requests from different client TCP connections
        :param pulumi.Input[float] tcp_multiplexing_number: The maximum number of TCP connections per pool that are idly kept alive for sending future client requests

        The **member_group** object supports the following:

          * `groupingObject` (`pulumi.Input[dict]`)
            * `isValid` (`pulumi.Input[bool]`)
            * `targetDisplayName` (`pulumi.Input[str]`)
            * `targetId` (`pulumi.Input[str]`)
            * `targetType` (`pulumi.Input[str]`)

          * `ipVersionFilter` (`pulumi.Input[str]`)
          * `limitIpListSize` (`pulumi.Input[bool]`)
          * `maxIpListSize` (`pulumi.Input[float]`)
          * `port` (`pulumi.Input[float]`)

        The **members** object supports the following:

          * `admin_state` (`pulumi.Input[str]`)
          * `backupMember` (`pulumi.Input[bool]`)
          * `display_name` (`pulumi.Input[str]`)
          * `ip_address` (`pulumi.Input[str]`)
          * `max_concurrent_connections` (`pulumi.Input[float]`)
          * `port` (`pulumi.Input[str]`)
          * `weight` (`pulumi.Input[float]`)

        The **snat_translation** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['active_monitor_id'] = active_monitor_id
            __props__['algorithm'] = algorithm
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['member_group'] = member_group
            __props__['members'] = members
            __props__['min_active_members'] = min_active_members
            __props__['passive_monitor_id'] = passive_monitor_id
            __props__['snat_translation'] = snat_translation
            __props__['tags'] = tags
            __props__['tcp_multiplexing_enabled'] = tcp_multiplexing_enabled
            __props__['tcp_multiplexing_number'] = tcp_multiplexing_number
            __props__['revision'] = None
        super(LBPool, __self__).__init__(
            'nsxt:index/lBPool:LBPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, active_monitor_id=None, algorithm=None, description=None, display_name=None, member_group=None, members=None, min_active_members=None, passive_monitor_id=None, revision=None, snat_translation=None, tags=None, tcp_multiplexing_enabled=None, tcp_multiplexing_number=None):
        """
        Get an existing LBPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_monitor_id: Active health monitor Id. If one is not set, the active healthchecks will be disabled
        :param pulumi.Input[str] algorithm: Load balancing algorithm controls how the incoming connections are distributed among the members
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[dict] member_group: Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified
        :param pulumi.Input[list] members: List of server pool members. Each pool member is identified, typically, by an IP address and a port
        :param pulumi.Input[float] min_active_members: The minimum number of members for the pool to be considered active
        :param pulumi.Input[str] passive_monitor_id: Passive health monitor Id. If one is not set, the passive healthchecks will be disabled
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[dict] snat_translation: SNAT translation configuration
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user
        :param pulumi.Input[bool] tcp_multiplexing_enabled: TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending
               multiple client requests from different client TCP connections
        :param pulumi.Input[float] tcp_multiplexing_number: The maximum number of TCP connections per pool that are idly kept alive for sending future client requests

        The **member_group** object supports the following:

          * `groupingObject` (`pulumi.Input[dict]`)
            * `isValid` (`pulumi.Input[bool]`)
            * `targetDisplayName` (`pulumi.Input[str]`)
            * `targetId` (`pulumi.Input[str]`)
            * `targetType` (`pulumi.Input[str]`)

          * `ipVersionFilter` (`pulumi.Input[str]`)
          * `limitIpListSize` (`pulumi.Input[bool]`)
          * `maxIpListSize` (`pulumi.Input[float]`)
          * `port` (`pulumi.Input[float]`)

        The **members** object supports the following:

          * `admin_state` (`pulumi.Input[str]`)
          * `backupMember` (`pulumi.Input[bool]`)
          * `display_name` (`pulumi.Input[str]`)
          * `ip_address` (`pulumi.Input[str]`)
          * `max_concurrent_connections` (`pulumi.Input[float]`)
          * `port` (`pulumi.Input[str]`)
          * `weight` (`pulumi.Input[float]`)

        The **snat_translation** object supports the following:

          * `ip` (`pulumi.Input[str]`)
          * `type` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["active_monitor_id"] = active_monitor_id
        __props__["algorithm"] = algorithm
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["member_group"] = member_group
        __props__["members"] = members
        __props__["min_active_members"] = min_active_members
        __props__["passive_monitor_id"] = passive_monitor_id
        __props__["revision"] = revision
        __props__["snat_translation"] = snat_translation
        __props__["tags"] = tags
        __props__["tcp_multiplexing_enabled"] = tcp_multiplexing_enabled
        __props__["tcp_multiplexing_number"] = tcp_multiplexing_number
        return LBPool(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
