# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LBTCPVirtualServer(pulumi.CustomResource):
    access_log_enabled: pulumi.Output[bool]
    """
    Whether access log is enabled
    """
    application_profile_id: pulumi.Output[str]
    """
    The tcp application profile defines the application protocol characteristics
    """
    default_pool_member_ports: pulumi.Output[list]
    """
    Default pool member ports or port range
    """
    description: pulumi.Output[str]
    """
    Description of this resource
    """
    display_name: pulumi.Output[str]
    """
    The display name of this resource. Defaults to ID if not set
    """
    enabled: pulumi.Output[bool]
    """
    whether the virtual server is enabled
    """
    ip_address: pulumi.Output[str]
    """
    virtual server IP address
    """
    max_concurrent_connections: pulumi.Output[float]
    """
    If not specified, connections are unlimited
    """
    max_new_connection_rate: pulumi.Output[float]
    """
    If not specified, connection rate is unlimited
    """
    persistence_profile_id: pulumi.Output[str]
    """
    Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip
    persistence is supported.
    """
    pool_id: pulumi.Output[str]
    """
    Server pool for backend connections
    """
    ports: pulumi.Output[list]
    """
    Single port, multiple ports or port ranges
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    sorry_pool_id: pulumi.Output[str]
    """
    When load balancer can not select a backend server to serve the request in default pool, the request would be served by
    sorry server pool
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, access_log_enabled=None, application_profile_id=None, default_pool_member_ports=None, description=None, display_name=None, enabled=None, ip_address=None, max_concurrent_connections=None, max_new_connection_rate=None, persistence_profile_id=None, pool_id=None, ports=None, sorry_pool_id=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a LBTCPVirtualServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] access_log_enabled: Whether access log is enabled
        :param pulumi.Input[str] application_profile_id: The tcp application profile defines the application protocol characteristics
        :param pulumi.Input[list] default_pool_member_ports: Default pool member ports or port range
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[bool] enabled: whether the virtual server is enabled
        :param pulumi.Input[str] ip_address: virtual server IP address
        :param pulumi.Input[float] max_concurrent_connections: If not specified, connections are unlimited
        :param pulumi.Input[float] max_new_connection_rate: If not specified, connection rate is unlimited
        :param pulumi.Input[str] persistence_profile_id: Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip
               persistence is supported.
        :param pulumi.Input[str] pool_id: Server pool for backend connections
        :param pulumi.Input[list] ports: Single port, multiple ports or port ranges
        :param pulumi.Input[str] sorry_pool_id: When load balancer can not select a backend server to serve the request in default pool, the request would be served by
               sorry server pool
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['access_log_enabled'] = access_log_enabled
            if application_profile_id is None:
                raise TypeError("Missing required property 'application_profile_id'")
            __props__['application_profile_id'] = application_profile_id
            __props__['default_pool_member_ports'] = default_pool_member_ports
            __props__['description'] = description
            __props__['display_name'] = display_name
            __props__['enabled'] = enabled
            if ip_address is None:
                raise TypeError("Missing required property 'ip_address'")
            __props__['ip_address'] = ip_address
            __props__['max_concurrent_connections'] = max_concurrent_connections
            __props__['max_new_connection_rate'] = max_new_connection_rate
            __props__['persistence_profile_id'] = persistence_profile_id
            __props__['pool_id'] = pool_id
            if ports is None:
                raise TypeError("Missing required property 'ports'")
            __props__['ports'] = ports
            __props__['sorry_pool_id'] = sorry_pool_id
            __props__['tags'] = tags
            __props__['revision'] = None
        super(LBTCPVirtualServer, __self__).__init__(
            'nsxt:index/lBTCPVirtualServer:LBTCPVirtualServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, access_log_enabled=None, application_profile_id=None, default_pool_member_ports=None, description=None, display_name=None, enabled=None, ip_address=None, max_concurrent_connections=None, max_new_connection_rate=None, persistence_profile_id=None, pool_id=None, ports=None, revision=None, sorry_pool_id=None, tags=None):
        """
        Get an existing LBTCPVirtualServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] access_log_enabled: Whether access log is enabled
        :param pulumi.Input[str] application_profile_id: The tcp application profile defines the application protocol characteristics
        :param pulumi.Input[list] default_pool_member_ports: Default pool member ports or port range
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[bool] enabled: whether the virtual server is enabled
        :param pulumi.Input[str] ip_address: virtual server IP address
        :param pulumi.Input[float] max_concurrent_connections: If not specified, connections are unlimited
        :param pulumi.Input[float] max_new_connection_rate: If not specified, connection rate is unlimited
        :param pulumi.Input[str] persistence_profile_id: Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip
               persistence is supported.
        :param pulumi.Input[str] pool_id: Server pool for backend connections
        :param pulumi.Input[list] ports: Single port, multiple ports or port ranges
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[str] sorry_pool_id: When load balancer can not select a backend server to serve the request in default pool, the request would be served by
               sorry server pool
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["access_log_enabled"] = access_log_enabled
        __props__["application_profile_id"] = application_profile_id
        __props__["default_pool_member_ports"] = default_pool_member_ports
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["enabled"] = enabled
        __props__["ip_address"] = ip_address
        __props__["max_concurrent_connections"] = max_concurrent_connections
        __props__["max_new_connection_rate"] = max_new_connection_rate
        __props__["persistence_profile_id"] = persistence_profile_id
        __props__["pool_id"] = pool_id
        __props__["ports"] = ports
        __props__["revision"] = revision
        __props__["sorry_pool_id"] = sorry_pool_id
        __props__["tags"] = tags
        return LBTCPVirtualServer(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
