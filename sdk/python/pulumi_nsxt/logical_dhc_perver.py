# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LogicalDHCPerver(pulumi.CustomResource):
    attached_logical_port_id: pulumi.Output[str]
    """
    Id of attached logical port
    """
    description: pulumi.Output[str]
    """
    Description of this resource
    """
    dhcp_generic_options: pulumi.Output[list]
    """
    Generic DHCP options

      * `code` (`float`)
      * `values` (`list`)
    """
    dhcp_option121s: pulumi.Output[list]
    """
    DHCP classless static routes

      * `network` (`str`)
      * `nextHop` (`str`)
    """
    dhcp_profile_id: pulumi.Output[str]
    """
    DHCP profile uuid
    """
    dhcp_server_ip: pulumi.Output[str]
    """
    DHCP server ip in cidr format
    """
    display_name: pulumi.Output[str]
    """
    The display name of this resource. Defaults to ID if not set
    """
    dns_name_servers: pulumi.Output[list]
    """
    DNS IPs
    """
    domain_name: pulumi.Output[str]
    """
    Domain name
    """
    gateway_ip: pulumi.Output[str]
    """
    Gateway IP
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, description=None, dhcp_generic_options=None, dhcp_option121s=None, dhcp_profile_id=None, dhcp_server_ip=None, display_name=None, dns_name_servers=None, domain_name=None, gateway_ip=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a LogicalDHCPerver resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[list] dhcp_generic_options: Generic DHCP options
        :param pulumi.Input[list] dhcp_option121s: DHCP classless static routes
        :param pulumi.Input[str] dhcp_profile_id: DHCP profile uuid
        :param pulumi.Input[str] dhcp_server_ip: DHCP server ip in cidr format
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[list] dns_name_servers: DNS IPs
        :param pulumi.Input[str] domain_name: Domain name
        :param pulumi.Input[str] gateway_ip: Gateway IP
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **dhcp_generic_options** object supports the following:

          * `code` (`pulumi.Input[float]`)
          * `values` (`pulumi.Input[list]`)

        The **dhcp_option121s** object supports the following:

          * `network` (`pulumi.Input[str]`)
          * `nextHop` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['dhcp_generic_options'] = dhcp_generic_options
            __props__['dhcp_option121s'] = dhcp_option121s
            if dhcp_profile_id is None:
                raise TypeError("Missing required property 'dhcp_profile_id'")
            __props__['dhcp_profile_id'] = dhcp_profile_id
            if dhcp_server_ip is None:
                raise TypeError("Missing required property 'dhcp_server_ip'")
            __props__['dhcp_server_ip'] = dhcp_server_ip
            __props__['display_name'] = display_name
            __props__['dns_name_servers'] = dns_name_servers
            __props__['domain_name'] = domain_name
            __props__['gateway_ip'] = gateway_ip
            __props__['tags'] = tags
            __props__['attached_logical_port_id'] = None
            __props__['revision'] = None
        super(LogicalDHCPerver, __self__).__init__(
            'nsxt:index/logicalDHCPerver:LogicalDHCPerver',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, attached_logical_port_id=None, description=None, dhcp_generic_options=None, dhcp_option121s=None, dhcp_profile_id=None, dhcp_server_ip=None, display_name=None, dns_name_servers=None, domain_name=None, gateway_ip=None, revision=None, tags=None):
        """
        Get an existing LogicalDHCPerver resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attached_logical_port_id: Id of attached logical port
        :param pulumi.Input[str] description: Description of this resource
        :param pulumi.Input[list] dhcp_generic_options: Generic DHCP options
        :param pulumi.Input[list] dhcp_option121s: DHCP classless static routes
        :param pulumi.Input[str] dhcp_profile_id: DHCP profile uuid
        :param pulumi.Input[str] dhcp_server_ip: DHCP server ip in cidr format
        :param pulumi.Input[str] display_name: The display name of this resource. Defaults to ID if not set
        :param pulumi.Input[list] dns_name_servers: DNS IPs
        :param pulumi.Input[str] domain_name: Domain name
        :param pulumi.Input[str] gateway_ip: Gateway IP
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **dhcp_generic_options** object supports the following:

          * `code` (`pulumi.Input[float]`)
          * `values` (`pulumi.Input[list]`)

        The **dhcp_option121s** object supports the following:

          * `network` (`pulumi.Input[str]`)
          * `nextHop` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["attached_logical_port_id"] = attached_logical_port_id
        __props__["description"] = description
        __props__["dhcp_generic_options"] = dhcp_generic_options
        __props__["dhcp_option121s"] = dhcp_option121s
        __props__["dhcp_profile_id"] = dhcp_profile_id
        __props__["dhcp_server_ip"] = dhcp_server_ip
        __props__["display_name"] = display_name
        __props__["dns_name_servers"] = dns_name_servers
        __props__["domain_name"] = domain_name
        __props__["gateway_ip"] = gateway_ip
        __props__["revision"] = revision
        __props__["tags"] = tags
        return LogicalDHCPerver(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
