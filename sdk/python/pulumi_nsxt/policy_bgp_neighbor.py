# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class PolicyBGPNeighbor(pulumi.CustomResource):
    allow_as_in: pulumi.Output[bool]
    """
    Flag to enable allowas_in option for BGP neighbor
    """
    bfd_config: pulumi.Output[dict]
    """
    BFD configuration for failure detection

      * `enabled` (`bool`)
      * `interval` (`float`)
      * `multiple` (`float`)
    """
    bgp_path: pulumi.Output[str]
    """
    Policy path to the BGP for this neighbor
    """
    description: pulumi.Output[str]
    """
    Description for this resource
    """
    display_name: pulumi.Output[str]
    """
    Display name for this resource
    """
    graceful_restart_mode: pulumi.Output[str]
    """
    BGP Graceful Restart Configuration Mode
    """
    hold_down_time: pulumi.Output[float]
    """
    Wait time in seconds before declaring peer dead
    """
    keep_alive_time: pulumi.Output[float]
    """
    Interval between keep alive messages sent to peer
    """
    maximum_hop_limit: pulumi.Output[float]
    """
    Maximum number of hops allowed to reach BGP neighbor
    """
    neighbor_address: pulumi.Output[str]
    """
    Neighbor IP Address
    """
    nsx_id: pulumi.Output[str]
    """
    NSX ID for this resource
    """
    password: pulumi.Output[str]
    """
    Password for BGP neighbor authentication
    """
    path: pulumi.Output[str]
    """
    Policy path for this resource
    """
    remote_as_num: pulumi.Output[str]
    """
    ASN of the neighbor in ASPLAIN or ASDOT Format
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    route_filterings: pulumi.Output[list]
    """
    Enable address families and route filtering in each direction

      * `addressFamily` (`str`)
      * `enabled` (`bool`)
      * `inRouteFilter` (`str`)
      * `maximumRoutes` (`float`)
      * `outRouteFilter` (`str`)
    """
    source_addresses: pulumi.Output[list]
    """
    Source IP Addresses for BGP peering
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, allow_as_in=None, bfd_config=None, bgp_path=None, description=None, display_name=None, graceful_restart_mode=None, hold_down_time=None, keep_alive_time=None, maximum_hop_limit=None, neighbor_address=None, nsx_id=None, password=None, remote_as_num=None, route_filterings=None, source_addresses=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a PolicyBGPNeighbor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_as_in: Flag to enable allowas_in option for BGP neighbor
        :param pulumi.Input[dict] bfd_config: BFD configuration for failure detection
        :param pulumi.Input[str] bgp_path: Policy path to the BGP for this neighbor
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[str] graceful_restart_mode: BGP Graceful Restart Configuration Mode
        :param pulumi.Input[float] hold_down_time: Wait time in seconds before declaring peer dead
        :param pulumi.Input[float] keep_alive_time: Interval between keep alive messages sent to peer
        :param pulumi.Input[float] maximum_hop_limit: Maximum number of hops allowed to reach BGP neighbor
        :param pulumi.Input[str] neighbor_address: Neighbor IP Address
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] password: Password for BGP neighbor authentication
        :param pulumi.Input[str] remote_as_num: ASN of the neighbor in ASPLAIN or ASDOT Format
        :param pulumi.Input[list] route_filterings: Enable address families and route filtering in each direction
        :param pulumi.Input[list] source_addresses: Source IP Addresses for BGP peering
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **bfd_config** object supports the following:

          * `enabled` (`pulumi.Input[bool]`)
          * `interval` (`pulumi.Input[float]`)
          * `multiple` (`pulumi.Input[float]`)

        The **route_filterings** object supports the following:

          * `addressFamily` (`pulumi.Input[str]`)
          * `enabled` (`pulumi.Input[bool]`)
          * `inRouteFilter` (`pulumi.Input[str]`)
          * `maximumRoutes` (`pulumi.Input[float]`)
          * `outRouteFilter` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_as_in'] = allow_as_in
            __props__['bfd_config'] = bfd_config
            if bgp_path is None:
                raise TypeError("Missing required property 'bgp_path'")
            __props__['bgp_path'] = bgp_path
            __props__['description'] = description
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            __props__['graceful_restart_mode'] = graceful_restart_mode
            __props__['hold_down_time'] = hold_down_time
            __props__['keep_alive_time'] = keep_alive_time
            __props__['maximum_hop_limit'] = maximum_hop_limit
            if neighbor_address is None:
                raise TypeError("Missing required property 'neighbor_address'")
            __props__['neighbor_address'] = neighbor_address
            __props__['nsx_id'] = nsx_id
            __props__['password'] = password
            if remote_as_num is None:
                raise TypeError("Missing required property 'remote_as_num'")
            __props__['remote_as_num'] = remote_as_num
            __props__['route_filterings'] = route_filterings
            __props__['source_addresses'] = source_addresses
            __props__['tags'] = tags
            __props__['path'] = None
            __props__['revision'] = None
        super(PolicyBGPNeighbor, __self__).__init__(
            'nsxt:index/policyBGPNeighbor:PolicyBGPNeighbor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, allow_as_in=None, bfd_config=None, bgp_path=None, description=None, display_name=None, graceful_restart_mode=None, hold_down_time=None, keep_alive_time=None, maximum_hop_limit=None, neighbor_address=None, nsx_id=None, password=None, path=None, remote_as_num=None, revision=None, route_filterings=None, source_addresses=None, tags=None):
        """
        Get an existing PolicyBGPNeighbor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_as_in: Flag to enable allowas_in option for BGP neighbor
        :param pulumi.Input[dict] bfd_config: BFD configuration for failure detection
        :param pulumi.Input[str] bgp_path: Policy path to the BGP for this neighbor
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[str] graceful_restart_mode: BGP Graceful Restart Configuration Mode
        :param pulumi.Input[float] hold_down_time: Wait time in seconds before declaring peer dead
        :param pulumi.Input[float] keep_alive_time: Interval between keep alive messages sent to peer
        :param pulumi.Input[float] maximum_hop_limit: Maximum number of hops allowed to reach BGP neighbor
        :param pulumi.Input[str] neighbor_address: Neighbor IP Address
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] password: Password for BGP neighbor authentication
        :param pulumi.Input[str] path: Policy path for this resource
        :param pulumi.Input[str] remote_as_num: ASN of the neighbor in ASPLAIN or ASDOT Format
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[list] route_filterings: Enable address families and route filtering in each direction
        :param pulumi.Input[list] source_addresses: Source IP Addresses for BGP peering
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **bfd_config** object supports the following:

          * `enabled` (`pulumi.Input[bool]`)
          * `interval` (`pulumi.Input[float]`)
          * `multiple` (`pulumi.Input[float]`)

        The **route_filterings** object supports the following:

          * `addressFamily` (`pulumi.Input[str]`)
          * `enabled` (`pulumi.Input[bool]`)
          * `inRouteFilter` (`pulumi.Input[str]`)
          * `maximumRoutes` (`pulumi.Input[float]`)
          * `outRouteFilter` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_as_in"] = allow_as_in
        __props__["bfd_config"] = bfd_config
        __props__["bgp_path"] = bgp_path
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["graceful_restart_mode"] = graceful_restart_mode
        __props__["hold_down_time"] = hold_down_time
        __props__["keep_alive_time"] = keep_alive_time
        __props__["maximum_hop_limit"] = maximum_hop_limit
        __props__["neighbor_address"] = neighbor_address
        __props__["nsx_id"] = nsx_id
        __props__["password"] = password
        __props__["path"] = path
        __props__["remote_as_num"] = remote_as_num
        __props__["revision"] = revision
        __props__["route_filterings"] = route_filterings
        __props__["source_addresses"] = source_addresses
        __props__["tags"] = tags
        return PolicyBGPNeighbor(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
