# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class PolicyIPPoolStaticSubnet(pulumi.CustomResource):
    allocation_ranges: pulumi.Output[list]
    """
    A collection of IPv4 or IPv6 IP ranges

      * `end` (`str`)
      * `start` (`str`)
    """
    cidr: pulumi.Output[str]
    """
    Network address and prefix length
    """
    description: pulumi.Output[str]
    """
    Description for this resource
    """
    display_name: pulumi.Output[str]
    """
    Display name for this resource
    """
    dns_nameservers: pulumi.Output[list]
    """
    The collection of up to 3 DNS servers for the subnet
    """
    dns_suffix: pulumi.Output[str]
    """
    DNS suffix for the nameserver
    """
    gateway: pulumi.Output[str]
    """
    The default gateway address
    """
    nsx_id: pulumi.Output[str]
    """
    NSX ID for this resource
    """
    path: pulumi.Output[str]
    """
    Policy path for this resource
    """
    pool_path: pulumi.Output[str]
    """
    Policy path to the IP Pool for this Subnet
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, allocation_ranges=None, cidr=None, description=None, display_name=None, dns_nameservers=None, dns_suffix=None, gateway=None, nsx_id=None, pool_path=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a PolicyIPPoolStaticSubnet resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allocation_ranges: A collection of IPv4 or IPv6 IP ranges
        :param pulumi.Input[str] cidr: Network address and prefix length
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[list] dns_nameservers: The collection of up to 3 DNS servers for the subnet
        :param pulumi.Input[str] dns_suffix: DNS suffix for the nameserver
        :param pulumi.Input[str] gateway: The default gateway address
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] pool_path: Policy path to the IP Pool for this Subnet
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **allocation_ranges** object supports the following:

          * `end` (`pulumi.Input[str]`)
          * `start` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if allocation_ranges is None:
                raise TypeError("Missing required property 'allocation_ranges'")
            __props__['allocation_ranges'] = allocation_ranges
            if cidr is None:
                raise TypeError("Missing required property 'cidr'")
            __props__['cidr'] = cidr
            __props__['description'] = description
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            __props__['dns_nameservers'] = dns_nameservers
            __props__['dns_suffix'] = dns_suffix
            __props__['gateway'] = gateway
            __props__['nsx_id'] = nsx_id
            if pool_path is None:
                raise TypeError("Missing required property 'pool_path'")
            __props__['pool_path'] = pool_path
            __props__['tags'] = tags
            __props__['path'] = None
            __props__['revision'] = None
        super(PolicyIPPoolStaticSubnet, __self__).__init__(
            'nsxt:index/policyIPPoolStaticSubnet:PolicyIPPoolStaticSubnet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, allocation_ranges=None, cidr=None, description=None, display_name=None, dns_nameservers=None, dns_suffix=None, gateway=None, nsx_id=None, path=None, pool_path=None, revision=None, tags=None):
        """
        Get an existing PolicyIPPoolStaticSubnet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] allocation_ranges: A collection of IPv4 or IPv6 IP ranges
        :param pulumi.Input[str] cidr: Network address and prefix length
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[list] dns_nameservers: The collection of up to 3 DNS servers for the subnet
        :param pulumi.Input[str] dns_suffix: DNS suffix for the nameserver
        :param pulumi.Input[str] gateway: The default gateway address
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] path: Policy path for this resource
        :param pulumi.Input[str] pool_path: Policy path to the IP Pool for this Subnet
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **allocation_ranges** object supports the following:

          * `end` (`pulumi.Input[str]`)
          * `start` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allocation_ranges"] = allocation_ranges
        __props__["cidr"] = cidr
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["dns_nameservers"] = dns_nameservers
        __props__["dns_suffix"] = dns_suffix
        __props__["gateway"] = gateway
        __props__["nsx_id"] = nsx_id
        __props__["path"] = path
        __props__["pool_path"] = pool_path
        __props__["revision"] = revision
        __props__["tags"] = tags
        return PolicyIPPoolStaticSubnet(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
