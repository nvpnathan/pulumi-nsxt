# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class PolicyLBVirtualServer(pulumi.CustomResource):
    access_list_control: pulumi.Output[dict]
    """
    IP access list control for filtering the connections from clients

      * `action` (`str`)
      * `enabled` (`bool`)
      * `groupPath` (`str`)
    """
    access_log_enabled: pulumi.Output[bool]
    """
    If enabled, all connections/requests sent to virtual server are logged to the access log file
    """
    application_profile_path: pulumi.Output[str]
    """
    Application profile for this virtual server
    """
    client_ssl: pulumi.Output[dict]
    """
    This setting is used when load balancer terminates client SSL connection

      * `caPaths` (`list`)
      * `certificate_chain_depth` (`float`)
      * `clientAuth` (`str`)
      * `crlPaths` (`list`)
      * `defaultCertificatePath` (`str`)
      * `sniPaths` (`list`)
      * `sslProfilePath` (`str`)
    """
    default_pool_member_ports: pulumi.Output[list]
    """
    Default pool member ports when member port is not defined
    """
    description: pulumi.Output[str]
    """
    Description for this resource
    """
    display_name: pulumi.Output[str]
    """
    Display name for this resource
    """
    enabled: pulumi.Output[bool]
    """
    Flag to enable Virtual Server
    """
    ip_address: pulumi.Output[str]
    """
    Virtual Server IP address
    """
    log_significant_event_only: pulumi.Output[bool]
    """
    Flag to log significant events in access log, if access log is enabed
    """
    max_concurrent_connections: pulumi.Output[float]
    """
    To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
    """
    max_new_connection_rate: pulumi.Output[float]
    """
    To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
    """
    nsx_id: pulumi.Output[str]
    """
    NSX ID for this resource
    """
    path: pulumi.Output[str]
    """
    Policy path for this resource
    """
    persistence_profile_path: pulumi.Output[str]
    """
    Path to persistence profile allowing related client connections to be sent to the same backend server.
    """
    pool_path: pulumi.Output[str]
    """
    Path for Load Balancer Pool
    """
    ports: pulumi.Output[list]
    """
    Virtual Server ports
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    server_ssl: pulumi.Output[dict]
    """
    This setting is used when load balancer establishes connection to the backend server

      * `caPaths` (`list`)
      * `certificate_chain_depth` (`float`)
      * `clientCertificatePath` (`str`)
      * `crlPaths` (`list`)
      * `server_auth` (`str`)
      * `sslProfilePath` (`str`)
    """
    service_path: pulumi.Output[str]
    """
    Virtual Server can be associated with Load Balancer Service
    """
    sorry_pool_path: pulumi.Output[str]
    """
    When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    def __init__(__self__, resource_name, opts=None, access_list_control=None, access_log_enabled=None, application_profile_path=None, client_ssl=None, default_pool_member_ports=None, description=None, display_name=None, enabled=None, ip_address=None, log_significant_event_only=None, max_concurrent_connections=None, max_new_connection_rate=None, nsx_id=None, persistence_profile_path=None, pool_path=None, ports=None, server_ssl=None, service_path=None, sorry_pool_path=None, tags=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a PolicyLBVirtualServer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] access_list_control: IP access list control for filtering the connections from clients
        :param pulumi.Input[bool] access_log_enabled: If enabled, all connections/requests sent to virtual server are logged to the access log file
        :param pulumi.Input[str] application_profile_path: Application profile for this virtual server
        :param pulumi.Input[dict] client_ssl: This setting is used when load balancer terminates client SSL connection
        :param pulumi.Input[list] default_pool_member_ports: Default pool member ports when member port is not defined
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[bool] enabled: Flag to enable Virtual Server
        :param pulumi.Input[str] ip_address: Virtual Server IP address
        :param pulumi.Input[bool] log_significant_event_only: Flag to log significant events in access log, if access log is enabed
        :param pulumi.Input[float] max_concurrent_connections: To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
        :param pulumi.Input[float] max_new_connection_rate: To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] persistence_profile_path: Path to persistence profile allowing related client connections to be sent to the same backend server.
        :param pulumi.Input[str] pool_path: Path for Load Balancer Pool
        :param pulumi.Input[list] ports: Virtual Server ports
        :param pulumi.Input[dict] server_ssl: This setting is used when load balancer establishes connection to the backend server
        :param pulumi.Input[str] service_path: Virtual Server can be associated with Load Balancer Service
        :param pulumi.Input[str] sorry_pool_path: When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **access_list_control** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `enabled` (`pulumi.Input[bool]`)
          * `groupPath` (`pulumi.Input[str]`)

        The **client_ssl** object supports the following:

          * `caPaths` (`pulumi.Input[list]`)
          * `certificate_chain_depth` (`pulumi.Input[float]`)
          * `clientAuth` (`pulumi.Input[str]`)
          * `crlPaths` (`pulumi.Input[list]`)
          * `defaultCertificatePath` (`pulumi.Input[str]`)
          * `sniPaths` (`pulumi.Input[list]`)
          * `sslProfilePath` (`pulumi.Input[str]`)

        The **server_ssl** object supports the following:

          * `caPaths` (`pulumi.Input[list]`)
          * `certificate_chain_depth` (`pulumi.Input[float]`)
          * `clientCertificatePath` (`pulumi.Input[str]`)
          * `crlPaths` (`pulumi.Input[list]`)
          * `server_auth` (`pulumi.Input[str]`)
          * `sslProfilePath` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['access_list_control'] = access_list_control
            __props__['access_log_enabled'] = access_log_enabled
            if application_profile_path is None:
                raise TypeError("Missing required property 'application_profile_path'")
            __props__['application_profile_path'] = application_profile_path
            __props__['client_ssl'] = client_ssl
            __props__['default_pool_member_ports'] = default_pool_member_ports
            __props__['description'] = description
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            __props__['enabled'] = enabled
            if ip_address is None:
                raise TypeError("Missing required property 'ip_address'")
            __props__['ip_address'] = ip_address
            __props__['log_significant_event_only'] = log_significant_event_only
            __props__['max_concurrent_connections'] = max_concurrent_connections
            __props__['max_new_connection_rate'] = max_new_connection_rate
            __props__['nsx_id'] = nsx_id
            __props__['persistence_profile_path'] = persistence_profile_path
            __props__['pool_path'] = pool_path
            if ports is None:
                raise TypeError("Missing required property 'ports'")
            __props__['ports'] = ports
            __props__['server_ssl'] = server_ssl
            __props__['service_path'] = service_path
            __props__['sorry_pool_path'] = sorry_pool_path
            __props__['tags'] = tags
            __props__['path'] = None
            __props__['revision'] = None
        super(PolicyLBVirtualServer, __self__).__init__(
            'nsxt:index/policyLBVirtualServer:PolicyLBVirtualServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, access_list_control=None, access_log_enabled=None, application_profile_path=None, client_ssl=None, default_pool_member_ports=None, description=None, display_name=None, enabled=None, ip_address=None, log_significant_event_only=None, max_concurrent_connections=None, max_new_connection_rate=None, nsx_id=None, path=None, persistence_profile_path=None, pool_path=None, ports=None, revision=None, server_ssl=None, service_path=None, sorry_pool_path=None, tags=None):
        """
        Get an existing PolicyLBVirtualServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] access_list_control: IP access list control for filtering the connections from clients
        :param pulumi.Input[bool] access_log_enabled: If enabled, all connections/requests sent to virtual server are logged to the access log file
        :param pulumi.Input[str] application_profile_path: Application profile for this virtual server
        :param pulumi.Input[dict] client_ssl: This setting is used when load balancer terminates client SSL connection
        :param pulumi.Input[list] default_pool_member_ports: Default pool member ports when member port is not defined
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[bool] enabled: Flag to enable Virtual Server
        :param pulumi.Input[str] ip_address: Virtual Server IP address
        :param pulumi.Input[bool] log_significant_event_only: Flag to log significant events in access log, if access log is enabed
        :param pulumi.Input[float] max_concurrent_connections: To ensure one virtual server does not over consume resources, connections to a virtual server can be capped.
        :param pulumi.Input[float] max_new_connection_rate: To ensure one virtual server does not over consume resources, connections to a member can be rate limited.
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] path: Policy path for this resource
        :param pulumi.Input[str] persistence_profile_path: Path to persistence profile allowing related client connections to be sent to the same backend server.
        :param pulumi.Input[str] pool_path: Path for Load Balancer Pool
        :param pulumi.Input[list] ports: Virtual Server ports
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[dict] server_ssl: This setting is used when load balancer establishes connection to the backend server
        :param pulumi.Input[str] service_path: Virtual Server can be associated with Load Balancer Service
        :param pulumi.Input[str] sorry_pool_path: When load balancer can not select server in default pool or pool in rules, the request would be served by sorry pool
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user

        The **access_list_control** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `enabled` (`pulumi.Input[bool]`)
          * `groupPath` (`pulumi.Input[str]`)

        The **client_ssl** object supports the following:

          * `caPaths` (`pulumi.Input[list]`)
          * `certificate_chain_depth` (`pulumi.Input[float]`)
          * `clientAuth` (`pulumi.Input[str]`)
          * `crlPaths` (`pulumi.Input[list]`)
          * `defaultCertificatePath` (`pulumi.Input[str]`)
          * `sniPaths` (`pulumi.Input[list]`)
          * `sslProfilePath` (`pulumi.Input[str]`)

        The **server_ssl** object supports the following:

          * `caPaths` (`pulumi.Input[list]`)
          * `certificate_chain_depth` (`pulumi.Input[float]`)
          * `clientCertificatePath` (`pulumi.Input[str]`)
          * `crlPaths` (`pulumi.Input[list]`)
          * `server_auth` (`pulumi.Input[str]`)
          * `sslProfilePath` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["access_list_control"] = access_list_control
        __props__["access_log_enabled"] = access_log_enabled
        __props__["application_profile_path"] = application_profile_path
        __props__["client_ssl"] = client_ssl
        __props__["default_pool_member_ports"] = default_pool_member_ports
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["enabled"] = enabled
        __props__["ip_address"] = ip_address
        __props__["log_significant_event_only"] = log_significant_event_only
        __props__["max_concurrent_connections"] = max_concurrent_connections
        __props__["max_new_connection_rate"] = max_new_connection_rate
        __props__["nsx_id"] = nsx_id
        __props__["path"] = path
        __props__["persistence_profile_path"] = persistence_profile_path
        __props__["pool_path"] = pool_path
        __props__["ports"] = ports
        __props__["revision"] = revision
        __props__["server_ssl"] = server_ssl
        __props__["service_path"] = service_path
        __props__["sorry_pool_path"] = sorry_pool_path
        __props__["tags"] = tags
        return PolicyLBVirtualServer(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
