# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class PolicySecurityPolicy(pulumi.CustomResource):
    category: pulumi.Output[str]
    """
    Category
    """
    comments: pulumi.Output[str]
    """
    Comments for security policy lock/unlock
    """
    description: pulumi.Output[str]
    """
    Description for this resource
    """
    display_name: pulumi.Output[str]
    """
    Display name for this resource
    """
    domain: pulumi.Output[str]
    """
    The domain name to use for resources. If not specified 'default' is used
    """
    locked: pulumi.Output[bool]
    """
    Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this
    policy
    """
    nsx_id: pulumi.Output[str]
    """
    NSX ID for this resource
    """
    path: pulumi.Output[str]
    """
    Policy path for this resource
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    rules: pulumi.Output[list]
    """
    List of rules in the section

      * `action` (`str`)
      * `description` (`str`)
      * `destinationGroups` (`list`)
      * `destinationsExcluded` (`bool`)
      * `direction` (`str`)
      * `disabled` (`bool`)
      * `display_name` (`str`)
      * `ipVersion` (`str`)
      * `logLabel` (`str`)
      * `logged` (`bool`)
      * `notes` (`str`)
      * `nsx_id` (`str`)
      * `profiles` (`list`)
      * `revision` (`float`)
      * `ruleId` (`float`)
      * `scopes` (`list`)
      * `sequence_number` (`float`)
      * `services` (`list`)
      * `sourceGroups` (`list`)
      * `sourcesExcluded` (`bool`)
      * `tags` (`list`)
        * `scope` (`str`)
        * `tag` (`str`)
    """
    scopes: pulumi.Output[list]
    """
    The list of group paths where the rules in this policy will get applied
    """
    sequence_number: pulumi.Output[float]
    """
    This field is used to resolve conflicts between security policies across domains
    """
    stateful: pulumi.Output[bool]
    """
    When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    tcp_strict: pulumi.Output[bool]
    """
    Ensures that a 3 way TCP handshake is done before the data packets are sent
    """
    def __init__(__self__, resource_name, opts=None, category=None, comments=None, description=None, display_name=None, domain=None, locked=None, nsx_id=None, rules=None, scopes=None, sequence_number=None, stateful=None, tags=None, tcp_strict=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a PolicySecurityPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: Category
        :param pulumi.Input[str] comments: Comments for security policy lock/unlock
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[str] domain: The domain name to use for resources. If not specified 'default' is used
        :param pulumi.Input[bool] locked: Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this
               policy
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[list] rules: List of rules in the section
        :param pulumi.Input[list] scopes: The list of group paths where the rules in this policy will get applied
        :param pulumi.Input[float] sequence_number: This field is used to resolve conflicts between security policies across domains
        :param pulumi.Input[bool] stateful: When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user
        :param pulumi.Input[bool] tcp_strict: Ensures that a 3 way TCP handshake is done before the data packets are sent

        The **rules** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `description` (`pulumi.Input[str]`)
          * `destinationGroups` (`pulumi.Input[list]`)
          * `destinationsExcluded` (`pulumi.Input[bool]`)
          * `direction` (`pulumi.Input[str]`)
          * `disabled` (`pulumi.Input[bool]`)
          * `display_name` (`pulumi.Input[str]`)
          * `ipVersion` (`pulumi.Input[str]`)
          * `logLabel` (`pulumi.Input[str]`)
          * `logged` (`pulumi.Input[bool]`)
          * `notes` (`pulumi.Input[str]`)
          * `nsx_id` (`pulumi.Input[str]`)
          * `profiles` (`pulumi.Input[list]`)
          * `revision` (`pulumi.Input[float]`)
          * `ruleId` (`pulumi.Input[float]`)
          * `scopes` (`pulumi.Input[list]`)
          * `sequence_number` (`pulumi.Input[float]`)
          * `services` (`pulumi.Input[list]`)
          * `sourceGroups` (`pulumi.Input[list]`)
          * `sourcesExcluded` (`pulumi.Input[bool]`)
          * `tags` (`pulumi.Input[list]`)
            * `scope` (`pulumi.Input[str]`)
            * `tag` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if category is None:
                raise TypeError("Missing required property 'category'")
            __props__['category'] = category
            __props__['comments'] = comments
            __props__['description'] = description
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            __props__['domain'] = domain
            __props__['locked'] = locked
            __props__['nsx_id'] = nsx_id
            __props__['rules'] = rules
            __props__['scopes'] = scopes
            __props__['sequence_number'] = sequence_number
            __props__['stateful'] = stateful
            __props__['tags'] = tags
            __props__['tcp_strict'] = tcp_strict
            __props__['path'] = None
            __props__['revision'] = None
        super(PolicySecurityPolicy, __self__).__init__(
            'nsxt:index/policySecurityPolicy:PolicySecurityPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, category=None, comments=None, description=None, display_name=None, domain=None, locked=None, nsx_id=None, path=None, revision=None, rules=None, scopes=None, sequence_number=None, stateful=None, tags=None, tcp_strict=None):
        """
        Get an existing PolicySecurityPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: Category
        :param pulumi.Input[str] comments: Comments for security policy lock/unlock
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[str] domain: The domain name to use for resources. If not specified 'default' is used
        :param pulumi.Input[bool] locked: Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this
               policy
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[str] path: Policy path for this resource
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[list] rules: List of rules in the section
        :param pulumi.Input[list] scopes: The list of group paths where the rules in this policy will get applied
        :param pulumi.Input[float] sequence_number: This field is used to resolve conflicts between security policies across domains
        :param pulumi.Input[bool] stateful: When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user
        :param pulumi.Input[bool] tcp_strict: Ensures that a 3 way TCP handshake is done before the data packets are sent

        The **rules** object supports the following:

          * `action` (`pulumi.Input[str]`)
          * `description` (`pulumi.Input[str]`)
          * `destinationGroups` (`pulumi.Input[list]`)
          * `destinationsExcluded` (`pulumi.Input[bool]`)
          * `direction` (`pulumi.Input[str]`)
          * `disabled` (`pulumi.Input[bool]`)
          * `display_name` (`pulumi.Input[str]`)
          * `ipVersion` (`pulumi.Input[str]`)
          * `logLabel` (`pulumi.Input[str]`)
          * `logged` (`pulumi.Input[bool]`)
          * `notes` (`pulumi.Input[str]`)
          * `nsx_id` (`pulumi.Input[str]`)
          * `profiles` (`pulumi.Input[list]`)
          * `revision` (`pulumi.Input[float]`)
          * `ruleId` (`pulumi.Input[float]`)
          * `scopes` (`pulumi.Input[list]`)
          * `sequence_number` (`pulumi.Input[float]`)
          * `services` (`pulumi.Input[list]`)
          * `sourceGroups` (`pulumi.Input[list]`)
          * `sourcesExcluded` (`pulumi.Input[bool]`)
          * `tags` (`pulumi.Input[list]`)
            * `scope` (`pulumi.Input[str]`)
            * `tag` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["category"] = category
        __props__["comments"] = comments
        __props__["description"] = description
        __props__["display_name"] = display_name
        __props__["domain"] = domain
        __props__["locked"] = locked
        __props__["nsx_id"] = nsx_id
        __props__["path"] = path
        __props__["revision"] = revision
        __props__["rules"] = rules
        __props__["scopes"] = scopes
        __props__["sequence_number"] = sequence_number
        __props__["stateful"] = stateful
        __props__["tags"] = tags
        __props__["tcp_strict"] = tcp_strict
        return PolicySecurityPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
