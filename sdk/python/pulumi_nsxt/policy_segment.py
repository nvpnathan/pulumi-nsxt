# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class PolicySegment(pulumi.CustomResource):
    advanced_config: pulumi.Output[dict]
    """
    Advanced segment configuration

      * `addressPoolPath` (`str`)
      * `connectivity` (`str`)
      * `hybrid` (`bool`)
      * `localEgress` (`bool`)
      * `uplinkTeamingPolicy` (`str`)
    """
    connectivity_path: pulumi.Output[str]
    """
    Policy path to the connecting Tier-0 or Tier-1
    """
    description: pulumi.Output[str]
    """
    Description for this resource
    """
    dhcp_config_path: pulumi.Output[str]
    """
    Policy path to DHCP server or relay configuration to use for subnets configured on this segment
    """
    discovery_profile: pulumi.Output[dict]
    """
    IP and MAC discovery profiles for this segment

      * `bindingMapPath` (`str`)
      * `ipDiscoveryProfilePath` (`str`)
      * `macDiscoveryProfilePath` (`str`)
      * `revision` (`float`)
    """
    display_name: pulumi.Output[str]
    """
    Display name for this resource
    """
    domain_name: pulumi.Output[str]
    """
    DNS domain names
    """
    l2_extension: pulumi.Output[dict]
    """
    Configuration for extending Segment through L2 VPN

      * `l2vpnPaths` (`list`)
      * `tunnelId` (`float`)
    """
    nsx_id: pulumi.Output[str]
    """
    NSX ID for this resource
    """
    overlay_id: pulumi.Output[float]
    """
    Overlay connectivity ID for this Segment
    """
    path: pulumi.Output[str]
    """
    Policy path for this resource
    """
    qos_profile: pulumi.Output[dict]
    """
    QoS profiles for this segment

      * `bindingMapPath` (`str`)
      * `qosProfilePath` (`str`)
      * `revision` (`float`)
    """
    revision: pulumi.Output[float]
    """
    The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
    changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
    operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
    """
    security_profile: pulumi.Output[dict]
    """
    Security profiles for this segment

      * `bindingMapPath` (`str`)
      * `revision` (`float`)
      * `securityProfilePath` (`str`)
      * `spoofguardProfilePath` (`str`)
    """
    subnets: pulumi.Output[list]
    """
    Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs

      * `cidr` (`str`)
      * `dhcpRanges` (`list`)
      * `dhcpV4Config` (`dict`)
        * `dhcp_generic_options` (`list`)
          * `code` (`float`)
          * `values` (`list`)

        * `dhcp_option121s` (`list`)
          * `network` (`str`)
          * `nextHop` (`str`)

        * `dnsServers` (`list`)
        * `lease_time` (`float`)
        * `serverAddress` (`str`)

      * `dhcpV6Config` (`dict`)
        * `dnsServers` (`list`)
        * `domainNames` (`list`)
        * `excludedRanges` (`list`)
          * `end` (`str`)
          * `start` (`str`)

        * `lease_time` (`float`)
        * `preferredTime` (`float`)
        * `serverAddress` (`str`)
        * `sntpServers` (`list`)

      * `network` (`str`)
    """
    tags: pulumi.Output[list]
    """
    Set of opaque identifiers meaningful to the user

      * `scope` (`str`)
      * `tag` (`str`)
    """
    transport_zone_path: pulumi.Output[str]
    """
    Policy path to the transport zone
    """
    vlan_ids: pulumi.Output[list]
    """
    VLAN IDs for VLAN backed Segment
    """
    def __init__(__self__, resource_name, opts=None, advanced_config=None, connectivity_path=None, description=None, dhcp_config_path=None, discovery_profile=None, display_name=None, domain_name=None, l2_extension=None, nsx_id=None, overlay_id=None, qos_profile=None, security_profile=None, subnets=None, tags=None, transport_zone_path=None, vlan_ids=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a PolicySegment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] advanced_config: Advanced segment configuration
        :param pulumi.Input[str] connectivity_path: Policy path to the connecting Tier-0 or Tier-1
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] dhcp_config_path: Policy path to DHCP server or relay configuration to use for subnets configured on this segment
        :param pulumi.Input[dict] discovery_profile: IP and MAC discovery profiles for this segment
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[str] domain_name: DNS domain names
        :param pulumi.Input[dict] l2_extension: Configuration for extending Segment through L2 VPN
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[float] overlay_id: Overlay connectivity ID for this Segment
        :param pulumi.Input[dict] qos_profile: QoS profiles for this segment
        :param pulumi.Input[dict] security_profile: Security profiles for this segment
        :param pulumi.Input[list] subnets: Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user
        :param pulumi.Input[str] transport_zone_path: Policy path to the transport zone
        :param pulumi.Input[list] vlan_ids: VLAN IDs for VLAN backed Segment

        The **advanced_config** object supports the following:

          * `addressPoolPath` (`pulumi.Input[str]`)
          * `connectivity` (`pulumi.Input[str]`)
          * `hybrid` (`pulumi.Input[bool]`)
          * `localEgress` (`pulumi.Input[bool]`)
          * `uplinkTeamingPolicy` (`pulumi.Input[str]`)

        The **discovery_profile** object supports the following:

          * `bindingMapPath` (`pulumi.Input[str]`)
          * `ipDiscoveryProfilePath` (`pulumi.Input[str]`)
          * `macDiscoveryProfilePath` (`pulumi.Input[str]`)
          * `revision` (`pulumi.Input[float]`)

        The **l2_extension** object supports the following:

          * `l2vpnPaths` (`pulumi.Input[list]`)
          * `tunnelId` (`pulumi.Input[float]`)

        The **qos_profile** object supports the following:

          * `bindingMapPath` (`pulumi.Input[str]`)
          * `qosProfilePath` (`pulumi.Input[str]`)
          * `revision` (`pulumi.Input[float]`)

        The **security_profile** object supports the following:

          * `bindingMapPath` (`pulumi.Input[str]`)
          * `revision` (`pulumi.Input[float]`)
          * `securityProfilePath` (`pulumi.Input[str]`)
          * `spoofguardProfilePath` (`pulumi.Input[str]`)

        The **subnets** object supports the following:

          * `cidr` (`pulumi.Input[str]`)
          * `dhcpRanges` (`pulumi.Input[list]`)
          * `dhcpV4Config` (`pulumi.Input[dict]`)
            * `dhcp_generic_options` (`pulumi.Input[list]`)
              * `code` (`pulumi.Input[float]`)
              * `values` (`pulumi.Input[list]`)

            * `dhcp_option121s` (`pulumi.Input[list]`)
              * `network` (`pulumi.Input[str]`)
              * `nextHop` (`pulumi.Input[str]`)

            * `dnsServers` (`pulumi.Input[list]`)
            * `lease_time` (`pulumi.Input[float]`)
            * `serverAddress` (`pulumi.Input[str]`)

          * `dhcpV6Config` (`pulumi.Input[dict]`)
            * `dnsServers` (`pulumi.Input[list]`)
            * `domainNames` (`pulumi.Input[list]`)
            * `excludedRanges` (`pulumi.Input[list]`)
              * `end` (`pulumi.Input[str]`)
              * `start` (`pulumi.Input[str]`)

            * `lease_time` (`pulumi.Input[float]`)
            * `preferredTime` (`pulumi.Input[float]`)
            * `serverAddress` (`pulumi.Input[str]`)
            * `sntpServers` (`pulumi.Input[list]`)

          * `network` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['advanced_config'] = advanced_config
            __props__['connectivity_path'] = connectivity_path
            __props__['description'] = description
            __props__['dhcp_config_path'] = dhcp_config_path
            __props__['discovery_profile'] = discovery_profile
            if display_name is None:
                raise TypeError("Missing required property 'display_name'")
            __props__['display_name'] = display_name
            __props__['domain_name'] = domain_name
            __props__['l2_extension'] = l2_extension
            __props__['nsx_id'] = nsx_id
            __props__['overlay_id'] = overlay_id
            __props__['qos_profile'] = qos_profile
            __props__['security_profile'] = security_profile
            __props__['subnets'] = subnets
            __props__['tags'] = tags
            if transport_zone_path is None:
                raise TypeError("Missing required property 'transport_zone_path'")
            __props__['transport_zone_path'] = transport_zone_path
            __props__['vlan_ids'] = vlan_ids
            __props__['path'] = None
            __props__['revision'] = None
        super(PolicySegment, __self__).__init__(
            'nsxt:index/policySegment:PolicySegment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, advanced_config=None, connectivity_path=None, description=None, dhcp_config_path=None, discovery_profile=None, display_name=None, domain_name=None, l2_extension=None, nsx_id=None, overlay_id=None, path=None, qos_profile=None, revision=None, security_profile=None, subnets=None, tags=None, transport_zone_path=None, vlan_ids=None):
        """
        Get an existing PolicySegment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] advanced_config: Advanced segment configuration
        :param pulumi.Input[str] connectivity_path: Policy path to the connecting Tier-0 or Tier-1
        :param pulumi.Input[str] description: Description for this resource
        :param pulumi.Input[str] dhcp_config_path: Policy path to DHCP server or relay configuration to use for subnets configured on this segment
        :param pulumi.Input[dict] discovery_profile: IP and MAC discovery profiles for this segment
        :param pulumi.Input[str] display_name: Display name for this resource
        :param pulumi.Input[str] domain_name: DNS domain names
        :param pulumi.Input[dict] l2_extension: Configuration for extending Segment through L2 VPN
        :param pulumi.Input[str] nsx_id: NSX ID for this resource
        :param pulumi.Input[float] overlay_id: Overlay connectivity ID for this Segment
        :param pulumi.Input[str] path: Policy path for this resource
        :param pulumi.Input[dict] qos_profile: QoS profiles for this segment
        :param pulumi.Input[float] revision: The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's
               changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET
               operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
        :param pulumi.Input[dict] security_profile: Security profiles for this segment
        :param pulumi.Input[list] subnets: Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
        :param pulumi.Input[list] tags: Set of opaque identifiers meaningful to the user
        :param pulumi.Input[str] transport_zone_path: Policy path to the transport zone
        :param pulumi.Input[list] vlan_ids: VLAN IDs for VLAN backed Segment

        The **advanced_config** object supports the following:

          * `addressPoolPath` (`pulumi.Input[str]`)
          * `connectivity` (`pulumi.Input[str]`)
          * `hybrid` (`pulumi.Input[bool]`)
          * `localEgress` (`pulumi.Input[bool]`)
          * `uplinkTeamingPolicy` (`pulumi.Input[str]`)

        The **discovery_profile** object supports the following:

          * `bindingMapPath` (`pulumi.Input[str]`)
          * `ipDiscoveryProfilePath` (`pulumi.Input[str]`)
          * `macDiscoveryProfilePath` (`pulumi.Input[str]`)
          * `revision` (`pulumi.Input[float]`)

        The **l2_extension** object supports the following:

          * `l2vpnPaths` (`pulumi.Input[list]`)
          * `tunnelId` (`pulumi.Input[float]`)

        The **qos_profile** object supports the following:

          * `bindingMapPath` (`pulumi.Input[str]`)
          * `qosProfilePath` (`pulumi.Input[str]`)
          * `revision` (`pulumi.Input[float]`)

        The **security_profile** object supports the following:

          * `bindingMapPath` (`pulumi.Input[str]`)
          * `revision` (`pulumi.Input[float]`)
          * `securityProfilePath` (`pulumi.Input[str]`)
          * `spoofguardProfilePath` (`pulumi.Input[str]`)

        The **subnets** object supports the following:

          * `cidr` (`pulumi.Input[str]`)
          * `dhcpRanges` (`pulumi.Input[list]`)
          * `dhcpV4Config` (`pulumi.Input[dict]`)
            * `dhcp_generic_options` (`pulumi.Input[list]`)
              * `code` (`pulumi.Input[float]`)
              * `values` (`pulumi.Input[list]`)

            * `dhcp_option121s` (`pulumi.Input[list]`)
              * `network` (`pulumi.Input[str]`)
              * `nextHop` (`pulumi.Input[str]`)

            * `dnsServers` (`pulumi.Input[list]`)
            * `lease_time` (`pulumi.Input[float]`)
            * `serverAddress` (`pulumi.Input[str]`)

          * `dhcpV6Config` (`pulumi.Input[dict]`)
            * `dnsServers` (`pulumi.Input[list]`)
            * `domainNames` (`pulumi.Input[list]`)
            * `excludedRanges` (`pulumi.Input[list]`)
              * `end` (`pulumi.Input[str]`)
              * `start` (`pulumi.Input[str]`)

            * `lease_time` (`pulumi.Input[float]`)
            * `preferredTime` (`pulumi.Input[float]`)
            * `serverAddress` (`pulumi.Input[str]`)
            * `sntpServers` (`pulumi.Input[list]`)

          * `network` (`pulumi.Input[str]`)

        The **tags** object supports the following:

          * `scope` (`pulumi.Input[str]`)
          * `tag` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["advanced_config"] = advanced_config
        __props__["connectivity_path"] = connectivity_path
        __props__["description"] = description
        __props__["dhcp_config_path"] = dhcp_config_path
        __props__["discovery_profile"] = discovery_profile
        __props__["display_name"] = display_name
        __props__["domain_name"] = domain_name
        __props__["l2_extension"] = l2_extension
        __props__["nsx_id"] = nsx_id
        __props__["overlay_id"] = overlay_id
        __props__["path"] = path
        __props__["qos_profile"] = qos_profile
        __props__["revision"] = revision
        __props__["security_profile"] = security_profile
        __props__["subnets"] = subnets
        __props__["tags"] = tags
        __props__["transport_zone_path"] = transport_zone_path
        __props__["vlan_ids"] = vlan_ids
        return PolicySegment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
