# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class Provider(pulumi.ProviderResource):
    def __init__(__self__, resource_name, opts=None, allow_unverified_ssl=None, ca_file=None, client_auth_cert_file=None, client_auth_key_file=None, enforcement_point=None, global_manager=None, host=None, max_retries=None, password=None, remote_auth=None, retry_max_delay=None, retry_min_delay=None, retry_on_status_codes=None, tolerate_partial_success=None, username=None, vmc_auth_host=None, vmc_token=None, __props__=None, __name__=None, __opts__=None):
        """
        The provider type for the nsxt package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] enforcement_point: Enforcement Point for NSXT Policy
        :param pulumi.Input[bool] global_manager: Is this a policy global manager endpoint
        :param pulumi.Input[str] host: The hostname or IP address of the NSX manager.
        :param pulumi.Input[float] max_retries: Maximum number of HTTP client retries
        :param pulumi.Input[float] retry_max_delay: Maximum delay in milliseconds between retries of a request
        :param pulumi.Input[float] retry_min_delay: Minimum delay in milliseconds between retries of a request
        :param pulumi.Input[list] retry_on_status_codes: HTTP replies status codes to retry on
        :param pulumi.Input[bool] tolerate_partial_success: Treat partial success status as success
        :param pulumi.Input[str] vmc_auth_host: URL for VMC authorization service (CSP)
        :param pulumi.Input[str] vmc_token: Long-living API token for VMC authorization
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if allow_unverified_ssl is None:
                allow_unverified_ssl = utilities.get_env_bool('NSXT_ALLOW_UNVERIFIED_SSL')
            __props__['allow_unverified_ssl'] = pulumi.Output.from_input(allow_unverified_ssl).apply(json.dumps) if allow_unverified_ssl is not None else None
            if ca_file is None:
                ca_file = utilities.get_env('NSXT_CA_FILE')
            __props__['ca_file'] = ca_file
            if client_auth_cert_file is None:
                client_auth_cert_file = utilities.get_env('NSXT_CLIENT_AUTH_CERT_FILE')
            __props__['client_auth_cert_file'] = client_auth_cert_file
            if client_auth_key_file is None:
                client_auth_key_file = utilities.get_env('NSXT_CLIENT_AUTH_KEY_FILE')
            __props__['client_auth_key_file'] = client_auth_key_file
            if enforcement_point is None:
                enforcement_point = utilities.get_env('NSXT_POLICY_ENFORCEMENT_POINT')
            __props__['enforcement_point'] = enforcement_point
            if global_manager is None:
                global_manager = utilities.get_env_bool('NSXT_GLOBAL_MANAGER')
            __props__['global_manager'] = pulumi.Output.from_input(global_manager).apply(json.dumps) if global_manager is not None else None
            if host is None:
                host = utilities.get_env('NSXT_MANAGER_HOST')
            __props__['host'] = host
            if max_retries is None:
                max_retries = utilities.get_env_int('NSXT_MAX_RETRIES')
            __props__['max_retries'] = pulumi.Output.from_input(max_retries).apply(json.dumps) if max_retries is not None else None
            if password is None:
                password = utilities.get_env('NSXT_PASSWORD')
            __props__['password'] = password
            if remote_auth is None:
                remote_auth = utilities.get_env_bool('NSXT_REMOTE_AUTH')
            __props__['remote_auth'] = pulumi.Output.from_input(remote_auth).apply(json.dumps) if remote_auth is not None else None
            if retry_max_delay is None:
                retry_max_delay = utilities.get_env_int('NSXT_RETRY_MAX_DELAY')
            __props__['retry_max_delay'] = pulumi.Output.from_input(retry_max_delay).apply(json.dumps) if retry_max_delay is not None else None
            if retry_min_delay is None:
                retry_min_delay = utilities.get_env_int('NSXT_RETRY_MIN_DELAY')
            __props__['retry_min_delay'] = pulumi.Output.from_input(retry_min_delay).apply(json.dumps) if retry_min_delay is not None else None
            __props__['retry_on_status_codes'] = pulumi.Output.from_input(retry_on_status_codes).apply(json.dumps) if retry_on_status_codes is not None else None
            if tolerate_partial_success is None:
                tolerate_partial_success = utilities.get_env_bool('NSXT_TOLERATE_PARTIAL_SUCCESS')
            __props__['tolerate_partial_success'] = pulumi.Output.from_input(tolerate_partial_success).apply(json.dumps) if tolerate_partial_success is not None else None
            if username is None:
                username = utilities.get_env('NSXT_USERNAME')
            __props__['username'] = username
            if vmc_auth_host is None:
                vmc_auth_host = utilities.get_env('NSXT_VMC_AUTH_HOST')
            __props__['vmc_auth_host'] = vmc_auth_host
            if vmc_token is None:
                vmc_token = utilities.get_env('NSXT_VMC_TOKEN')
            __props__['vmc_token'] = vmc_token
        super(Provider, __self__).__init__(
            'nsxt',
            resource_name,
            __props__,
            opts)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
